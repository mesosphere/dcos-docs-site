swagger: '2.0'
info:
  version: '2.0'
  title: Marathon REST API
  description: ''
host: ..
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /v2/apps/{app_id}/restart:
    post:
      description: Restart all tasks of this application.
      summary: V2AppsRestartByAppId
      tags:
      - apps
      operationId: V2AppsRestartByAppId
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              message: App '/not_existent' does not exist
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/apps/{app_id}/tasks/{task_id}:
    delete:
      description: Kill the task with ID `task_id` that belongs to the application `app_id`.
      summary: V2AppsTasksByAppIdAndTaskId
      tags:
      - apps
      operationId: V2AppsTasksByAppIdAndTaskId
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: task_id
        in: path
        required: true
        type: string
        description: ''
      - name: scale
        in: query
        required: true
        type: string
        description: If `scale=true` is specified, then the application is scaled down by the number of killed tasks. Only possible if `wipe=false` or not specified.
      - name: wipe
        in: query
        required: true
        type: string
        description: If `wipe=true` is specified and the app uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed. Only possible if `scale=false` or not specified.
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this task_id.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Task 'not-existing' does not exist
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/apps/{app_id}/tasks:
    get:
      description: List all running tasks for application `app_id`.
      summary: V2AppsTasksByAppId
      tags:
      - apps
      operationId: V2AppsTasksByAppId
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The list of running tasks for application `app_id`.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "tasks": [
                  {
                    "appId": "/minecraft/survival-world",
                    "host": "srv7.hw.ca1.mesosphere.com",
                    "id": "minecraft_survival-world.564bd685-4c30-11e5-98c1-be5b2935a987",
                    "ports": [
                      31756
                    ],
                    "slaveId": null,
                    "stagedAt": "2015-08-26T20:23:39.463Z",
                    "startedAt": "2015-08-26T20:23:44.678Z",
                    "version": "2015-04-17T04:00:14.171Z"
                  }
                ]
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Kill tasks that belong to the application `app_id`
      summary: V2AppsTasksByAppId
      tags:
      - apps
      operationId: V2AppsTasksByAppId1
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: host
        in: query
        required: true
        type: string
        description: all tasks of that application on the supplied slave are killed
      - name: scale
        in: query
        required: true
        type: string
        description: If `scale=true` is specified, then the application is scaled down by the number of killed tasks. Only possible if `wipe=false` or not specified.
      - name: wipe
        in: query
        required: true
        type: string
        description: If `wipe=true` is specified and the app uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed. Only possible if `scale=false` or not specified.
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema: {}
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/apps/{app_id}/versions/{version}:
    get:
      description: List the configuration of the application with id `app_id` at version `version`.
      summary: V2AppsVersionsByAppIdAndVersion
      tags:
      - apps
      operationId: V2AppsVersionsByAppIdAndVersion
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: version
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The application definition at that point in time.
          schema:
            $ref: '#/definitions/App'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/apps/{app_id}/versions:
    get:
      description: List the versions of the application with id `app_id`
      summary: V2AppsVersionsByAppId
      tags:
      - apps
      operationId: V2AppsVersionsByAppId
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The list of versions of the application
          schema:
            type: string
          examples:
            text/plain: >
              { "versions": [ "2014-03-01T23:42:20.938Z" ] }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: App '/not_existent' does not exist
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/apps/{app_id}:
    get:
      description: Get the application with id `app_id`. The response includes some status information besides the current configuration of the app. You can specify optional embed arguments, to get more embedded information.
      summary: V2AppsByAppId
      tags:
      - apps
      operationId: V2AppsByAppId
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: embed
        in: query
        required: true
        enum:
        - app.tasks
        - app.count
        - app.deployments
        - app.lastTaskFailure
        - app.failures
        - app.taskStats
        type: string
        description: >-
          Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. <br/>

          - <code>app.tasks</code>. embed tasks Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.

          - <code>app.counts</code>. embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.

          - <code>app.deployments</code>. embed all deployment identifier, if the related app currently is in deployment.

          - <code>app.readiness</code> embed all readiness check results

          - <code>app.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

          - <code>app.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.

          - <code>app.taskStats</code> exposes task statistics in the JSON.
      responses:
        200:
          description: ''
          schema:
            type: string
          examples:
            text/plain: >
              {
                "apps": [
                  {
                    "id": "/myapp",
                    "cmd": "env && sleep 60",
                    "args": null,
                    "user": null,
                    "env": {
                      "LD_LIBRARY_PATH": "/usr/local/lib/myLib"
                    },
                    "instances": 3,
                    "cpus": 0.1,
                    "mem": 5,
                    "disk": 0,
                    "executor": "",
                    "constraints": [
                      [
                        "hostname",
                        "UNIQUE",
                        ""
                      ]
                    ],
                    "uris": [
                      "https://raw.github.com/mesosphere/marathon/master/README.md"
                    ],
                    "ports": [
                      10013,
                      10015
                    ],
                    "requirePorts": false,
                    "backoffSeconds": 1,
                    "backoffFactor": 1.15,
                    "maxLaunchDelaySeconds": 3600,
                    "container": null,
                    "healthChecks": [],
                    "dependencies": [],
                    "upgradeStrategy": {
                      "minimumHealthCapacity": 1,
                      "maximumOverCapacity": 1
                    },
                    "labels": {},
                    "acceptedResourceRoles": null,
                    "version": "2015-09-25T15:13:48.343Z",
                    "versionInfo": {
                      "lastScalingAt": "2015-09-25T15:13:48.343Z",
                      "lastConfigChangeAt": "2015-09-25T15:13:48.343Z"
                    },
                    "tasksStaged": 0,
                    "tasksRunning": 0,
                    "tasksHealthy": 0,
                    "tasksUnhealthy": 0,
                    "deployments": [
                      {
                        "id": "9538079c-3898-4e32-aa31-799bf9097f74"
                      }
                    ]
                  }
                ]
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: App '/not_existent' does not exist
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: >-
        Replaces parameters of a running application. If no application with the given id exists, it will be created. If there is an application with this id, all running instances get upgraded to the new definition.


        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      summary: V2AppsByAppId
      tags:
      - apps
      operationId: V2AppsByAppId3
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/App'
      - name: partialUpdate
        in: query
        required: false
        default: true
        type: string
        description: >-
          Without specifying this parameter, this method has a patch like semantic:

          All values that are not defined in the json, will not change existing values.

          This was the default behaviour in previous Marathon versions.

          For backward compatibility, we will not change this behaviour, but let users opt in for a proper PUT.

          Note: We will change the default behaviour in the next Marathon version to support PATCH and PUT as HTTP methods.
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The application definition provided in the body is not valid.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Invalid JSON
              details:
              - path: /id
                errors:
                - error.expected.jsstring
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: App '/not_existent' does not exist
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
        422:
          description: The entity sent can not be preocessed, since there are validation errors
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Object is not valid
              details:
              - path: /upgradeStrategy/minimumHealthCapacity
                errors:
                - is greater than 1
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: >-
        Destroy an application. All data about that application will be deleted.

        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      summary: V2AppsByAppId
      tags:
      - apps
      operationId: V2AppsByAppId2
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No app with this id known.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: App '/not-existing' does not exist
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    patch:
      description: >-
        Replaces parameters of a running application. All running instances get upgraded to the new definition. Any given application ID will be ignored.

        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      summary: V2AppsByAppId
      tags:
      - apps
      operationId: V2AppsByAppId1
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/App'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The application definition provided in the body is not valid.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Invalid JSON
              details:
              - path: /id
                errors:
                - error.expected.jsstring
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: No task found with this `app_id`.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: App '/not_existent' does not exist
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
        422:
          description: The entity sent can not be preocessed, since there are validation errors
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Object is not valid
              details:
              - path: /upgradeStrategy/minimumHealthCapacity
                errors:
                - is greater than 1
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/apps:
    get:
      description: Get the list of running applications. Several filters can be applied via the following query parameters.
      summary: V2Apps
      tags:
      - apps
      operationId: V2Apps
      produces:
      - application/json
      parameters:
      - name: cmd
        in: query
        required: false
        type: string
        description: Filter the result to only return apps whose `cmd` field contains the given value
      - name: id
        in: query
        required: false
        type: string
        description: Filter the result to only return apps whose `id` is or contains the given value
      - name: label
        in: query
        required: false
        type: string
        description: >-
          A label selector query contains one or more label selectors, which are comma separated. Marathon supports three types of selectors existence-based, equality-based and set-based. In the case of multiple selectors, all must be satisfied so comma separator acts as an AND logical operator. Labels and values must consist of alphanumeric characters plus `-` `_` and `.` `-A-Za-z0-9_.`. Any other character is possible, but must be escaped with a backslash character.

          * <code>Existence based Selector Query</code> Matches the existence of a label <br/> Example&#58; my_label,environment

          * <code>Equality based Selector Query</code> Matches existence of labels and the (non) equality of the value.<br/> Example&#58; environment==production, tier!=frontend

          * <code>Set based Selector Query</code> Matches existence of labels and the (non) existence of the value in a given set<br/> Example&#58; environment in (stage,production), tier notin (frontend, service)
      - name: embed
        in: query
        required: false
        enum:
        - apps.tasks
        - apps.count
        - apps.deployments
        - apps.lastTaskFailure
        - apps.failures
        - apps.taskStats
        type: string
        description: >-
          Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values.

          - <code>apps.tasks</code> embed all tasks of each application<br/> Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.

          - <code>apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.

          - <code>apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.

          - <code>apps.readiness</code> embed all readiness check results

          - <code>apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

          - <code>apps.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.

          - <code>apps.taskStats</code> exposes task statistics in the JSON.
      responses:
        200:
          description: The list of applications that match the defined filters
          schema:
            type: string
          examples:
            text/plain: '{  "apps": [    {      "id": "/myapp",      "cmd": "env && sleep 60",      "args": null,      "user": null,      "env": {        "LD_LIBRARY_PATH": "/usr/local/lib/myLib"      },      "instances": 3,      "cpus": 0.1,      "mem": 5,      "disk": 0,      "executor": "",      "constraints": [        [          "hostname",          "UNIQUE",          ""        ]      ],      "uris": [        "https://raw.github.com/mesosphere/marathon/master/README.md"      ],      "ports": [        10013,        10015      ],      "requirePorts": false,      "backoffSeconds": 1,      "backoffFactor": 1.15,      "maxLaunchDelaySeconds": 3600,      "container": null,      "healthChecks": [],      "dependencies": [],      "upgradeStrategy": {        "minimumHealthCapacity": 1,        "maximumOverCapacity": 1      },      "labels": {},      "acceptedResourceRoles": null,      "version": "2015-09-25T15:13:48.343Z",      "versionInfo": {        "lastScalingAt": "2015-09-25T15:13:48.343Z",        "lastConfigChangeAt": "2015-09-25T15:13:48.343Z"      },      "tasksStaged": 0,      "tasksRunning": 0,      "tasksHealthy": 0,      "tasksUnhealthy": 0,      "deployments": [        {          "id": "9538079c-3898-4e32-aa31-799bf9097f74"        }      ]    }  ]}'
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/apps?cmd=java&id=/us-east/database/memsql&label=my_label, environment==production, tier!=frontend\ tier, deployed in (us, eu), deployed notin (aa, bb)&embed=apps.tasks
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{  "apps": [    {      "id": "/myapp",      "cmd": "env && sleep 60",      "args": null,      "user": null,      "env": {        "LD_LIBRARY_PATH": "/usr/local/lib/myLib"      },      "instances": 3,      "cpus": 0.1,      "mem": 5,      "disk": 0,      "executor": "",      "constraints": [        [          "hostname",          "UNIQUE",          ""        ]      ],      "uris": [        "https://raw.github.com/mesosphere/marathon/master/README.md"      ],      "ports": [        10013,        10015      ],      "requirePorts": false,      "backoffSeconds": 1,      "backoffFactor": 1.15,      "maxLaunchDelaySeconds": 3600,      "container": null,      "healthChecks": [],      "dependencies": [],      "upgradeStrategy": {        "minimumHealthCapacity": 1,        "maximumOverCapacity": 1      },      "labels": {},      "acceptedResourceRoles": null,      "version": "2015-09-25T15:13:48.343Z",      "versionInfo": {        "lastScalingAt": "2015-09-25T15:13:48.343Z",        "lastConfigChangeAt": "2015-09-25T15:13:48.343Z"      },      "tasksStaged": 0,      "tasksRunning": 0,      "tasksHealthy": 0,      "tasksUnhealthy": 0,      "deployments": [        {          "id": "9538079c-3898-4e32-aa31-799bf9097f74"        }      ]    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Apps1
        x-testDescription: Get the list of running applications. Several filters can be applied via the following query parameters.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: >-
        Change multiple applications either by upgrading existing ones or creating new ones. If there is an update to an already running application, the application gets upgraded. All instances of this application get replaced by the new version. The order of dependencies will be applied correctly. The upgradeStrategy defines the behaviour of the upgrade.

        If the id of the application is not known, the application gets started. The order of dependencies will be applied correctly. It is possible to mix upgrades and installs.

        If you have more complex scenarios with upgrades, use the groups endpoint.

        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      summary: V2Apps
      tags:
      - apps
      operationId: V2Apps3
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          type: array
          items:
            $ref: '#/definitions/App'
      - name: partialUpdate
        in: query
        required: false
        default: true
        type: string
        description: >-
          Without specifying this parameter, this method has a patch like semantic:

          All values that are not defined in the json, will not change existing values.

          This was the default behaviour in previous Marathon versions.

          For backward compatibility, we will not change this behaviour, but let users opt in for a proper PUT.

          Note: We will change the default behaviour in the next Marathon version to support PATCH and PUT as HTTP methods.
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The application definition provided in the body is not valid.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Invalid JSON
              details:
              - path: /id
                errors:
                - error.expected.jsstring
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already deployed application with this name
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: An app with id [/existing_app] already exists.
        422:
          description: The entity send can not be preocessed, since there are validation errors
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Object is not valid
              details:
              - path: /upgradeStrategy/minimumHealthCapacity
                errors:
                - is greater than 1
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: >-
        Create and start a new application.

        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      summary: V2Apps
      tags:
      - apps
      operationId: V2Apps1
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/App'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The application definition provided in the body is not valid.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Invalid JSON
              details:
              - path: /id
                errors:
                - error.expected.jsstring
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already deployed application with this name
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: An app with id [/existing_app] already exists.
        422:
          description: The entity send can not be preocessed, since there are validation errors
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Object is not valid
              details:
              - path: /upgradeStrategy/minimumHealthCapacity
                errors:
                - is greater than 1
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    patch:
      description: >-
        Change multiple existing applications by applying a patch. All instances of these applications get replaced by the new version. The order of dependencies will be applied correctly. Each upgradeStrategy defines the behaviour of the upgrade for the related app.

        The whole operation fails if the IDs of one or more applications are unknown. The order of dependencies will be applied correctly.

        If you have more complex scenarios with upgrades, use the groups endpoint.

        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      summary: V2Apps
      tags:
      - apps
      operationId: V2Apps2
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          type: array
          items:
            $ref: '#/definitions/App'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The application definition provided in the body is not valid.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Invalid JSON
              details:
              - path: /id
                errors:
                - error.expected.jsstring
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: One or more specified applications is currently locked by a deployment
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: App is locked by one or more deployments.
        422:
          description: The entity send can not be processed, since there are validation errors
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: Object is not valid
              details:
              - path: /upgradeStrategy/minimumHealthCapacity
                errors:
                - is greater than 1
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/:
    get:
      description: >
        List all the pod-based services in the system.
      summary: V2Pods
      tags:
      - pods
      operationId: V2Pods
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: >
            Yields a list of all pods in the system.

            Useful to perform backups of all pods registered with Marathon.
          schema:
            type: array
            items:
              $ref: '#/definitions/Pod'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/pods/
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Pods1
        x-testDescription: >
          List all the pod-based services in the system.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: >
        Create and start a new pod-based service.
      summary: V2Pods
      tags:
      - pods
      operationId: V2Pods1
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/Pod'
      responses:
        201:
          description: Pod created successfully.
          schema:
            $ref: '#/definitions/Pod'
          examples: {}
        400:
          description: Invalid JSON syntax.
          schema: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: Duplicate object ID. Another app, group, or pod already exists for the specified ID.
          schema: {}
        422:
          description: Invalid object specification, one or more specification rules have been violated.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/::status:
    get:
      description: Get the status for all pods
      summary: V2PodsStatus
      tags:
      - pods
      operationId: V2PodsStatus
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/PodStatus'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/pods/::status
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2PodsStatus1
        x-testDescription: Get the status for all pods
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/{id}:
    get:
      description: >
        Get the pod at the given id
      summary: V2PodsById
      tags:
      - pods
      operationId: V2PodsById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Pod'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: >
        Update an existing pod-based service.
      summary: V2PodsById
      tags:
      - pods
      operationId: V2PodsById2
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/Pod'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one pod at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: The pod has been updated and a deployment is started.
          schema:
            $ref: '#/definitions/Pod'
          examples: {}
        400:
          description: The given podId does not match the id in the pod specification.
          schema:
            $ref: '#/definitions/ErrorError'
          examples:
            application/json:
              message: "'/foo' does not match definition's id ('/bla')"
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
        422:
          description: Invalid object specification, one or more specification rules have been violated.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: >
        Delete an existing pod-based service.
      summary: V2PodsById
      tags:
      - pods
      operationId: V2PodsById1
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      responses:
        202:
          description: ''
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/{id}::status:
    get:
      description: >
        Get the status of the pod with the given id
      summary: V2PodsStatusById
      tags:
      - pods
      operationId: V2PodsStatusById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PodStatus'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/{id}::versions:
    get:
      description: >
        List the versions of this pod.
      summary: V2PodsVersionsById
      tags:
      - pods
      operationId: V2PodsVersionsById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      responses:
        200:
          description: ''
          schema:
            type: array
            items:
              type: string
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/{id}::versions/{version}:
    get:
      description: >
        List the versions of this pod.
      summary: V2PodsVersionsByIdAndVersion
      tags:
      - pods
      operationId: V2PodsVersionsByIdAndVersion
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      - name: version
        in: path
        required: true
        type: string
        description: The version of the pod
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Pod'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/{id}::instances/{instance}:
    delete:
      description: >
        Kill the given instance of the pod
      summary: V2PodsInstancesByIdAndInstance
      tags:
      - pods
      operationId: V2PodsInstancesByIdAndInstance
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      - name: instance
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PodInstanceStatus'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/pods/{id}::instances:
    delete:
      description: >
        Kill the given instances of the pod
      summary: V2PodsInstancesById
      tags:
      - pods
      operationId: V2PodsInstancesById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The path of the pod
      - name: body
        in: body
        required: true
        description: ''
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/PodInstanceStatus'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: Unknown object ID. No such app, group, or pod exists for the specified ID.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/deployments/{deployment_id}:
    delete:
      description: Revert the deployment with `deployment_id` by creating a new deployment which reverses all changes.
      summary: V2DeploymentsByDeploymentId
      tags:
      - deployments
      operationId: V2DeploymentsByDeploymentId
      produces:
      - application/json
      parameters:
      - name: deployment_id
        in: path
        required: true
        type: string
        description: ''
      - name: force
        in: query
        required: true
        type: boolean
        description: If set to <code>false</code> (the default) then the deployment is canceled and a new deployment is created to revert the changes of this deployment. Without concurrent deployments, this restores the configuration before this deployment. If set to <code>true</code>, then the deployment is still canceled but no rollback deployment is created. <br><br> **Warning** - Using <code>force=true</code> to abort a deployment can leave behind unaccounted for tasks and/or leave the app in a mixed state of old and new versions of tasks!
      responses:
        202:
          description: If the force flag is set to true, the deployment is canceled and no new deployment is triggered. In this case no body is returned.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: The deployment plan with the given id can not be found.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/deployments:
    get:
      description: >-
        List all running deployments. A deployment is a change in the service setup.

        A deployment is identified by an id, affects a set of applications and is composed of deployment steps.

        Every step contains a list of actions with following types

        * <code>StartApplication</code> starts an application, which is currently not running.

        * <code>StopApplication</code> stops an already running application.

        * <code>ScaleApplication</code> changes the number of instances of an application and allows to kill specified instances while scaling.

        * <code>RestartApplication</code> upgrades an already deployed application with a new version.

        * <code>StartPod</code> starts a pod, which is currently not running.

        * <code>StopPod</code> stops an already running pod.

        * <code>ScalePod</code> changes the number of instances of an pod and allows to kill specified instances while scaling.

        * <code>RestartPod</code> upgrades an already deployed pod with a new version.

        * <code>ResolveArtifacts</code> Resolve all artifacts of an application
      summary: V2Deployments
      tags:
      - deployments
      operationId: V2Deployments
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: The list of all running deployments.
          schema:
            type: string
          examples:
            text/plain: '[  {    "id": "97c136bf-5a28-4821-9d94-480d9fbb01c8",    "version": "2015-09-30T09:09:17.614Z",    "affectedApps": [      "/foo"    ],    "affectedPods": [      "/bla"    ],    "steps": [      {        "actions": [          {            "action": "ScaleApplication",            "app": "/foo"          }        ]      },      {        "actions": [          {            "action": "ScalePod",            "pod": "/bla"          }        ]      }    ],    "currentActions": [      {        "action": "ScaleApplication",        "app": "/foo",        "readinessCheckResults": [          {            "taskId": "foo.c9de6033",            "lastResponse": {              "body": "{}",              "contentType": "application/json",              "status": 500            },            "name": "myReadyCheck",            "ready": false          }        ]      }    ],    "currentStep": 1,    "totalSteps": 1  }]'
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/deployments
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '[  {    "id": "97c136bf-5a28-4821-9d94-480d9fbb01c8",    "version": "2015-09-30T09:09:17.614Z",    "affectedApps": [      "/foo"    ],    "affectedPods": [      "/bla"    ],    "steps": [      {        "actions": [          {            "action": "ScaleApplication",            "app": "/foo"          }        ]      },      {        "actions": [          {            "action": "ScalePod",            "pod": "/bla"          }        ]      }    ],    "currentActions": [      {        "action": "ScaleApplication",        "app": "/foo",        "readinessCheckResults": [          {            "taskId": "foo.c9de6033",            "lastResponse": {              "body": "{}",              "contentType": "application/json",              "status": 500            },            "name": "myReadyCheck",            "ready": false          }        ]      }    ],    "currentStep": 1,    "totalSteps": 1  }]'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Deployments1
        x-testDescription: >-
          List all running deployments. A deployment is a change in the service setup.

          A deployment is identified by an id, affects a set of applications and is composed of deployment steps.

          Every step contains a list of actions with following types

          * <code>StartApplication</code> starts an application, which is currently not running.

          * <code>StopApplication</code> stops an already running application.

          * <code>ScaleApplication</code> changes the number of instances of an application and allows to kill specified instances while scaling.

          * <code>RestartApplication</code> upgrades an already deployed application with a new version.

          * <code>StartPod</code> starts a pod, which is currently not running.

          * <code>StopPod</code> stops an already running pod.

          * <code>ScalePod</code> changes the number of instances of an pod and allows to kill specified instances while scaling.

          * <code>RestartPod</code> upgrades an already deployed pod with a new version.

          * <code>ResolveArtifacts</code> Resolve all artifacts of an application
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/groups//versions:
    get:
      description: List all versions the group with the specified path.
      summary: V2GroupsVersions
      tags:
      - groups
      operationId: V2GroupsVersions
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: List all available versions of that group.
          schema:
            type: string
          examples:
            text/plain: '[ "2015-09-25T15:13:48.343Z", "2015-09-11T11:11:22.692Z", "2015-09-11T10:47:21.241Z" ]'
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/groups//versions
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '[ "2015-09-25T15:13:48.343Z", "2015-09-11T11:11:22.692Z", "2015-09-11T10:47:21.241Z" ]'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2GroupsVersions1
        x-testDescription: List all versions the group with the specified path.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/groups/:
    get:
      description: Get the group with all applications and all transitive child groups.
      summary: V2Groups
      tags:
      - groups
      operationId: V2Groups
      produces:
      - application/json
      parameters:
      - name: embed
        in: query
        required: false
        enum:
        - group.groups
        - group.apps
        - group.apps.tasks
        - group.apps.count
        - group.apps.deployments
        - group.apps.lastTaskFailure
        - group.apps.failures
        - group.apps.taskStats
        type: string
        description: >-
          Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. Unknown embed parameters are ignored. If you omit this parameter, it defaults to <code>group.groups</code>, <code>group.apps</code>

          - <code>group.groups</code> embed all child groups of each group<br/>

          - <code>group.apps</code> embed all apps of each group<br/>

          - <code>group.apps.tasks</code> embed all tasks of each application<br/>

          - <code>group.apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/>

          - <code>group.apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.

          - <code>group.apps.readiness</code> embed all readiness check results

          - <code>group.apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

          - <code>group.apps.taskStats</code> exposes task statistics in the JSON.
      responses:
        200:
          description: The group with all transitive dependencies.
          schema:
            $ref: '#/definitions/GroupInfo'
          examples:
            application/json:
              id: /
              apps: []
              groups:
              - id: /tools
                apps:
                - id: /tools/oauth-server
                  instances: 2
                  cpus: 1
                  mem: 1024
                  disk: 0
                  constraints:
                  - - hostname
                    - UNIQUE
                  uris: []
                  ports:
                  - 1980
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.1499999999999999
                  maxLaunchDelaySeconds: 3600
                  container:
                    type: DOCKER
                    volumes: []
                    docker:
                      image: docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774
                      network: HOST
                      privileged: false
                      parameters: []
                      forcePullImage: false
                  healthChecks:
                  - path: /
                    protocol: HTTP
                    portIndex: 0
                    gracePeriodSeconds: 300
                    intervalSeconds: 20
                    timeoutSeconds: 20
                    maxConsecutiveFailures: 3
                    ignoreHttp1xx: false
                  dependencies: []
                  upgradeStrategy:
                    minimumHealthCapacity: 0.5
                    maximumOverCapacity: 0
                  version: 2015-09-28T19:47:37.6810000Z
                  versionInfo:
                    lastScalingAt: 2015-09-28T19:47:37.6810000Z
                    lastConfigChangeAt: 2015-09-28T19:47:37.6810000Z
                - id: /tools/datadog-agent
                  instances: 5
                  cpus: 1
                  mem: 512
                  disk: 0
                  executor: ''
                  constraints:
                  - - hostname
                    - UNIQUE
                  uris: []
                  ports:
                  - 10018
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.1499999999999999
                  maxLaunchDelaySeconds: 3600
                  container:
                    type: DOCKER
                    volumes:
                    - containerPath: /var/run/docker.sock
                      hostPath: /var/run/docker.sock
                      mode: RW
                    - containerPath: /host/proc/mounts
                      hostPath: /proc/mounts
                      mode: RO
                    - containerPath: /host/sys/fs/cgroup
                      hostPath: /sys/fs/cgroup/
                      mode: RO
                    docker:
                      image: datadog/docker-dd-agent:latest
                      network: HOST
                      privileged: true
                      parameters: []
                      forcePullImage: false
                  healthChecks: []
                  dependencies: []
                  upgradeStrategy:
                    minimumHealthCapacity: 0.5
                    maximumOverCapacity: 0
                  version: 2015-08-26T22:33:24.2250000Z
                  versionInfo:
                    lastScalingAt: 2015-08-26T22:33:24.2250000Z
                    lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
                groups:
                - id: /tools/log
                  apps: []
                  groups: []
                  dependencies: []
                  version: 2015-09-17T10:38:20.8750000Z
                - id: /tools/docker
                  apps:
                  - id: /tools/docker/registry
                    instances: 1
                    cpus: 0.5
                    mem: 4096
                    disk: 0
                    executor: ''
                    constraints: []
                    uris: []
                    ports:
                    - 5000
                    requirePorts: false
                    backoffSeconds: 1
                    backoffFactor: 1.1499999999999999
                    maxLaunchDelaySeconds: 3600
                    container:
                      type: DOCKER
                      volumes:
                      - containerPath: /docker_storage
                        hostPath: /hdd/tools/docker/registry
                        mode: RW
                      docker:
                        image: registry
                        network: BRIDGE
                        portMappings:
                        - containerPort: 5000
                          hostPort: 0
                          servicePort: 5000
                          protocol: tcp
                        privileged: false
                        parameters: []
                        forcePullImage: false
                    healthChecks: []
                    dependencies: []
                    upgradeStrategy:
                      minimumHealthCapacity: 1
                      maximumOverCapacity: 1
                    version: 2015-08-19T21:26:47.6160000Z
                    versionInfo:
                      lastScalingAt: 2015-08-19T21:26:47.6160000Z
                      lastConfigChangeAt: 2015-08-19T21:00:54.6210000Z
                  groups: []
                  dependencies: []
                  version: 2015-09-17T10:38:20.8750000Z
                dependencies: []
                version: 2015-09-17T10:38:20.8750000Z
              dependencies: []
              version: 2015-09-17T10:38:20.8750000Z
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/groups/?embed=group.apps
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{  "id": "/",  "apps": [],  "groups": [    {      "id": "/tools",      "apps": [        {          "id": "/tools/oauth-server",          "instances": 2,          "cpus": 1,          "mem": 1024,          "disk": 0,          "constraints": [            [              "hostname",              "UNIQUE"            ]          ],          "uris": [],          "ports": [            1980          ],          "requirePorts": false,          "backoffSeconds": 1,          "backoffFactor": 1.15,          "maxLaunchDelaySeconds": 3600,          "container": {            "type": "DOCKER",            "volumes": [],            "docker": {              "image": "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774",              "network": "HOST",              "privileged": false,              "parameters": [],              "forcePullImage": false            }          },          "healthChecks": [            {              "path": "/",              "protocol": "HTTP",              "portIndex": 0,              "gracePeriodSeconds": 300,              "intervalSeconds": 20,              "timeoutSeconds": 20,              "maxConsecutiveFailures": 3,              "ignoreHttp1xx": false            }          ],          "dependencies": [],          "upgradeStrategy": {            "minimumHealthCapacity": 0.5,            "maximumOverCapacity": 0          },          "version": "2015-09-28T19:47:37.681Z",          "versionInfo": {            "lastScalingAt": "2015-09-28T19:47:37.681Z",            "lastConfigChangeAt": "2015-09-28T19:47:37.681Z"          }        },        {          "id": "/tools/datadog-agent",          "instances": 5,          "cpus": 1,          "mem": 512,          "disk": 0,          "executor": "",          "constraints": [            [              "hostname",              "UNIQUE"            ]          ],          "uris": [],          "ports": [            10018          ],          "requirePorts": false,          "backoffSeconds": 1,          "backoffFactor": 1.15,          "maxLaunchDelaySeconds": 3600,          "container": {            "type": "DOCKER",            "volumes": [              {                "containerPath": "/var/run/docker.sock",                "hostPath": "/var/run/docker.sock",                "mode": "RW"              },              {                "containerPath": "/host/proc/mounts",                "hostPath": "/proc/mounts",                "mode": "RO"              },              {                "containerPath": "/host/sys/fs/cgroup",                "hostPath": "/sys/fs/cgroup/",                "mode": "RO"              }            ],            "docker": {              "image": "datadog/docker-dd-agent:latest",              "network": "HOST",              "privileged": true,              "parameters": [],              "forcePullImage": false            }          },          "healthChecks": [],          "dependencies": [],          "upgradeStrategy": {            "minimumHealthCapacity": 0.5,            "maximumOverCapacity": 0          },          "version": "2015-08-26T22:33:24.225Z",          "versionInfo": {            "lastScalingAt": "2015-08-26T22:33:24.225Z",            "lastConfigChangeAt": "2015-05-19T13:59:18.899Z"          }        }      ],      "groups": [        {          "id": "/tools/log",          "apps": [],          "groups": [],          "dependencies": [],          "version": "2015-09-17T10:38:20.875Z"        },        {          "id": "/tools/docker",          "apps": [            {              "id": "/tools/docker/registry",              "instances": 1,              "cpus": 0.5,              "mem": 4096,              "disk": 0,              "executor": "",              "constraints": [],              "uris": [],              "ports": [                5000              ],              "requirePorts": false,              "backoffSeconds": 1,              "backoffFactor": 1.15,              "maxLaunchDelaySeconds": 3600,              "container": {                "type": "DOCKER",                "volumes": [                  {                    "containerPath": "/docker_storage",                    "hostPath": "/hdd/tools/docker/registry",                    "mode": "RW"                  }                ],                "docker": {                  "image": "registry",                  "network": "BRIDGE",                  "portMappings": [                    {                      "containerPort": 5000,                      "hostPort": 0,                      "servicePort": 5000,                      "protocol": "tcp"                    }                  ],                  "privileged": false,                  "parameters": [],                  "forcePullImage": false                }              },              "healthChecks": [],              "dependencies": [],              "upgradeStrategy": {                "minimumHealthCapacity": 1,                "maximumOverCapacity": 1              },              "version": "2015-08-19T21:26:47.616Z",              "versionInfo": {                "lastScalingAt": "2015-08-19T21:26:47.616Z",                "lastConfigChangeAt": "2015-08-19T21:00:54.621Z"              }            }          ],          "groups": [],          "dependencies": [],          "version": "2015-09-17T10:38:20.875Z"        }      ],      "dependencies": [],      "version": "2015-09-17T10:38:20.875Z"    }  ],  "dependencies": [],  "version": "2015-09-17T10:38:20.875Z"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Groups1
        x-testDescription: Get the group with all applications and all transitive child groups.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: >-
        Change parameters of a deployed application group. The new group parameters get applied.


        * Changes to application parameters will result in a restart of this application.

        * A new application added to the group will be started.

        * An existing application removed from the group will be stopped.


        If there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.

        This method allows 2 special modes for the update operation>


        * Provide only the `version` field in the group definition. This will rollback the group to that given version

        * Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.


        When one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed. The scaleBy value will not be applied.

        A deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices


        * Rollback to an existing older version

        * Update with a newer version of the group which does not have the problems of the old one.


        Since the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version.
      summary: V2Groups
      tags:
      - groups
      operationId: V2Groups3
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/Group'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The group definition provided in the body is not valid.
          schema: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
        422:
          description: The entity send can not be preocessed, since there are validation errors
          schema: {}
      x-unitTests:
      - request:
          method: PUT
          uri: /v2/groups/?force=false
          headers:
            Content-Type: application/json
          body: '{  "id": "/",  "apps": [],  "groups": [    {      "id": "/tools",      "apps": [        {          "id": "/tools/oauth-server",          "instances": 2,          "cpus": 1,          "mem": 1024,          "disk": 0,          "constraints": [            [              "hostname",              "UNIQUE"            ]          ],          "uris": [],          "ports": [            1980          ],          "requirePorts": false,          "backoffSeconds": 1,          "backoffFactor": 1.15,          "maxLaunchDelaySeconds": 3600,          "container": {            "type": "DOCKER",            "volumes": [],            "docker": {              "image": "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774",              "network": "HOST",              "privileged": false,              "parameters": [],              "forcePullImage": false            }          },          "healthChecks": [            {              "path": "/",              "protocol": "HTTP",              "portIndex": 0,              "gracePeriodSeconds": 300,              "intervalSeconds": 20,              "timeoutSeconds": 20,              "maxConsecutiveFailures": 3,              "ignoreHttp1xx": false            }          ],          "dependencies": [],          "upgradeStrategy": {            "minimumHealthCapacity": 0.5,            "maximumOverCapacity": 0          },          "version": "2015-09-28T19:47:37.681Z",          "versionInfo": {            "lastScalingAt": "2015-09-28T19:47:37.681Z",            "lastConfigChangeAt": "2015-09-28T19:47:37.681Z"          }        },        {          "id": "/tools/datadog-agent",          "instances": 5,          "cpus": 1,          "mem": 512,          "disk": 0,          "executor": "",          "constraints": [            [              "hostname",              "UNIQUE"            ]          ],          "uris": [],          "ports": [            10018          ],          "requirePorts": false,          "backoffSeconds": 1,          "backoffFactor": 1.15,          "maxLaunchDelaySeconds": 3600,          "container": {            "type": "DOCKER",            "volumes": [              {                "containerPath": "/var/run/docker.sock",                "hostPath": "/var/run/docker.sock",                "mode": "RW"              },              {                "containerPath": "/host/proc/mounts",                "hostPath": "/proc/mounts",                "mode": "RO"              },              {                "containerPath": "/host/sys/fs/cgroup",                "hostPath": "/sys/fs/cgroup/",                "mode": "RO"              }            ],            "docker": {              "image": "datadog/docker-dd-agent:latest",              "network": "HOST",              "privileged": true,              "parameters": [],              "forcePullImage": false            }          },          "healthChecks": [],          "dependencies": [],          "upgradeStrategy": {            "minimumHealthCapacity": 0.5,            "maximumOverCapacity": 0          },          "version": "2015-08-26T22:33:24.225Z",          "versionInfo": {            "lastScalingAt": "2015-08-26T22:33:24.225Z",            "lastConfigChangeAt": "2015-05-19T13:59:18.899Z"          }        }      ],      "groups": [        {          "id": "/tools/log",          "apps": [],          "groups": [],          "dependencies": [],          "version": "2015-09-17T10:38:20.875Z"        },        {          "id": "/tools/docker",          "apps": [            {              "id": "/tools/docker/registry",              "instances": 1,              "cpus": 0.5,              "mem": 4096,              "disk": 0,              "executor": "",              "constraints": [],              "uris": [],              "ports": [                5000              ],              "requirePorts": false,              "backoffSeconds": 1,              "backoffFactor": 1.15,              "maxLaunchDelaySeconds": 3600,              "container": {                "type": "DOCKER",                "volumes": [                  {                    "containerPath": "/docker_storage",                    "hostPath": "/hdd/tools/docker/registry",                    "mode": "RW"                  }                ],                "docker": {                  "image": "registry",                  "network": "BRIDGE",                  "portMappings": [                    {                      "containerPort": 5000,                      "hostPort": 0,                      "servicePort": 5000,                      "protocol": "tcp"                    }                  ],                  "privileged": false,                  "parameters": [],                  "forcePullImage": false                }              },              "healthChecks": [],              "dependencies": [],              "upgradeStrategy": {                "minimumHealthCapacity": 1,                "maximumOverCapacity": 1              },              "version": "2015-08-19T21:26:47.616Z",              "versionInfo": {                "lastScalingAt": "2015-08-19T21:26:47.616Z",                "lastConfigChangeAt": "2015-08-19T21:00:54.621Z"              }            }          ],          "groups": [],          "dependencies": [],          "version": "2015-09-17T10:38:20.875Z"        }      ],      "dependencies": [],      "version": "2015-09-17T10:38:20.875Z"    }  ],  "dependencies": [],  "version": "2015-09-17T10:38:20.875Z"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Groups13
        x-testDescription: >-
          Change parameters of a deployed application group. The new group parameters get applied.


          * Changes to application parameters will result in a restart of this application.

          * A new application added to the group will be started.

          * An existing application removed from the group will be stopped.


          If there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.

          This method allows 2 special modes for the update operation>


          * Provide only the `version` field in the group definition. This will rollback the group to that given version

          * Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.


          When one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed. The scaleBy value will not be applied.

          A deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices


          * Rollback to an existing older version

          * Update with a newer version of the group which does not have the problems of the old one.


          Since the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Create and start a new application group. Application groups can contain other application groups.
      summary: V2Groups
      tags:
      - groups
      operationId: V2Groups1
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/GroupUpdate'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The group definition provided in the body is not valid.
          schema: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already deployed group with this name
          schema: {}
        422:
          description: The entity send can not be preocessed, since there are validation errors
          schema: {}
      x-unitTests:
      - request:
          method: POST
          uri: /v2/groups/?force=false
          headers:
            Content-Type: application/json
          body: '{  "id": "/",  "apps": [],  "groups": [    {      "id": "/tools",      "apps": [        {          "id": "/tools/oauth-server",          "instances": 2,          "cpus": 1,          "mem": 1024,          "disk": 0,          "constraints": [            [              "hostname",              "UNIQUE"            ]          ],          "uris": [],          "ports": [            1980          ],          "requirePorts": false,          "backoffSeconds": 1,          "backoffFactor": 1.15,          "maxLaunchDelaySeconds": 3600,          "container": {            "type": "DOCKER",            "volumes": [],            "docker": {              "image": "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774",              "network": "HOST",              "privileged": false,              "parameters": [],              "forcePullImage": false            }          },          "healthChecks": [            {              "path": "/",              "protocol": "HTTP",              "portIndex": 0,              "gracePeriodSeconds": 300,              "intervalSeconds": 20,              "timeoutSeconds": 20,              "maxConsecutiveFailures": 3,              "ignoreHttp1xx": false            }          ],          "dependencies": [],          "upgradeStrategy": {            "minimumHealthCapacity": 0.5,            "maximumOverCapacity": 0          },          "version": "2015-09-28T19:47:37.681Z",          "versionInfo": {            "lastScalingAt": "2015-09-28T19:47:37.681Z",            "lastConfigChangeAt": "2015-09-28T19:47:37.681Z"          }        },        {          "id": "/tools/datadog-agent",          "instances": 5,          "cpus": 1,          "mem": 512,          "disk": 0,          "executor": "",          "constraints": [            [              "hostname",              "UNIQUE"            ]          ],          "uris": [],          "ports": [            10018          ],          "requirePorts": false,          "backoffSeconds": 1,          "backoffFactor": 1.15,          "maxLaunchDelaySeconds": 3600,          "container": {            "type": "DOCKER",            "volumes": [              {                "containerPath": "/var/run/docker.sock",                "hostPath": "/var/run/docker.sock",                "mode": "RW"              },              {                "containerPath": "/host/proc/mounts",                "hostPath": "/proc/mounts",                "mode": "RO"              },              {                "containerPath": "/host/sys/fs/cgroup",                "hostPath": "/sys/fs/cgroup/",                "mode": "RO"              }            ],            "docker": {              "image": "datadog/docker-dd-agent:latest",              "network": "HOST",              "privileged": true,              "parameters": [],              "forcePullImage": false            }          },          "healthChecks": [],          "dependencies": [],          "upgradeStrategy": {            "minimumHealthCapacity": 0.5,            "maximumOverCapacity": 0          },          "version": "2015-08-26T22:33:24.225Z",          "versionInfo": {            "lastScalingAt": "2015-08-26T22:33:24.225Z",            "lastConfigChangeAt": "2015-05-19T13:59:18.899Z"          }        }      ],      "groups": [        {          "id": "/tools/log",          "apps": [],          "groups": [],          "dependencies": [],          "version": "2015-09-17T10:38:20.875Z"        },        {          "id": "/tools/docker",          "apps": [            {              "id": "/tools/docker/registry",              "instances": 1,              "cpus": 0.5,              "mem": 4096,              "disk": 0,              "executor": "",              "constraints": [],              "uris": [],              "ports": [                5000              ],              "requirePorts": false,              "backoffSeconds": 1,              "backoffFactor": 1.15,              "maxLaunchDelaySeconds": 3600,              "container": {                "type": "DOCKER",                "volumes": [                  {                    "containerPath": "/docker_storage",                    "hostPath": "/hdd/tools/docker/registry",                    "mode": "RW"                  }                ],                "docker": {                  "image": "registry",                  "network": "BRIDGE",                  "portMappings": [                    {                      "containerPort": 5000,                      "hostPort": 0,                      "servicePort": 5000,                      "protocol": "tcp"                    }                  ],                  "privileged": false,                  "parameters": [],                  "forcePullImage": false                }              },              "healthChecks": [],              "dependencies": [],              "upgradeStrategy": {                "minimumHealthCapacity": 1,                "maximumOverCapacity": 1              },              "version": "2015-08-19T21:26:47.616Z",              "versionInfo": {                "lastScalingAt": "2015-08-19T21:26:47.616Z",                "lastConfigChangeAt": "2015-08-19T21:00:54.621Z"              }            }          ],          "groups": [],          "dependencies": [],          "version": "2015-09-17T10:38:20.875Z"        }      ],      "dependencies": [],      "version": "2015-09-17T10:38:20.875Z"    }  ],  "dependencies": [],  "version": "2015-09-17T10:38:20.875Z"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Groups11
        x-testDescription: Create and start a new application group. Application groups can contain other application groups.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version.
      summary: V2Groups
      tags:
      - groups
      operationId: V2Groups2
      produces:
      - application/json
      parameters:
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests:
      - request:
          method: DELETE
          uri: /v2/groups/?force=false
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Groups12
        x-testDescription: Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/groups/{group_id}//versions:
    get:
      description: List all versions the group with the specified path.
      summary: V2GroupsVersionsByGroupId
      tags:
      - groups
      operationId: V2GroupsVersionsByGroupId
      produces:
      - application/json
      parameters:
      - name: group_id
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: List all available versions of that group.
          schema:
            type: string
          examples:
            text/plain: >
              [ "2015-09-25T15:13:48.343Z", "2015-09-11T11:11:22.692Z", "2015-09-11T10:47:21.241Z" ]
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/groups/{group_id}/:
    get:
      description: Get the group with all applications and all transitive child groups.
      summary: V2GroupsByGroupId
      tags:
      - groups
      operationId: V2GroupsByGroupId
      produces:
      - application/json
      parameters:
      - name: group_id
        in: path
        required: true
        type: string
        description: ''
      - name: embed
        in: query
        required: false
        enum:
        - group.groups
        - group.apps
        - group.apps.tasks
        - group.apps.count
        - group.apps.deployments
        - group.apps.lastTaskFailure
        - group.apps.failures
        - group.apps.taskStats
        type: string
        description: >-
          Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. Unknown embed parameters are ignored. If you omit this parameter, it defaults to <code>group.groups</code>, <code>group.apps</code>

          - <code>group.groups</code> embed all child groups of each group<br/>

          - <code>group.apps</code> embed all apps of each group<br/>

          - <code>group.apps.tasks</code> embed all tasks of each application<br/>

          - <code>group.apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/>

          - <code>group.apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.

          - <code>group.apps.readiness</code> embed all readiness check results

          - <code>group.apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

          - <code>group.apps.taskStats</code> exposes task statistics in the JSON.
      responses:
        200:
          description: The group with all transitive dependencies.
          schema:
            $ref: '#/definitions/GroupInfo'
          examples:
            application/json:
              id: /
              apps: []
              groups:
              - id: /tools
                apps:
                - id: /tools/oauth-server
                  instances: 2
                  cpus: 1
                  mem: 1024
                  disk: 0
                  constraints:
                  - - hostname
                    - UNIQUE
                  uris: []
                  ports:
                  - 1980
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.1499999999999999
                  maxLaunchDelaySeconds: 3600
                  container:
                    type: DOCKER
                    volumes: []
                    docker:
                      image: docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774
                      network: HOST
                      privileged: false
                      parameters: []
                      forcePullImage: false
                  healthChecks:
                  - path: /
                    protocol: HTTP
                    portIndex: 0
                    gracePeriodSeconds: 300
                    intervalSeconds: 20
                    timeoutSeconds: 20
                    maxConsecutiveFailures: 3
                    ignoreHttp1xx: false
                  dependencies: []
                  upgradeStrategy:
                    minimumHealthCapacity: 0.5
                    maximumOverCapacity: 0
                  version: 2015-09-28T19:47:37.6810000Z
                  versionInfo:
                    lastScalingAt: 2015-09-28T19:47:37.6810000Z
                    lastConfigChangeAt: 2015-09-28T19:47:37.6810000Z
                - id: /tools/datadog-agent
                  instances: 5
                  cpus: 1
                  mem: 512
                  disk: 0
                  executor: ''
                  constraints:
                  - - hostname
                    - UNIQUE
                  uris: []
                  ports:
                  - 10018
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.1499999999999999
                  maxLaunchDelaySeconds: 3600
                  container:
                    type: DOCKER
                    volumes:
                    - containerPath: /var/run/docker.sock
                      hostPath: /var/run/docker.sock
                      mode: RW
                    - containerPath: /host/proc/mounts
                      hostPath: /proc/mounts
                      mode: RO
                    - containerPath: /host/sys/fs/cgroup
                      hostPath: /sys/fs/cgroup/
                      mode: RO
                    docker:
                      image: datadog/docker-dd-agent:latest
                      network: HOST
                      privileged: true
                      parameters: []
                      forcePullImage: false
                  healthChecks: []
                  dependencies: []
                  upgradeStrategy:
                    minimumHealthCapacity: 0.5
                    maximumOverCapacity: 0
                  version: 2015-08-26T22:33:24.2250000Z
                  versionInfo:
                    lastScalingAt: 2015-08-26T22:33:24.2250000Z
                    lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
                groups:
                - id: /tools/log
                  apps: []
                  groups: []
                  dependencies: []
                  version: 2015-09-17T10:38:20.8750000Z
                - id: /tools/docker
                  apps:
                  - id: /tools/docker/registry
                    instances: 1
                    cpus: 0.5
                    mem: 4096
                    disk: 0
                    executor: ''
                    constraints: []
                    uris: []
                    ports:
                    - 5000
                    requirePorts: false
                    backoffSeconds: 1
                    backoffFactor: 1.1499999999999999
                    maxLaunchDelaySeconds: 3600
                    container:
                      type: DOCKER
                      volumes:
                      - containerPath: /docker_storage
                        hostPath: /hdd/tools/docker/registry
                        mode: RW
                      docker:
                        image: registry
                        network: BRIDGE
                        portMappings:
                        - containerPort: 5000
                          hostPort: 0
                          servicePort: 5000
                          protocol: tcp
                        privileged: false
                        parameters: []
                        forcePullImage: false
                    healthChecks: []
                    dependencies: []
                    upgradeStrategy:
                      minimumHealthCapacity: 1
                      maximumOverCapacity: 1
                    version: 2015-08-19T21:26:47.6160000Z
                    versionInfo:
                      lastScalingAt: 2015-08-19T21:26:47.6160000Z
                      lastConfigChangeAt: 2015-08-19T21:00:54.6210000Z
                  groups: []
                  dependencies: []
                  version: 2015-09-17T10:38:20.8750000Z
                dependencies: []
                version: 2015-09-17T10:38:20.8750000Z
              dependencies: []
              version: 2015-09-17T10:38:20.8750000Z
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: >-
        Change parameters of a deployed application group. The new group parameters get applied.


        * Changes to application parameters will result in a restart of this application.

        * A new application added to the group will be started.

        * An existing application removed from the group will be stopped.


        If there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.

        This method allows 2 special modes for the update operation>


        * Provide only the `version` field in the group definition. This will rollback the group to that given version

        * Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.


        When one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed. The scaleBy value will not be applied.

        A deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices


        * Rollback to an existing older version

        * Update with a newer version of the group which does not have the problems of the old one.


        Since the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version.
      summary: V2GroupsByGroupId
      tags:
      - groups
      operationId: V2GroupsByGroupId3
      produces:
      - application/json
      parameters:
      - name: group_id
        in: path
        required: true
        type: string
        description: ''
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/Group'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The group definition provided in the body is not valid.
          schema: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
        422:
          description: The entity send can not be preocessed, since there are validation errors
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Create and start a new application group. Application groups can contain other application groups.
      summary: V2GroupsByGroupId
      tags:
      - groups
      operationId: V2GroupsByGroupId1
      produces:
      - application/json
      parameters:
      - name: group_id
        in: path
        required: true
        type: string
        description: ''
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/GroupUpdate'
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        400:
          description: The group definition provided in the body is not valid.
          schema: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already deployed group with this name
          schema: {}
        422:
          description: The entity send can not be preocessed, since there are validation errors
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version.
      summary: V2GroupsByGroupId
      tags:
      - groups
      operationId: V2GroupsByGroupId2
      produces:
      - application/json
      parameters:
      - name: group_id
        in: path
        required: true
        type: string
        description: ''
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: >
              {
                "deploymentId": "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43",
                "version": "2015-09-29T15:59:51.164Z"
              }
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/tasks/delete:
    post:
      description: Kill a list of running tasks.
      summary: V2TasksDelete
      tags:
      - tasks
      operationId: V2TasksDelete
      produces:
      - application/json
      parameters:
      - name: scale
        in: query
        required: true
        type: boolean
        description: If `scale=true` is specified, then the related application is scaled down by the number of killed tasks. Only possible if `wipe=false` or not specified.
      - name: wipe
        in: query
        required: true
        type: boolean
        description: If `wipe=true` is specified and the app uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed. Only possible if `scale=false` or not specified.
      - name: body
        in: body
        required: true
        description: ''
        schema:
          type: string
      - name: force
        in: query
        required: false
        default: false
        type: boolean
        description: >-
          Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.

          Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
      responses:
        200:
          description: A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.
          schema:
            type: string
          examples:
            text/plain: '{  "tasks": [    {      "id": "frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b",      "host": "srv4.example.com",      "ports": [        31292      ],      "startedAt": "2015-09-17T09:32:42.598Z",      "stagedAt": "2015-09-17T09:32:36.822Z",      "version": "2015-09-17T09:32:36.583Z",      "slaveId": "20150707-153709-201330860-5050-12052-S0",      "appId": "/frontend-foosball",      "state": "TASK_RUNNING",      "servicePorts": [        10019      ]    },    {      "id": "tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed",      "host": "srv2.example.com",      "ports": [        31721      ],      "startedAt": "2015-08-19T21:26:50.864Z",      "stagedAt": "2015-08-19T21:26:49.04Z",      "version": "2015-08-19T21:26:47.616Z",      "slaveId": "1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24",      "state": "TASK_RUNNING",      "appId": "/tools/docker/registry",      "servicePorts": [        5000      ]    }  ]}'
        400:
          description: There are unknown task ids, that can not be killed.
          schema: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        409:
          description: There is an already running deployment, that affects this application. To override this deployment, use the force=true flag
          schema: {}
      x-unitTests:
      - request:
          method: POST
          uri: /v2/tasks/delete?scale=false&wipe=false&force=false
          headers:
            Content-Type: application/json
          body: '{ "ids": [ "task1", "task2" ] }'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{  "tasks": [    {      "id": "frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b",      "host": "srv4.example.com",      "ports": [        31292      ],      "startedAt": "2015-09-17T09:32:42.598Z",      "stagedAt": "2015-09-17T09:32:36.822Z",      "version": "2015-09-17T09:32:36.583Z",      "slaveId": "20150707-153709-201330860-5050-12052-S0",      "appId": "/frontend-foosball",      "state": "TASK_RUNNING",      "servicePorts": [        10019      ]    },    {      "id": "tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed",      "host": "srv2.example.com",      "ports": [        31721      ],      "startedAt": "2015-08-19T21:26:50.864Z",      "stagedAt": "2015-08-19T21:26:49.04Z",      "version": "2015-08-19T21:26:47.616Z",      "slaveId": "1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24",      "state": "TASK_RUNNING",      "appId": "/tools/docker/registry",      "servicePorts": [        5000      ]    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2TasksDelete1
        x-testDescription: Kill a list of running tasks.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/tasks:
    get:
      description: List all tasks.
      summary: V2Tasks
      tags:
      - tasks
      operationId: V2Tasks
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        required: false
        type: string
        description: Filter the list of tasks by status. If status is not specified, tasks with any status will be included.
      - name: status[]
        in: query
        required: false
        type: array
        items:
          type: string
        description: ''
      responses:
        200:
          description: The list of all tasks disregarding their status, or a list of tasks matching the specified status filter.
          schema:
            $ref: '#/definitions/EnrichedTasksList'
          examples:
            application/json:
              tasks:
              - id: frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b
                host: srv4.example.com
                ports:
                - 31292
                startedAt: 2015-09-17T09:32:42.5980000Z
                stagedAt: 2015-09-17T09:32:36.8220000Z
                version: 2015-09-17T09:32:36.5830000Z
                slaveId: 20150707-153709-201330860-5050-12052-S0
                appId: /frontend-foosball
                state: TASK_RUNNING
                servicePorts:
                - 10019
              - id: tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed
                host: srv2.example.com
                ports:
                - 31721
                startedAt: 2015-08-19T21:26:50.8640000Z
                stagedAt: 2015-08-19T21:26:49.0400000Z
                version: 2015-08-19T21:26:47.6160000Z
                slaveId: 1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24
                state: TASK_RUNNING
                appId: /tools/docker/registry
                servicePorts:
                - 5000
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/tasks
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{  "tasks": [    {      "id": "frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b",      "host": "srv4.example.com",      "ports": [        31292      ],      "startedAt": "2015-09-17T09:32:42.598Z",      "stagedAt": "2015-09-17T09:32:36.822Z",      "version": "2015-09-17T09:32:36.583Z",      "slaveId": "20150707-153709-201330860-5050-12052-S0",      "appId": "/frontend-foosball",      "state": "TASK_RUNNING",      "servicePorts": [        10019      ]    },    {      "id": "tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed",      "host": "srv2.example.com",      "ports": [        31721      ],      "startedAt": "2015-08-19T21:26:50.864Z",      "stagedAt": "2015-08-19T21:26:49.04Z",      "version": "2015-08-19T21:26:47.616Z",      "slaveId": "1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24",      "state": "TASK_RUNNING",      "appId": "/tools/docker/registry",      "servicePorts": [        5000      ]    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Tasks1
        x-testDescription: List all tasks.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/events:
    get:
      description: >-
        Attach to the marathon event stream.

        To use this endpoint, the client has to accept the text/event-stream content type.

        Please note a request to this endpoint will not be closed by the server. If an event happens on the server side, this event will be propagated to the client immediately. See [Server Sent Events](http://www.w3schools.com/html/html5_serversentevents.asp) for a more detailed explanation.

        Note for ApiConsole&#58; this function will not yield the expected result from inside ApiConsole.
      summary: V2Events
      tags:
      - events
      operationId: V2Events
      produces:
      - application/json
      parameters:
      - name: event_type
        in: query
        required: false
        type: string
        description: Specify subscribed event types. You can specify this parameter multiple times with different values.
      responses:
        200:
          description: the list of all tasks waiting to be scheduled.
          schema:
            type: object
          examples: {}
        405:
          description: A request has been made without the correct Accept Header
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/info:
    get:
      description: Get info about the Marathon Instance
      summary: V2Info
      tags:
      - info
      operationId: V2Info
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: General configuration and runtime information about this Marathon instance.
          schema:
            $ref: '#/definitions/MarathonInfo'
          examples:
            application/json:
              name: marathon
              version: 1.5.0-SNAPSHOT
              buildref: unknown
              elected: true
              leader: localhost:8080
              frameworkId: 96d7da70-b731-4cfb-96a7-0ee877af615d-0000
              marathon_config:
                access_control_allow_origin:
                - '*'
                checkpoint: true
                decline_offer_duration: 120000
                default_network_name: container-network
                env_vars_prefix: APP
                executor: //cmd
                failover_timeout: 604800
                features: []
                framework_name: marathon
                ha: true
                hostname: localhost
                launch_token: 100
                launch_token_refresh_interval: 30000
                leader_proxy_connection_timeout_ms: 5000
                leader_proxy_read_timeout_ms: 10000
                local_port_max: 20000
                local_port_min: 10000
                master: zk://localhost:2181/mesos
                max_instances_per_offer: 5
                mesos_bridge_name: mesos-bridge
                mesos_heartbeat_failure_threshold: 5
                mesos_heartbeat_interval: 15000
                mesos_leader_ui_url: http://localhost:5050/
                mesos_role: slave_public
                mesos_user: nobody
                min_revive_offers_interval: 5000
                offer_matching_timeout: 3000
                on_elected_prepare_timeout: 180000
                reconciliation_initial_delay: 15000
                reconciliation_interval: 600000
                revive_offers_for_new_apps: true
                revive_offers_repetitions: 3
                scale_apps_initial_delay: 15000
                scale_apps_interval: 300000
                store_cache: true
                task_launch_confirm_timeout: 300000
                task_launch_timeout: 300000
                task_lost_expunge_initial_delay: 300000
                task_lost_expunge_interval: 30000
                task_reservation_timeout: 20000
                webui_url: http://localhost:8080
              zookeeper_config:
                zk: zk://localhost:2181/marathon
                zk_compression: true
                zk_compression_threshold: 65536
                zk_connection_timeout: 10000
                zk_max_node_size: 1024000
                zk_max_versions: 50
                zk_session_timeout: 10000
                zk_timeout: 10000
              http_config:
                http_port: 8080
                https_port: 8443
      x-unitTests:
      - request:
          method: GET
          uri: /v2/info
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{  "name": "marathon",  "version": "1.5.0-SNAPSHOT",  "buildref": "unknown",  "elected": true,  "leader": "localhost:8080",  "frameworkId": "96d7da70-b731-4cfb-96a7-0ee877af615d-0000",  "marathon_config": {    "access_control_allow_origin": [      "*"    ],    "checkpoint": true,    "decline_offer_duration": 120000,    "default_network_name": "container-network",    "env_vars_prefix": "APP",    "executor": "//cmd",    "failover_timeout": 604800,    "features": [],    "framework_name": "marathon",    "ha": true,    "hostname": "localhost",    "launch_token": 100,    "launch_token_refresh_interval": 30000,    "leader_proxy_connection_timeout_ms": 5000,    "leader_proxy_read_timeout_ms": 10000,    "local_port_max": 20000,    "local_port_min": 10000,    "master": "zk://localhost:2181/mesos",    "max_instances_per_offer": 5,    "mesos_bridge_name": "mesos-bridge",    "mesos_heartbeat_failure_threshold": 5,    "mesos_heartbeat_interval": 15000,    "mesos_leader_ui_url": "http://localhost:5050/",    "mesos_role": "slave_public",    "mesos_user": "nobody",    "min_revive_offers_interval": 5000,    "offer_matching_timeout": 3000,    "on_elected_prepare_timeout": 180000,    "reconciliation_initial_delay": 15000,    "reconciliation_interval": 600000,    "revive_offers_for_new_apps": true,    "revive_offers_repetitions": 3,    "scale_apps_initial_delay": 15000,    "scale_apps_interval": 300000,    "store_cache": true,    "task_launch_confirm_timeout": 300000,    "task_launch_timeout": 300000,    "task_lost_expunge_initial_delay": 300000,    "task_lost_expunge_interval": 30000,    "task_reservation_timeout": 20000,    "webui_url": "http://localhost:8080"  },  "zookeeper_config": {    "zk": "zk://localhost:2181/marathon",    "zk_compression": true,    "zk_compression_threshold": 65536,    "zk_connection_timeout": 10000,    "zk_max_node_size": 1024000,    "zk_max_versions": 50,    "zk_session_timeout": 10000,    "zk_timeout": 10000  },  "http_config": {    "http_port": 8080,    "https_port": 8443  }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Info1
        x-testDescription: Get info about the Marathon Instance
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/leader:
    get:
      description: Returns the current leader.
      summary: V2Leader
      tags:
      - leader
      operationId: V2Leader
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: The host and port of the current leading master.
          schema:
            $ref: '#/definitions/LeaderInfo'
          examples:
            application/json:
              leader: marathon.globalcorp.com:8080
        404:
          description: If there is no current leader.
          schema:
            $ref: '#/definitions/Message'
          examples:
            application/json:
              message: There is no leader
      x-unitTests:
      - request:
          method: GET
          uri: /v2/leader
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{    "leader": "marathon.globalcorp.com:8080"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Leader1
        x-testDescription: Returns the current leader.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: >
        Causes the current leader to abdicate, triggering a new election.


        Abdicating a Marathon instance causes this instance to exit.

        The underlying system is responsible for restarting this instance.


        Every abdication triggers a new leader election.

        The next elected leader will read the state from the persistent store and continue the work from the previous leader.


        It is possible to use this endpoint to trigger a backup or restore operation for the persistent data store.

        The requested operation will be perfomed by the next leading Marathon master.

        Currently two providers are allowed:

        - File provider: file:///path/to/file

        - S3 provider (experimental): s3://bucket-name/key-in-bucket?access_key=xxx&secret_key=xxx&region=eu-central-1
          Please note: access_key and secret_key are optional.
          If not provided, the [AWS default credentials provider chain](http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html) is used to look up aws credentials.
      summary: V2Leader
      tags:
      - leader
      operationId: V2Leader1
      produces:
      - application/json
      parameters:
      - name: backup?
        in: query
        required: false
        type: string
        description: URI to backup zk state.
      - name: restore?
        in: query
        required: false
        type: string
        description: URI to restore zk state.
      responses:
        200:
          description: The abdication message from the current leader.
          schema:
            type: string
          examples:
            text/plain: '{    "message": "Leadership abdicated"}'
        404:
          description: If there is no current leader.
          schema: {}
      x-unitTests:
      - request:
          method: DELETE
          uri: /v2/leader?backup?=file:///var/backup/marathon/backup&restore?=file:///var/backup/marathon/backup
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{    "message": "Leadership abdicated"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Leader11
        x-testDescription: >
          Causes the current leader to abdicate, triggering a new election.


          Abdicating a Marathon instance causes this instance to exit.

          The underlying system is responsible for restarting this instance.


          Every abdication triggers a new leader election.

          The next elected leader will read the state from the persistent store and continue the work from the previous leader.


          It is possible to use this endpoint to trigger a backup or restore operation for the persistent data store.

          The requested operation will be perfomed by the next leading Marathon master.

          Currently two providers are allowed:

          - File provider: file:///path/to/file

          - S3 provider (experimental): s3://bucket-name/key-in-bucket?access_key=xxx&secret_key=xxx&region=eu-central-1
            Please note: access_key and secret_key are optional.
            If not provided, the [AWS default credentials provider chain](http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html) is used to look up aws credentials.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/plugins/{plugin_id}/{path}:
    get:
      description: Get request is handled by the plugin.
      summary: V2PluginsByPluginIdAndPath
      tags:
      - plugins
      operationId: V2PluginsByPluginIdAndPath
      produces:
      - application/json
      parameters:
      - name: plugin_id
        in: path
        required: true
        type: string
        description: ''
      - name: path
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: Put request is handled by the plugin.
      summary: V2PluginsByPluginIdAndPath
      tags:
      - plugins
      operationId: V2PluginsByPluginIdAndPath3
      produces:
      - application/json
      parameters:
      - name: plugin_id
        in: path
        required: true
        type: string
        description: ''
      - name: path
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Post request is handled by the plugin.
      summary: V2PluginsByPluginIdAndPath
      tags:
      - plugins
      operationId: V2PluginsByPluginIdAndPath1
      produces:
      - application/json
      parameters:
      - name: plugin_id
        in: path
        required: true
        type: string
        description: ''
      - name: path
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Delete request is handled by the plugin.
      summary: V2PluginsByPluginIdAndPath
      tags:
      - plugins
      operationId: V2PluginsByPluginIdAndPath2
      produces:
      - application/json
      parameters:
      - name: plugin_id
        in: path
        required: true
        type: string
        description: ''
      - name: path
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/plugins:
    get:
      description: Returns the list of all loaded plugins
      summary: V2Plugins
      tags:
      - plugins
      operationId: V2Plugins
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: The list of all loaded plugins
          schema:
            type: string
          examples:
            text/plain: '{    "plugins": [        {            "id": "webjar",            "implementation": "mesosphere.marathon.example.plugin.http.WebJarHandler",            "info": {                "version": "1.2.3",                "array": [ 1, 2, 3, 4, 5, 6 ],                "test": true            },            "plugin": "mesosphere.marathon.plugin.http.HttpRequestHandler",            "tags": [ "webjar", "test" ]        }    ]}'
      x-unitTests:
      - request:
          method: GET
          uri: /v2/plugins
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{    "plugins": [        {            "id": "webjar",            "implementation": "mesosphere.marathon.example.plugin.http.WebJarHandler",            "info": {                "version": "1.2.3",                "array": [ 1, 2, 3, 4, 5, 6 ],                "test": true            },            "plugin": "mesosphere.marathon.plugin.http.HttpRequestHandler",            "tags": [ "webjar", "test" ]        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Plugins1
        x-testDescription: Returns the list of all loaded plugins
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/queue/:
    get:
      description: >
        List all the tasks queued up or waiting to be scheduled.

        This is mainly used for troubleshooting and occurs when scaling

        changes are requested and the volume of scaling changes out paces the ability to schedule those tasks.

        In addition to the application in the queue, you see also the task count that needs to be started.

        If the task has a rate limit, then a delay to the start gets applied.

        You can see this delay for every application with the seconds to wait before the next launch will be tried.
      summary: V2Queue
      tags:
      - queue
      operationId: V2Queue
      produces:
      - application/json
      parameters:
      - name: embed
        in: query
        required: false
        type: string
        description: >-
          Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values.

          - <code>lastUnusedOffers</code> embed all unused offers for every application.
      responses:
        200:
          description: >
            The list of all tasks waiting to be scheduled.
          schema:
            $ref: '#/definitions/Queue'
          examples:
            application/json:
              queue:
              - app:
                  id: /tools/datadog-agent
                  instances: 5
                  cpus: 1
                  mem: 512
                  disk: 0
                  constraints:
                  - - hostname
                    - UNIQUE
                  ports:
                  - 10018
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.1499999999999999
                  maxLaunchDelaySeconds: 3600
                  container:
                    type: DOCKER
                    docker:
                      image: datadog/docker-dd-agent:latest
                      network: HOST
                      privileged: true
                      forcePullImage: false
                  upgradeStrategy:
                    minimumHealthCapacity: 0.5
                    maximumOverCapacity: 0
                  version: 2015-08-26T22:33:24.2250000Z
                  versionInfo:
                    lastScalingAt: 2015-08-26T22:33:24.2250000Z
                    lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
                count: 1
                delay:
                  timeLeftSeconds: 0
                  overdue: true
                since: 2016-02-28T16:41:41.0900000Z
                processedOffersSummary:
                  processedOffersCount: 123
                  unusedOffersCount: 0
              - app:
                  id: /foo
                  user: root
                  env:
                    MASTER: zk://172.16.0.12:2181,172.16.0.13:2181,172.16.0.14:2181/mesos
                  instances: 1
                  cpus: 0.5
                  mem: 128
                  disk: 0
                  executor: //cmd
                  constraints:
                  - - hostname
                    - UNIQUE
                  uris:
                  - http://www.mesosphere.io/index.html
                  ports:
                  - 10010
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.1499999999999999
                  maxLaunchDelaySeconds: 3600
                  container:
                    type: DOCKER
                    docker:
                      image: thomasr/dispatch
                      network: HOST
                      privileged: false
                      forcePullImage: false
                  upgradeStrategy:
                    minimumHealthCapacity: 1
                    maximumOverCapacity: 1
                  version: 2015-09-30T09:09:17.6140000Z
                  versionInfo:
                    lastScalingAt: 2015-09-30T09:09:17.6140000Z
                    lastConfigChangeAt: 2015-09-30T09:09:17.6140000Z
                count: 2
                delay:
                  timeLeftSeconds: 0
                  overdue: true
                since: 2016-02-28T16:41:41.0900000Z
                processedOffersSummary:
                  processedOffersCount: 123
                  unusedOffersCount: 123
                  lastUnusedOfferAt: 2016-02-28T16:41:41.0900000Z
                  lastUsedOfferAt: 2016-02-28T16:41:41.0900000Z
                  rejectSummaryLastOffers:
                  - reason: UnfulfilledRole
                    declined: 0
                    processed: 123
                  - reason: UnfulfilledConstraint
                    declined: 0
                    processed: 123
                  - reason: NoCorrespondingReservationFound
                    declined: 0
                    processed: 123
                  - reason: InsufficientCpus
                    declined: 75
                    processed: 123
                  - reason: InsufficientMemory
                    declined: 15
                    processed: 48
                  - reason: InsufficientDisk
                    declined: 10
                    processed: 33
                  - reason: InsufficientGpus
                    declined: 0
                    processed: 23
                  - reason: InsufficientGpus
                    declined: 0
                    processed: 23
                  rejectSummaryLaunchAttempt:
                  - reason: UnfulfilledRole
                    declined: 0
                    processed: 246
                  - reason: UnfulfilledConstraint
                    declined: 0
                    processed: 246
                  - reason: NoCorrespondingReservationFound
                    declined: 0
                    processed: 246
                  - reason: InsufficientCpus
                    declined: 150
                    processed: 246
                  - reason: InsufficientMemory
                    declined: 30
                    processed: 96
                  - reason: InsufficientDisk
                    declined: 20
                    processed: 66
                  - reason: InsufficientGpus
                    declined: 0
                    processed: 46
                  - reason: InsufficientGpus
                    declined: 0
                    processed: 46
                lastUnusedOffers:
                - offer:
                    id: offer_123
                    agentId: slave_123
                    hostname: 1.2.3.4
                    resources:
                    - name: cpus
                      scalar: 23
                      ranges:
                      - begin: 1
                        end: 5
                      set:
                      - a
                      - b
                      role: '*'
                    attributes:
                    - name: foo
                      scalar: 23
                      ranges:
                      - begin: 1
                        end: 5
                      set:
                      - a
                      - b
                  timestamp: 2016-02-28T16:41:41.0900000Z
                  reason:
                  - InsufficientMemory
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /v2/queue/
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: '{  "queue": [    {      "app": {        "id": "/tools/datadog-agent",        "instances": 5,        "cpus": 1.0,        "mem": 512.0,        "disk": 0.0,        "constraints": [          [            "hostname",            "UNIQUE"          ]        ],        "ports": [          10018        ],        "requirePorts": false,        "backoffSeconds": 1,        "backoffFactor": 1.15,        "maxLaunchDelaySeconds": 3600,        "container": {          "type": "DOCKER",          "docker": {            "image": "datadog/docker-dd-agent:latest",            "network": "HOST",            "privileged": true,            "forcePullImage": false          }        },        "upgradeStrategy": {          "minimumHealthCapacity": 0.5,          "maximumOverCapacity": 0.0        },        "version": "2015-08-26T22:33:24.225Z",        "versionInfo": {          "lastScalingAt": "2015-08-26T22:33:24.225Z",          "lastConfigChangeAt": "2015-05-19T13:59:18.899Z"        }      },      "count": 1,      "delay": {        "timeLeftSeconds": 0,        "overdue": true      },      "since": "2016-02-28T16:41:41.09Z",      "processedOffersSummary": {        "processedOffersCount": 123,        "unusedOffersCount": 0      }    },    {      "app": {        "id": "/foo",        "user": "root",        "env": {          "MASTER": "zk://172.16.0.12:2181,172.16.0.13:2181,172.16.0.14:2181/mesos"        },        "instances": 1,        "cpus": 0.5,        "mem": 128.0,        "disk": 0.0,        "executor": "//cmd",        "constraints": [          [            "hostname",            "UNIQUE"          ]        ],        "uris": [          "http://www.mesosphere.io/index.html"        ],        "ports": [          10010        ],        "requirePorts": false,        "backoffSeconds": 1,        "backoffFactor": 1.15,        "maxLaunchDelaySeconds": 3600,        "container": {          "type": "DOCKER",          "docker": {            "image": "thomasr/dispatch",            "network": "HOST",            "privileged": false,            "forcePullImage": false          }        },        "upgradeStrategy": {          "minimumHealthCapacity": 1.0,          "maximumOverCapacity": 1.0        },        "version": "2015-09-30T09:09:17.614Z",        "versionInfo": {          "lastScalingAt": "2015-09-30T09:09:17.614Z",          "lastConfigChangeAt": "2015-09-30T09:09:17.614Z"        }      },      "count": 2,      "delay": {        "timeLeftSeconds": 0,        "overdue": true      },      "since": "2016-02-28T16:41:41.09Z",      "processedOffersSummary": {        "processedOffersCount": 123,        "unusedOffersCount": 123,        "lastUnusedOfferAt": "2016-02-28T16:41:41.09Z",        "lastUsedOfferAt": "2016-02-28T16:41:41.09Z",        "rejectSummaryLastOffers": [          {            "reason": "UnfulfilledRole",            "declined": 0,            "processed": 123          },          {            "reason": "UnfulfilledConstraint",            "declined": 0,            "processed": 123          },          {            "reason": "NoCorrespondingReservationFound",            "declined": 0,            "processed": 123          },          {            "reason": "InsufficientCpus",            "declined": 75,            "processed": 123          },          {            "reason": "InsufficientMemory",            "declined": 15,            "processed": 48          },          {            "reason": "InsufficientDisk",            "declined": 10,            "processed": 33          },          {            "reason": "InsufficientGpus",            "declined": 0,            "processed": 23          },          {            "reason": "InsufficientGpus",            "declined": 0,            "processed": 23          }        ],        "rejectSummaryLaunchAttempt": [          {            "reason": "UnfulfilledRole",            "declined": 0,            "processed": 246          },          {            "reason": "UnfulfilledConstraint",            "declined": 0,            "processed": 246          },          {            "reason": "NoCorrespondingReservationFound",            "declined": 0,            "processed": 246          },          {            "reason": "InsufficientCpus",            "declined": 150,            "processed": 246          },          {            "reason": "InsufficientMemory",            "declined": 30,            "processed": 96          },          {            "reason": "InsufficientDisk",            "declined": 20,            "processed": 66          },          {            "reason": "InsufficientGpus",            "declined": 0,            "processed": 46          },          {            "reason": "InsufficientGpus",            "declined": 0,            "processed": 46          }        ]      },      "lastUnusedOffers": [        {          "offer": {            "id": "offer_123",            "agentId": "slave_123",            "hostname": "1.2.3.4",            "resources": [              {                "name": "cpus",                "scalar": 23,                "ranges": [                  {                    "begin": 1,                    "end": 5                  }                ],                "set": [                  "a",                  "b"                ],                "role": "*"              }            ],            "attributes": [              {                "name": "foo",                "scalar": 23,                "ranges": [                  {                    "begin": 1,                    "end": 5                  }                ],                "set": [                  "a",                  "b"                ]              }            ]          },          "timestamp": "2016-02-28T16:41:41.09Z",          "reason": [            "InsufficientMemory"          ]        }      ]    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: V2Queue1
        x-testDescription: >
          List all the tasks queued up or waiting to be scheduled.

          This is mainly used for troubleshooting and occurs when scaling

          changes are requested and the volume of scaling changes out paces the ability to schedule those tasks.

          In addition to the application in the queue, you see also the task count that needs to be started.

          If the task has a rate limit, then a delay to the start gets applied.

          You can see this delay for every application with the seconds to wait before the next launch will be tried.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/queue/{app_id}/delay:
    delete:
      description: >
        If an application fails too often in a specified amount of time (according to the application definition),

        the task launch will be delayed.

        This delay can be removed by calling this endpoint.

        The effect is, that the tasks of this application will be launched immediately.
      summary: V2QueueDelayByAppId
      tags:
      - queue
      operationId: V2QueueDelayByAppId
      produces:
      - application/json
      parameters:
      - name: app_id
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: the delay is reset and no body is returned
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        404:
          description: there is no delay for the given application with id `app_id`
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /ping:
    get:
      description: Ping this Marathon instance.
      summary: Ping
      tags:
      - ping
      operationId: Ping
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Every ping is answered with a pong.
          schema:
            type: string
          examples:
            text/plain: pong
      x-unitTests:
      - request:
          method: GET
          uri: /ping
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: pong
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Ping1
        x-testDescription: Ping this Marathon instance.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /metrics:
    get:
      description: Get metrics data from this Marathon instance
      summary: Metrics
      tags:
      - metrics
      operationId: Metrics
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: All aggregated runtime metrics for this Marathon instance.
          schema:
            $ref: '#/definitions/Metrics'
          examples: {}
      x-unitTests:
      - request:
          method: GET
          uri: /metrics
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Metrics1
        x-testDescription: Get metrics data from this Marathon instance
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /logging:
    get:
      description: Get all configured loggers
      summary: Logging
      tags:
      - logging
      operationId: Logging
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: All loggers in the system
          schema:
            type: object
            additionalProperties:
              type: string
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
      x-unitTests:
      - request:
          method: GET
          uri: /logging
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Logging1
        x-testDescription: Get all configured loggers
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Update a specific logger level
      summary: Logging
      tags:
      - logging
      operationId: Logging1
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/LoggerChange'
      responses:
        200:
          description: logger changed to the given logging level
          schema:
            $ref: '#/definitions/LoggerChange'
          examples: {}
        401:
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          schema: {}
        403:
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          schema: {}
        422:
          description: request not understood
          schema: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  Error:
    title: Error
    example:
      message: App '/not_existent' does not exist
    type: object
    properties:
      message:
        description: ''
        type: string
      details:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
    required:
    - message
  ErrorDetail:
    title: ErrorDetail
    type: object
    properties:
      message:
        description: ''
        type: string
      errors:
        description: ''
        type: array
        items:
          type: string
  ErrorError:
    title: Error_Error
    example:
      message: Task 'not-existing' does not exist
    type: object
    properties:
      message:
        description: ''
        type: string
      details:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
    required:
    - message
  App:
    title: App
    example:
      id: /foo
      instances: 2
    type: object
    properties:
      id:
        description: ''
        type: string
      acceptedResourceRoles:
        description: >-
          A list of resource roles.

          Marathon considers only resource offers with roles in this list for

          launching tasks of this app. If you do not specify this,

          Marathon considers all resource offers with roles that have been

          configured by the `--default_accepted_resource_roles` command line flag.

          If no `--default_accepted_resource_roles` was given on startup,

          Marathon considers all resource offers. To register Marathon for a role,

          you need to specify the `--mesos_role` command line flag on startup.

          If you want to assign all resources of a slave to a role,

          you can use the `--default_role` argument when starting up the slave.

          If you need a more fine-grained configuration, you can use the

          `--resources` argument to specify resource shares per role.

          See [the Mesos attribute and resources documentation](http://mesos.apache.org/documentation/latest/attributes-resources/) for details
        type: array
        items:
          type: string
      args:
        description: >-
          An array of strings that represents an alternative mode of specifying the

          command to run. This was motivated by safe usage of containerizer features

          like a custom Docker ENTRYPOINT. This args field may be used in place of

          cmd even when using the default command executor.

          This change mirrors API and semantics changes in the Mesos CommandInfo

          protobuf message starting with version `0.20.0`.

          Either `cmd` or `args` must be supplied.

          It is invalid to supply both `cmd` and `args` in the same app.
        type: array
        items:
          type: string
      backoffFactor:
        description: >-
          Configures exponential backoff behavior when launching potentially sick

          apps. This prevents sandboxes associated with consecutively failing tasks

          from filling up the hard disk on Mesos slaves.

          The backoff period is multiplied by the factor for each consecutive

          failure until it reaches maxLaunchDelaySeconds.

          This applies also to tasks that are killed due to failing too

          many health checks.
        example: 1.1499999999999999
        type: number
        default: 1.1499999999999999
        format: double
      backoffSeconds:
        description: >-
          Configures exponential backoff behavior when launching potentially sick

          apps. This prevents sandboxes associated with consecutively failing tasks

          from filling up the hard disk on Mesos slaves.

          The backoff period is multiplied by the factor for each consecutive

          failure until it reaches maxLaunchDelaySeconds.

          This applies also to tasks that are killed due to failing too

          many health checks.
        example: 1
        type: integer
        default: 1
        format: int32
      cmd:
        description: >-
          The command that is executed.  This value is wrapped by Mesos via

          `/bin/sh -c ${app.cmd}`.

          Either `cmd` or `args` must be supplied.

          It is invalid to supply both `cmd` and `args` in the same app.
        type: string
      constraints:
        description: ''
        type: array
        items:
          type: string
      container:
        $ref: '#/definitions/Container'
      cpus:
        description: The number of CPU shares this application needs per instance. This number does not have to be integer, but can be a fraction.",
        example: 1
        type: number
        default: 1
        format: double
      dependencies:
        description: >-
          A list of services upon which this application depends

          An order is derived from the dependencies for performing start/stop and

          upgrade of the application. For example, an application /a relies on the

          services /b which itself relies on /c. To start all 3 applications, first

          /c is started than /b than /a.
        type: array
        items:
          type: string
      disk:
        description: >-
          How much disk space is needed for this application.

          This number does not have to be an integer, but can be a fraction.
        example: 0
        type: number
        default: 0
        format: double
      env:
        description: ''
        type: object
        additionalProperties:
          type: object
      executor:
        description: >-
          The executor to use to launch this application.

          Different executors are available.

          The simplest one (and the one configured by default if none is given) is `//cmd`,

          which takes the cmd and executes that on the shell level.
        type: string
      fetch:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Artifact'
      healthChecks:
        description: ''
        type: array
        items:
          $ref: '#/definitions/AppHealthCheck'
      instances:
        description: >-
          The number of instances of this application to start.

          Please note: this number can be changed any time as needed to

          scale the application.
        example: 1
        type: integer
        default: 1
        format: int32
      labels:
        description: ''
        type: object
        additionalProperties:
          type: string
      maxLaunchDelaySeconds:
        description: >-
          Configures exponential backoff behavior when launching potentially sick

          apps. This prevents sandboxes associated with consecutively failing tasks

          from filling up the hard disk on Mesos slaves.

          The backoff period is multiplied by the factor for each consecutive

          failure until it reaches maxLaunchDelaySeconds.

          This applies also to tasks that are killed due to failing too many health checks.
        example: 3600
        type: integer
        default: 3600
        format: int32
      mem:
        description: The amount of memory in MB that is needed for the application per instance.
        example: 128
        type: number
        default: 128
        format: double
      gpus:
        description: The amount of GPU cores that is needed for the application per instance.
        example: 0
        type: integer
        default: 0
        format: int32
      ipAddress:
        $ref: '#/definitions/IpAddress'
      networks:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Network'
      ports:
        description: >-
          An array of required port resources on the agent host.

          The number of items in the array determines how many dynamic ports are

          allocated for every task.

          For every port that is zero, a globally unique (cluster-wide) port is

          assigned and provided as part of the app definition to be used in load

          balancing definitions.
        type: array
        items:
          type: integer
          format: int32
      portDefinitions:
        description: ''
        type: array
        items:
          $ref: '#/definitions/PortDefinition'
      readinessChecks:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ReadinessCheck'
      residency:
        $ref: '#/definitions/AppResidency'
      requirePorts:
        description: >-
          Applies only for host networking.

          Normally, the host ports of your tasks are automatically assigned.

          This corresponds to the requirePorts value false which is the default.

          If you need more control and want to specify your host ports in advance,

          you can set requirePorts to true. This way the ports you have specified

          are used as host ports. That also means that Marathon can schedule the

          associated tasks only on hosts that have the specified ports available.
        example: false
        type: boolean
        default: false
      secrets:
        description: ''
        type: object
        additionalProperties:
          $ref: '#/definitions/SecretDef'
      taskKillGracePeriodSeconds:
        description: >-
          Configures the number of seconds between escalating from SIGTERM to

          SIGKILL when signalling tasks to terminate.

          Using this grace period, tasks should perform orderly shut down

          immediately upon receiving SIGTERM.
        type: integer
        format: int32
      upgradeStrategy:
        $ref: '#/definitions/UpgradeStrategy'
      uris:
        description: >-
          URIs defined here are resolved, before the application gets started.

          If the application has external dependencies, they should be defined here.
        type: array
        items:
          type: string
      user:
        description: The user to use to run the tasks on the agent.
        type: string
      version:
        description: The version of this definition
        type: string
        format: date-time
      versionInfo:
        $ref: '#/definitions/VersionInfo'
      killSelection:
        description: ''
        example: YOUNGEST_FIRST
        type: string
        default: YOUNGEST_FIRST
      unreachableStrategy:
        description: ''
        type: object
      tty:
        description: Describes if (pseudo) TTY sould be allocated for the process of this container.
        type: boolean
    required:
    - id
  Container:
    title: Container
    type: object
    properties:
      type:
        $ref: '#/definitions/TypeEnum'
        example: DOCKER
      docker:
        $ref: '#/definitions/DockerContainer'
      appc:
        $ref: '#/definitions/AppCContainer'
      volumes:
        description: ''
        type: array
        items:
          type: object
      portMappings:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ContainerPortMapping'
    required:
    - type
  TypeEnum:
    title: typeEnum
    example: MESOS
    type: string
    enum:
    - MESOS
    - DOCKER
  DockerContainer:
    title: DockerContainer
    type: object
    properties:
      image:
        description: The name of the docker image to use
        type: string
      credential:
        $ref: '#/definitions/DockerCredentials'
      pullConfig:
        $ref: '#/definitions/DockerPullConfig'
      forcePullImage:
        description: >-
          The container will be pulled, regardless if it is already available on

          the local system.
        example: false
        type: boolean
        default: false
      network:
        $ref: '#/definitions/NetworkEnum'
      parameters:
        description: ''
        type: array
        items:
          $ref: '#/definitions/DockerParameter'
      portMappings:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ContainerPortMapping'
      privileged:
        description: >-
          Run this docker image in privileged mode

          Please note: this property is supported only with the docker containerizer, not the Mesos containerizer.
        example: false
        type: boolean
        default: false
    required:
    - image
  DockerCredentials:
    title: DockerCredentials
    description: Credential to authenticate with the docker registry
    type: object
    properties:
      principal:
        description: Principal to authenticate with the docker registry
        type: string
      secret:
        description: Secret to authenticate with the docker registry
        type: string
    required:
    - principal
  DockerPullConfig:
    title: DockerPullConfig
    description: >-
      Docker's config.json. It should be specifed only as a secret

      name into a secret store, and the corresponding value should be

      a stringified valid JSON object which can be found in

      `~/.docker/config.json`.
    type: object
    properties:
      secret:
        description: ''
        type: string
    required:
    - secret
  NetworkEnum:
    title: networkEnum
    example: BRIDGE
    type: string
    enum:
    - BRIDGE
    - HOST
    - NONE
    - USER
  DockerParameter:
    title: DockerParameter
    type: object
    properties:
      key:
        description: key of this parameter
        type: string
      value:
        description: value of this parameter
        type: string
    required:
    - key
    - value
  ContainerPortMapping:
    title: ContainerPortMapping
    type: object
    properties:
      containerPort:
        description: >-
          Refers to the port the application listens to inside of the

          container.

          It is optional and defaults to 0.

          For each containerPort with a value of 0 Marathon assigns the

          containerPort the same value as the assigned hostPort.

          This is especially useful for apps that advertise the port they

          are listening on to the outside world for P2P communication.

          Without containerPort: 0 they would erroneously advertise their

          private container port which is usually not the same as the

          externally visible host port.
        example: 0
        type: integer
        format: int32
      hostPort:
        description: >-
          Retains the traditional meaning in Marathon, which is a random

          port from the range included in the Mesos resource offer.

          The resulting host ports for each task are exposed via the task

          details in the REST API and the Marathon web UI.

          hostPort is optional.

          In BRIDGE mode it defaults to 0 if left unspecified.

          In USER mode an unspecified hostPort does not allocate a port

          from a Mesos offer.
        type: integer
        format: int32
      labels:
        description: This can be used to add metadata to be interpreted by external applications such as firewalls.
        type: object
        additionalProperties:
          type: string
      name:
        description: Name of the service hosted on this port. If provided, it must be unique over all port mappings.
        type: string
      protocol:
        description: ''
        example: tcp
        type: string
        default: tcp
      servicePort:
        description: >-
          Is a helper port intended for doing service discovery using a

          well-known port per service.

          The assigned servicePort value is not used/interpreted by

          Marathon itself but supposed to used by load balancer

          infrastructure.

          See Service Discovery Load Balancing doc page.

          The servicePort parameter is optional and defaults to 0.

          Like hostPort, If the value is 0, a random port will be assigned.

          If a servicePort value is assigned by Marathon then Marathon

          guarantees that its value is unique across the cluster.

          The values for random service ports are in the range

          [local_port_min, local_port_max] where local_port_min and

          local_port_max are command line options with default values of

          10000 and 20000, respectively.
        example: 0
        type: integer
        default: 0
        format: int32
      networkNames:
        description: >-
          List of the container networks associated with this mapping. If

          absent, then this mapping is associated with all defined container

          networks (for this application). A single item list is mandatory when

          `hostPort` is specified and multiple container networks are defined.
        type: array
        items:
          type: string
    required:
    - containerPort
  AppCContainer:
    title: AppCContainer
    type: object
    properties:
      image:
        description: The name of the AppC image to use
        type: string
      id:
        description: >-
          An image ID is a string of the format 'hash-value', where 'hash' is

          the hash algorithm used and 'value' is the hex-encoded digest.

          Currently the only permitted hash algorithm is sha512.
        type: string
      labels:
        description: "Optional labels. Suggested labels: 'version', 'os', 'arch'."
        type: object
        additionalProperties:
          type: string
      forcePullImage:
        description: >-
          The container will be pulled, regardless if it is already available

          on the local system
        example: false
        type: boolean
        default: false
    required:
    - image
  Artifact:
    title: Artifact
    example:
      uri: http://download.me/file.tgz
      extract: true
      executable: true
      cache: false
    type: object
    properties:
      uri:
        description: ''
        type: string
      extract:
        description: ''
        example: true
        type: boolean
        default: true
      executable:
        description: ''
        example: false
        type: boolean
        default: false
      cache:
        description: ''
        example: false
        type: boolean
        default: false
      destPath:
        description: ''
        type: string
    required:
    - uri
  AppHealthCheck:
    title: AppHealthCheck
    type: object
    properties:
      command:
        $ref: '#/definitions/CommandCheck'
      gracePeriodSeconds:
        description: >-
          Health check failures are ignored within this number of seconds of

          the task being started or until the task becomes healthy for the

          first time.
        example: 300
        type: integer
        default: 300
        format: int32
      ignoreHttp1xx:
        description: Ignore HTTP 1xx responses
        type: boolean
      intervalSeconds:
        description: Number of seconds to wait between health checks
        example: 60
        type: integer
        default: 60
        format: int32
      maxConsecutiveFailures:
        description: >-
          Number of consecutive health check failures after which the

          unhealthy task should be killed.
        example: 3
        type: integer
        default: 3
        format: int32
      path:
        description: >-
          Path to endpoint exposed by the task that will provide health status.

          Note: only used if protocol == HTTP[S]."
        example: /path/to/health
        type: string
      port:
        description: >-
          The specific port to connect to.

          In case of dynamic ports, see portIndex.
        type: integer
        format: int32
      portIndex:
        description: >-
          Index in this app's ports array to be used for health requests.

          An index is used so the app can use random ports,

          like [0, 0, 0] for example, and tasks could be started with

          port environment variables like $PORT1.
        type: integer
        format: int32
      protocol:
        $ref: '#/definitions/ProtocolEnum'
        example: HTTP
      timeoutSeconds:
        description: >-
          Number of seconds after which a health check is considered a failure

          regardless of the response.
        example: 20
        type: integer
        default: 20
        format: int32
      delaySeconds:
        description: Amount of time to wait until starting the health checks.
        example: 15
        type: integer
        default: 15
        format: int32
  CommandCheck:
    title: CommandCheck
    type: object
    properties:
      value:
        description: >-
          Command line executed by the default shell.

          This process has to return with a zero exit code to indicate the process is healthy.

          Return codes other than null signal, the task is unhealthy.
        type: string
    required:
    - value
  ProtocolEnum:
    title: protocolEnum
    example: HTTP
    type: string
    enum:
    - HTTP
    - HTTPS
    - TCP
    - COMMAND
    - MESOS_TCP
    - MESOS_HTTP
    - MESOS_HTTPS
  IpAddress:
    title: IpAddress
    description: >-
      If an application definition includes the 'ipAddress' field, then Marathon

      will request a per-task IP from Mesos.

      A separate ports/portMappings configuration is then disallowed.
    type: object
    properties:
      discovery:
        $ref: '#/definitions/IpDiscovery'
      groups:
        description: Ignored by Marathon, only exists here to preserve API compat (for now).
        type: array
        items:
          type: string
      labels:
        description: ''
        type: object
        additionalProperties:
          type: string
      networkName:
        description: >-
          If present, declares the name of the network that the container should

          join.

          In practice it is up to the IPAM to decide how to interpret this field
        type: string
  IpDiscovery:
    title: IpDiscovery
    description: Information useful for service discovery
    type: object
    properties:
      ports:
        description: ''
        type: array
        items:
          $ref: '#/definitions/IpDiscoveryPort'
  IpDiscoveryPort:
    title: IpDiscoveryPort
    description: Port
    type: object
    properties:
      name:
        description: Name of the port
        type: string
      number:
        description: The port number
        example: 0
        type: integer
        default: 0
        format: int32
      protocol:
        description: ''
        example: tcp
        type: string
        default: tcp
      labels:
        description: ''
        type: object
        additionalProperties:
          type: string
    required:
    - name
  Network:
    title: Network
    type: object
    properties:
      name:
        description: >-
          Defines the name of the container network to join.

          Not for use with `host` mode networking.
        type: string
      mode:
        $ref: '#/definitions/ModeEnum'
        example: container
      labels:
        description: >-
          Labels applied to the pod's NetworkInfo.

          Ignored when using `host` node networking.
        type: object
        additionalProperties:
          type: string
  ModeEnum:
    title: modeEnum
    example: container
    type: string
    enum:
    - container
    - container/bridge
    - host
  PortDefinition:
    title: PortDefinition
    type: object
    properties:
      port:
        description: >-
          If requirePorts is set to true, then this port number will be used

          on the agent host. Otherwise if the requirePorts is set to false and

          this port number is not zero, then it will be used as a service port

          and a dynamic port will be used on the agent host.

          If it is set to zero, a dynamic port will be used on the host and a

          unique service port will be assigned by Marathon.
        example: 0
        type: integer
        default: 0
        format: int32
      labels:
        description: ''
        type: object
        additionalProperties:
          type: string
      name:
        description: >-
          Name of the service hosted on this port.

          If provided, it must be unique over all port definitions.
        type: string
      protocol:
        description: If this port is used for tcp or udp or both.
        example: tcp
        type: string
        default: tcp
  ReadinessCheck:
    title: ReadinessCheck
    description: Query these readiness checks to determine if a task is ready to serve requests.
    type: object
    properties:
      name:
        description: The name used to identify this readiness check
        example: readinessCheck
        type: string
        default: readinessCheck
      protocol:
        description: ''
        example: HTTP
        type: string
        default: HTTP
      path:
        description: Path to endpoint exposed by the task that will provide readiness status.
        example: /
        type: string
        default: /
      portName:
        description: Name of the port to query as described in the portDefinitions.
        example: http-api
        type: string
        default: http-api
      intervalSeconds:
        description: Number of seconds to wait between readiness checks.
        example: 30
        type: integer
        default: 30
        format: int32
      timeoutSeconds:
        description: >-
          Number of seconds after which a health check is considered a failure

          regardless of the response.

          Must be smaller than intervalSeconds.
        example: 10
        type: integer
        default: 10
        format: int32
      httpStatusCodesForReady:
        description: The HTTP(s) status codes to treat as 'ready'
        type: array
        items:
          type: integer
          format: int32
      preserveLastResponse:
        description: >-
          If and only if true, preserve the last readiness check responses and

          expose them in the API as part of a deployment.
        example: false
        type: boolean
        default: false
  AppResidency:
    title: AppResidency
    description: >-
      When using local persistent volumes that pin tasks onto agents,

      these values define how Marathon handles terminal states of these tasks.
    type: object
    properties:
      relaunchEscalationTimeoutSeconds:
        description: >-
          When a task using persistent local volumes cannot be restarted on the

          agent it's been pinned to, Marathon will try to launch this task on

          another node after this timeout. Defaults to 3600 (one hour).",
        example: 3600
        type: integer
        format: int64
      taskLostBehavior:
        description: ''
        example: WAIT_FOREVER
        type: string
    required:
    - relaunchEscalationTimeoutSeconds
    - taskLostBehavior
  SecretDef:
    title: SecretDef
    description: A secret declaration
    type: object
    properties:
      source:
        description: >-
          The source of the secrets value.

          The format dependes on the secret store
        type: string
    required:
    - source
  UpgradeStrategy:
    title: UpgradeStrategy
    description: >-
      During an upgrade all instances of an application get replaced by a new

      version.

      The upgradeStrategy controls how Marathon stops old versions and

      launches new versions.
    type: object
    properties:
      maximumOverCapacity:
        description: >-
          A number between 0 and 1 which is multiplied with the instance count.

          This is the maximum number of additional instances launched at any

          point of time during the upgrade process.
        type: number
        format: double
      minimumHealthCapacity:
        description: >-
          A number between 0 and 1 that is multiplied with the instance count.

          This is the minimum number of healthy nodes that do not sacrifice

          overall application purpose. Marathon will make sure, during the

          upgrade process, that at any point of time this number of healthy

          instances are up.
        type: number
        format: double
    required:
    - maximumOverCapacity
    - minimumHealthCapacity
  VersionInfo:
    title: VersionInfo
    description: Detailed version information
    type: object
    properties:
      lastScalingAt:
        description: Contains the timestamp of the last change to this pod which was not simply a scaling or restarting configuration
        type: string
        format: date-time
      lastConfigChangeAt:
        description: Contains the timestamp of the last change including changes like scaling or restarting.
        type: string
        format: date-time
    required:
    - lastScalingAt
    - lastConfigChangeAt
  EmbedEnum:
    title: embedEnum
    description: >-
      Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. <br/>

      - <code>app.tasks</code>. embed tasks Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.

      - <code>app.counts</code>. embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.

      - <code>app.deployments</code>. embed all deployment identifier, if the related app currently is in deployment.

      - <code>app.readiness</code> embed all readiness check results

      - <code>app.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

      - <code>app.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.

      - <code>app.taskStats</code> exposes task statistics in the JSON.
    example: app.tasks
    type: string
    enum:
    - app.tasks
    - app.count
    - app.deployments
    - app.lastTaskFailure
    - app.failures
    - app.taskStats
  DeploymentResult:
    title: DeploymentResult
    description: Result of the deployment
    type: object
    properties:
      deploymentId:
        description: ''
        type: string
      version:
        description: ''
        type: string
        format: date-time
    required:
    - deploymentId
    - version
  EmbedEnum40:
    title: embedEnum40
    description: >-
      Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values.

      - <code>apps.tasks</code> embed all tasks of each application<br/> Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.

      - <code>apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.

      - <code>apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.

      - <code>apps.readiness</code> embed all readiness check results

      - <code>apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

      - <code>apps.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.

      - <code>apps.taskStats</code> exposes task statistics in the JSON.
    example: apps.tasks
    type: string
    enum:
    - apps.tasks
    - apps.count
    - apps.deployments
    - apps.lastTaskFailure
    - apps.failures
    - apps.taskStats
  Pod:
    title: Pod
    description: >
      A pod allows one to launch a collection co-located (on the same agent) containers

      that share the same network namespace and that may share the same a9c24f76-a78f-437a-b9bb-ae29ac123bcf-volumes.

      Resources are specified on a per-container basis.
    type: object
    properties:
      id:
        description: ''
        type: string
      containers:
        description: ''
        type: array
        items:
          $ref: '#/definitions/PodContainer'
      labels:
        description: >-
          Metadata as key/value pair.

          Useful when passing directives to be interpreted by Mesos modules.
        type: object
        additionalProperties:
          type: string
      version:
        description: The version of the definition, immutable
        type: string
        format: date-time
      user:
        description: >-
          The OS user to use to run the tasks on the agent.

          May be overridden by a a9c24f76-a78f-437a-b9bb-ae29ac123bcf-container.
        type: string
      environment:
        description: >-
          Environment Variables to set at the pod level.

          Individual containers may override them
        type: object
        additionalProperties:
          type: object
      secrets:
        description: ''
        type: object
        additionalProperties:
          $ref: '#/definitions/SecretDef'
      volumes:
        description: Volumes defined on a pod level that are mounted into containers
        type: array
        items:
          type: object
      networks:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Network'
      scaling:
        $ref: '#/definitions/PodScalingPolicy'
      scheduling:
        $ref: '#/definitions/PodSchedulingPolicy'
      executorResources:
        $ref: '#/definitions/ExecutorResources'
    required:
    - id
    - containers
  PodContainer:
    title: PodContainer
    description: Mesos Container
    type: object
    properties:
      name:
        description: The name of this container
        type: string
      resources:
        $ref: '#/definitions/Resources'
      exec:
        $ref: '#/definitions/MesosExec'
      endpoints:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Endpoint'
      image:
        $ref: '#/definitions/Image'
      environment:
        description: ''
        type: object
        additionalProperties:
          type: object
      user:
        description: >-
          The OS user to use to run the tasks on the agent.

          Values here override a "user" value specified in the pod definition.
        type: string
      healthCheck:
        $ref: '#/definitions/HealthCheck'
      volumeMounts:
        description: ''
        type: array
        items:
          $ref: '#/definitions/VolumeMount'
      artifacts:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Artifact'
      labels:
        description: >-
          Metadata as key/value pair.

          Useful when passing directives to be interpreted by Mesos modules.
        type: object
        additionalProperties:
          type: string
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      tty:
        description: Describes if (pseudo) TTY sould be allocated for the process of this container.
        type: boolean
    required:
    - name
    - resources
  MesosExec:
    title: MesosExec
    type: object
    properties:
      command:
        description: >-
          Command specification executed by Mesos, not parsed by Marathon.

          The presence of `command.shell` implies `overrideEntrypoint=true`.
        type: object
      overrideEntrypoint:
        description: >-
          When true argv[0] will be used as the entrypoint/exec of the container.

          Otherwise the contents of argv[] are appended as arguments.
        type: boolean
    required:
    - command
  Resources:
    title: Resources
    description: Resource Allocations
    type: object
    properties:
      cpus:
        description: The number of CPU shares this pod needs per instance. This number does not have to be integer, but can be a fraction.
        example: 1
        type: number
        format: double
      mem:
        description: The amount of memory in MB that is needed for the pod instance
        example: 128
        type: number
        format: double
      disk:
        description: How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction.
        example: 0
        type: number
        default: 0
        format: double
      gpus:
        description: The amount of GPU cores that are needed for the pod
        example: 0
        type: integer
        default: 0
        format: int32
    required:
    - cpus
    - mem
  Endpoint:
    title: Endpoint
    description: >-
      Endpoints accept connections from outside of a pod.

      Endpoints may also be advertised outside of a cluster.
    type: object
    properties:
      name:
        description: Name of this port. Should be unique in the context of the pod.
        type: string
      containerPort:
        description: >-
          The container port that a task's process is actually listening on.

          Required if the network mode is container
        type: integer
        format: int32
      hostPort:
        description: >-
          Mapped port on the host.

          All host ports are allocated from resource offers.
        type: integer
        format: int32
      protocol:
        description: >-
          The protocol of this port, advertised in Mesos DiscoveryInfo (DI).

          Specifying more than one protocol here will result in the generation

          of multiple Port DI entries.
        type: array
        items:
          type: string
      labels:
        description: >-
          Metadata as key/value pair. Possible uses include VIPs,

          per-network-interface binding
        type: object
        additionalProperties:
          type: string
      networkNames:
        description: >-
          List of the container networks associated with this endpoint. If

          absent, then this endpoint is associated with all defined container

          networks (for this application). A single item list is mandatory when

          `hostPort` is specified and multiple container networks are defined.
        type: array
        items:
          type: string
    required:
    - name
  Image:
    title: Image
    type: object
    properties:
      kind:
        $ref: '#/definitions/KindEnum'
      id:
        description: address/identifier of the file system image
        example: mesosphere/marathon:1.3.0
        type: string
      pullConfig:
        $ref: '#/definitions/DockerPullConfig'
      forcePull:
        description: true if the image should always be pulled
        type: boolean
      labels:
        description: >-
          Used during image discovery and dependency resolution.

          Several well-known labels are defined:

          version: the version of this image

          os: (default: linux) operating system

          arch: (default: amd64) architecture
        type: object
        additionalProperties:
          type: string
    required:
    - kind
    - id
  KindEnum:
    title: kindEnum
    example: DOCKER
    type: string
    enum:
    - DOCKER
    - APPC
  HealthCheck:
    title: HealthCheck
    type: object
    properties:
      http:
        $ref: '#/definitions/HttpHealthCheck'
      tcp:
        $ref: '#/definitions/TcpHealthCheck'
      exec:
        $ref: '#/definitions/CommandHealthCheck'
      gracePeriodSeconds:
        description: >-
          Health check failures are ignored within this number of seconds of

          the task being started or until the task becomes healthy for the

          first time.
        example: 300
        type: integer
        default: 300
        format: int32
      intervalSeconds:
        description: Interval between the health checks
        example: 60
        type: integer
        default: 60
        format: int32
      maxConsecutiveFailures:
        description: Number of consecutive failures until the task will be killed
        example: 3
        type: integer
        default: 3
        format: int32
      timeoutSeconds:
        description: Amount of time to wait for the health check to complete.
        example: 20
        type: integer
        default: 20
        format: int32
      delaySeconds:
        description: Amount of time to wait until starting the health checks.
        example: 15
        type: integer
        default: 15
        format: int32
  HttpHealthCheck:
    title: HttpHealthCheck
    type: object
    properties:
      endpoint:
        description: >-
          The endpoint name to use.

          In "host" mode health checks use the hostPort. In other modes use the containerPort.
        type: string
      path:
        description: ''
        type: string
      scheme:
        description: ''
        example: HTTP
        type: string
        default: HTTP
    required:
    - endpoint
  TcpHealthCheck:
    title: TcpHealthCheck
    type: object
    properties:
      endpoint:
        description: >-
          The endpoint name to use.

          In "host" mode health checks use the hostPort. In other modes use the containerPort.
        type: string
    required:
    - endpoint
  CommandHealthCheck:
    title: CommandHealthCheck
    type: object
    properties:
      command:
        description: ''
        type: object
    required:
    - command
  VolumeMount:
    title: VolumeMount
    type: object
    properties:
      name:
        description: The name of the volume to reference.
        type: string
      mountPath:
        description: The path inside the container at which the volume is mounted.
        type: string
      readOnly:
        description: ''
        type: boolean
    required:
    - name
    - mountPath
  Lifecycle:
    title: Lifecycle
    type: object
    properties:
      killGracePeriodSeconds:
        description: >-
          After a SIGTERM is sent to a container instance, Mesos will wait this number of seconds

          before issuing a SIGKILL.
        type: number
        format: double
  PodScalingPolicy:
    title: PodScalingPolicy
    description: Add new possible super-types as different scaling policies are supported.
    type: object
    properties:
      kind:
        $ref: '#/definitions/KindEnum69'
    required:
    - kind
  KindEnum69:
    title: kindEnum69
    example: fixed
    type: string
    enum:
    - fixed
  PodSchedulingPolicy:
    title: PodSchedulingPolicy
    type: object
    properties:
      backoff:
        $ref: '#/definitions/PodSchedulingBackoffStrategy'
      upgrade:
        $ref: '#/definitions/PodUpgradeStrategy'
      placement:
        $ref: '#/definitions/PodPlacementPolicy'
      killSelection:
        description: ''
        type: string
      unreachableStrategy:
        description: ''
        type: object
  PodSchedulingBackoffStrategy:
    title: PodSchedulingBackoffStrategy
    description: >-
      Configures exponential backoff behavior when launching potentially sick apps.

      This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves.

      The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds.

      This applies also to tasks that are killed due to failing too many health checks.
    type: object
    properties:
      backoff:
        description: The initial backoff (seconds) applied when a launched instance fails.
        example: 1
        type: number
        default: 1
        format: double
      backoffFactor:
        description: The factor applied to the current backoff to determine the new backoff.
        example: 1.1499999999999999
        type: number
        default: 1.1499999999999999
        format: double
      maxLaunchDelay:
        description: The maximum backoff (seconds) applied when subsequent failures are detected.
        example: 3600
        type: number
        default: 3600
        format: double
  PodUpgradeStrategy:
    title: PodUpgradeStrategy
    description: >-
      During an upgrade all instances of an application get replaced by a new version.

      The upgradeStrategy controls how Marathon stops old versions and launches new versions.
    type: object
    properties:
      minimumHealthCapacity:
        description: >-
          A number between 0and 1 that is multiplied with the instance count.

          This is the minimum number of healthy nodes that do not sacrifice overall application purpose.

          Marathon will make sure, during the upgrade process, that at any point of time this number of healthy instances are up.
        example: 1
        type: number
        default: 1
        format: double
      maximumOverCapacity:
        description: >-
          A number between 0 and 1 which is multiplied with the instance count.

          This is the maximum number of additional instances launched at any point of time during the upgrade process.
        example: 1
        type: number
        default: 1
        format: double
  PodPlacementPolicy:
    title: PodPlacementPolicy
    type: object
    properties:
      constraints:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Constraint'
      acceptedResourceRoles:
        description: ''
        type: array
        items:
          type: string
  Constraint:
    title: Constraint
    type: object
    properties:
      fieldName:
        description: ''
        type: string
      operator:
        $ref: '#/definitions/OperatorEnum'
      value:
        description: ''
        type: string
    required:
    - fieldName
    - operator
  OperatorEnum:
    title: operatorEnum
    example: UNIQUE
    type: string
    enum:
    - UNIQUE
    - CLUSTER
    - GROUP_BY
    - LIKE
    - UNLIKE
    - MAX_PER
  ExecutorResources:
    title: ExecutorResources
    description: Executor Resource Allocations. Same as Resources but reserved for the pod executor.
    type: object
    properties:
      cpus:
        description: The number of CPU shares this pod needs per instance for its executor. This number does not have to be integer, but can be a fraction.
        example: 0.10000000000000001
        type: number
        default: 0.10000000000000001
        format: double
      mem:
        description: The amount of memory in MB that is needed for the pod instance for the pod instance's executor
        example: 32
        type: number
        default: 32
        format: double
      disk:
        description: How much disk space is needed for for the executor. This number does not have to be an integer, but can be a fraction.
        example: 10
        type: number
        default: 10
        format: double
  PodStatus:
    title: PodStatus
    description: >
      Pod status communicates the lifecycle phase of the pod, current instance and container

      status, and recent termination status history.
    type: object
    properties:
      id:
        description: ''
        type: string
      spec:
        $ref: '#/definitions/Pod'
      status:
        $ref: '#/definitions/StatusEnum'
      statusSince:
        description: Time at which the status code was last modified.
        type: string
        format: date-time
      lastUpdated:
        description: Time that this status object was last checked and updated (even if nothing changed)
        type: string
        format: date-time
      lastChanged:
        description: Time that this status object was last modified (some aspect of status did change)
        type: string
        format: date-time
      message:
        description: Human-friendly explanation for reason of the current status.
        type: string
      instances:
        description: ''
        type: array
        items:
          $ref: '#/definitions/PodInstanceStatus'
      terminationHistory:
        description: >-
          List of most recent instance terminations.

          TODO(jdef) determine how many items might show up here; current thinking is .. not many
        type: array
        items:
          $ref: '#/definitions/TerminationHistory'
    required:
    - id
    - spec
    - status
    - statusSince
    - lastUpdated
    - lastChanged
  StatusEnum:
    title: statusEnum
    example: DEGRADED
    type: string
    enum:
    - DEGRADED
    - STABLE
    - TERMINAL
  PodInstanceStatus:
    title: PodInstanceStatus
    type: object
    properties:
      id:
        description: >-
          Unique ID of this pod instance in the cluster.

          TODO(jdef) Probably represents the Mesos executor ID.
        type: string
      status:
        $ref: '#/definitions/StatusEnum107'
      statusSince:
        description: Time at which the status code was last modified.
        type: string
        format: date-time
      lastUpdated:
        description: Time that this status was last checked and updated (even if nothing changed)
        type: string
        format: date-time
      lastChanged:
        description: Time that this status was last modified (some aspect of status did change)
        type: string
        format: date-time
      message:
        description: Human-friendly explanation for reason of the current status.
        type: string
      conditions:
        description: ''
        type: array
        items:
          $ref: '#/definitions/StatusCondition'
      agentHostname:
        description: >-
          Hostname that this instance was launched on.

          May be an IP address if the agent was configured to advertise its hostname that way.
        type: string
      agentId:
        description: The Mesos-generated ID of the agent upon which the instance was launched.
        type: string
      resources:
        $ref: '#/definitions/Resources'
      networks:
        description: Status of the networks to which this instance is attached.
        type: array
        items:
          $ref: '#/definitions/NetworkStatus'
      containers:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ContainerStatus'
      specReference:
        description: Location of the version of the pod specification this instance was created from.
        type: string
    required:
    - id
    - status
    - statusSince
    - lastUpdated
    - lastChanged
  StatusEnum107:
    title: statusEnum107
    example: PENDING
    type: string
    enum:
    - PENDING
    - STAGING
    - STABLE
    - DEGRADED
    - TERMINAL
  StatusCondition:
    title: StatusCondition
    type: object
    properties:
      name:
        description: >-
          Human and machine-readable name of this condition.

          For example "healthy", "disk-full".
        type: string
      lastChanged:
        description: last time the value field was changed for this condition
        type: string
        format: date-time
      lastUpdated:
        description: last time this condition was updated (value may not have changed)
        type: string
        format: date-time
      value:
        description: the state of the condition. may be boolean or some enumeration-derived value
        type: string
      reason:
        description: a machine-readable value that systems use to reason about the state of the condition
        type: string
    required:
    - name
    - lastChanged
    - lastUpdated
    - value
  NetworkStatus:
    title: NetworkStatus
    type: object
    properties:
      name:
        description: name of the network
        type: string
      addresses:
        description: ''
        type: array
        items:
          type: string
  ContainerStatus:
    title: ContainerStatus
    type: object
    properties:
      name:
        description: name of the container specification (within the pod)
        type: string
      status:
        description: ''
        type: string
      statusSince:
        description: Time at which the status code was last modified.
        type: string
        format: date-time
      lastUpdated:
        description: Time that this status was last checked and updated (even if nothing changed)
        type: string
        format: date-time
      lastChanged:
        description: Time that this status was last modified (some aspect of status did change)
        type: string
        format: date-time
      message:
        description: Human-friendly explanation for the container's current status.
        type: string
      conditions:
        description: ''
        type: array
        items:
          $ref: '#/definitions/StatusCondition'
      containerId:
        description: >-
          Unique ID of this container in the cluster.

          TODO(jdef) Probably represents the Mesos task ID.
        type: string
      endpoints:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ContainerEndpointStatus'
      resources:
        $ref: '#/definitions/Resources'
      termination:
        $ref: '#/definitions/ContainerTerminationState'
    required:
    - name
    - status
    - statusSince
    - lastUpdated
    - lastChanged
  ContainerEndpointStatus:
    title: ContainerEndpointStatus
    type: object
    properties:
      name:
        description: name of the endpoint
        type: string
      allocatedHostPort:
        description: ''
        type: integer
        format: int32
      healthy:
        description: true if a health check is defined for this endpoint and is passing
        type: boolean
    required:
    - name
  ContainerTerminationState:
    title: ContainerTerminationState
    type: object
    properties:
      exitCode:
        description: ''
        type: integer
        format: int32
      message:
        description: Human-explanation for container termination.
        type: string
  TerminationHistory:
    title: TerminationHistory
    type: object
    properties:
      instanceID:
        description: ''
        type: string
      startedAt:
        description: ''
        type: string
        format: date-time
      terminatedAt:
        description: ''
        type: string
        format: date-time
      message:
        description: Human-friendly explanation for termination.
        type: string
      containers:
        description: ''
        type: array
        items:
          $ref: '#/definitions/ContainerTerminationHistory'
    required:
    - instanceID
    - startedAt
    - terminatedAt
  ContainerTerminationHistory:
    title: ContainerTerminationHistory
    type: object
    properties:
      containerId:
        description: ''
        type: string
      lastKnownState:
        description: ''
        type: string
      termination:
        $ref: '#/definitions/ContainerTerminationState'
    required:
    - containerId
  EmbedEnum127:
    title: embedEnum127
    description: >-
      Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. Unknown embed parameters are ignored. If you omit this parameter, it defaults to <code>group.groups</code>, <code>group.apps</code>

      - <code>group.groups</code> embed all child groups of each group<br/>

      - <code>group.apps</code> embed all apps of each group<br/>

      - <code>group.apps.tasks</code> embed all tasks of each application<br/>

      - <code>group.apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/>

      - <code>group.apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.

      - <code>group.apps.readiness</code> embed all readiness check results

      - <code>group.apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.

      - <code>group.apps.taskStats</code> exposes task statistics in the JSON.
    example: group.groups
    type: string
    enum:
    - group.groups
    - group.apps
    - group.apps.tasks
    - group.apps.count
    - group.apps.deployments
    - group.apps.lastTaskFailure
    - group.apps.failures
    - group.apps.taskStats
  GroupInfo:
    title: GroupInfo
    description: >
      GroupInfo is a status report of a tree (or subtree) of the root-group hierarchy

      within Marathon. It is never used to update groups, it is only for reporting.

      TODO App should be AppInfo here, once we have a RAML type for that.
    example:
      id: /
      apps: []
      groups:
      - id: /tools
        apps:
        - id: /tools/oauth-server
          instances: 2
          cpus: 1
          mem: 1024
          disk: 0
          constraints:
          - - hostname
            - UNIQUE
          uris: []
          ports:
          - 1980
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            volumes: []
            docker:
              image: docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774
              network: HOST
              privileged: false
              parameters: []
              forcePullImage: false
          healthChecks:
          - path: /
            protocol: HTTP
            portIndex: 0
            gracePeriodSeconds: 300
            intervalSeconds: 20
            timeoutSeconds: 20
            maxConsecutiveFailures: 3
            ignoreHttp1xx: false
          dependencies: []
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-09-28T19:47:37.6810000Z
          versionInfo:
            lastScalingAt: 2015-09-28T19:47:37.6810000Z
            lastConfigChangeAt: 2015-09-28T19:47:37.6810000Z
        - id: /tools/datadog-agent
          instances: 5
          cpus: 1
          mem: 512
          disk: 0
          executor: ''
          constraints:
          - - hostname
            - UNIQUE
          uris: []
          ports:
          - 10018
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            volumes:
            - containerPath: /var/run/docker.sock
              hostPath: /var/run/docker.sock
              mode: RW
            - containerPath: /host/proc/mounts
              hostPath: /proc/mounts
              mode: RO
            - containerPath: /host/sys/fs/cgroup
              hostPath: /sys/fs/cgroup/
              mode: RO
            docker:
              image: datadog/docker-dd-agent:latest
              network: HOST
              privileged: true
              parameters: []
              forcePullImage: false
          healthChecks: []
          dependencies: []
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-08-26T22:33:24.2250000Z
          versionInfo:
            lastScalingAt: 2015-08-26T22:33:24.2250000Z
            lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
        groups:
        - id: /tools/log
          apps: []
          groups: []
          dependencies: []
          version: 2015-09-17T10:38:20.8750000Z
        - id: /tools/docker
          apps:
          - id: /tools/docker/registry
            instances: 1
            cpus: 0.5
            mem: 4096
            disk: 0
            executor: ''
            constraints: []
            uris: []
            ports:
            - 5000
            requirePorts: false
            backoffSeconds: 1
            backoffFactor: 1.1499999999999999
            maxLaunchDelaySeconds: 3600
            container:
              type: DOCKER
              volumes:
              - containerPath: /docker_storage
                hostPath: /hdd/tools/docker/registry
                mode: RW
              docker:
                image: registry
                network: BRIDGE
                portMappings:
                - containerPort: 5000
                  hostPort: 0
                  servicePort: 5000
                  protocol: tcp
                privileged: false
                parameters: []
                forcePullImage: false
            healthChecks: []
            dependencies: []
            upgradeStrategy:
              minimumHealthCapacity: 1
              maximumOverCapacity: 1
            version: 2015-08-19T21:26:47.6160000Z
            versionInfo:
              lastScalingAt: 2015-08-19T21:26:47.6160000Z
              lastConfigChangeAt: 2015-08-19T21:00:54.6210000Z
          groups: []
          dependencies: []
          version: 2015-09-17T10:38:20.8750000Z
        dependencies: []
        version: 2015-09-17T10:38:20.8750000Z
      dependencies: []
      version: 2015-09-17T10:38:20.8750000Z
    type: object
    properties:
      id:
        description: ''
        type: string
      apps:
        description: ''
        type: array
        items:
          $ref: '#/definitions/App'
      pods:
        description: ''
        type: array
        items:
          $ref: '#/definitions/PodStatus'
      groups:
        description: >-
          Groups can build a tree.

          Each group can contain sub-groups.

          The sub-groups are defined here.
        type: array
        items:
          $ref: '#/definitions/GroupInfo'
      dependencies:
        description: >-
          A list of services that this group depends on.

          An order is derived from the dependencies for performing start/stop and

          upgrade of the application. For example, an application /a relies on the

          services /b which itself relies on /c. To start all 3 applications,

          first /c is started than /b than /a.
        type: array
        items:
          type: string
      version:
        description: ''
        type: string
        format: date-time
    required:
    - id
  GroupUpdate:
    title: GroupUpdate
    example:
      id: /
      apps: []
      groups:
      - id: /tools
        apps:
        - id: /tools/oauth-server
          instances: 2
          cpus: 1
          mem: 1024
          disk: 0
          constraints:
          - - hostname
            - UNIQUE
          uris: []
          ports:
          - 1980
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            volumes: []
            docker:
              image: docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774
              network: HOST
              privileged: false
              parameters: []
              forcePullImage: false
          healthChecks:
          - path: /
            protocol: HTTP
            portIndex: 0
            gracePeriodSeconds: 300
            intervalSeconds: 20
            timeoutSeconds: 20
            maxConsecutiveFailures: 3
            ignoreHttp1xx: false
          dependencies: []
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-09-28T19:47:37.6810000Z
          versionInfo:
            lastScalingAt: 2015-09-28T19:47:37.6810000Z
            lastConfigChangeAt: 2015-09-28T19:47:37.6810000Z
        - id: /tools/datadog-agent
          instances: 5
          cpus: 1
          mem: 512
          disk: 0
          executor: ''
          constraints:
          - - hostname
            - UNIQUE
          uris: []
          ports:
          - 10018
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            volumes:
            - containerPath: /var/run/docker.sock
              hostPath: /var/run/docker.sock
              mode: RW
            - containerPath: /host/proc/mounts
              hostPath: /proc/mounts
              mode: RO
            - containerPath: /host/sys/fs/cgroup
              hostPath: /sys/fs/cgroup/
              mode: RO
            docker:
              image: datadog/docker-dd-agent:latest
              network: HOST
              privileged: true
              parameters: []
              forcePullImage: false
          healthChecks: []
          dependencies: []
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-08-26T22:33:24.2250000Z
          versionInfo:
            lastScalingAt: 2015-08-26T22:33:24.2250000Z
            lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
        groups:
        - id: /tools/log
          apps: []
          groups: []
          dependencies: []
          version: 2015-09-17T10:38:20.8750000Z
        - id: /tools/docker
          apps:
          - id: /tools/docker/registry
            instances: 1
            cpus: 0.5
            mem: 4096
            disk: 0
            executor: ''
            constraints: []
            uris: []
            ports:
            - 5000
            requirePorts: false
            backoffSeconds: 1
            backoffFactor: 1.1499999999999999
            maxLaunchDelaySeconds: 3600
            container:
              type: DOCKER
              volumes:
              - containerPath: /docker_storage
                hostPath: /hdd/tools/docker/registry
                mode: RW
              docker:
                image: registry
                network: BRIDGE
                portMappings:
                - containerPort: 5000
                  hostPort: 0
                  servicePort: 5000
                  protocol: tcp
                privileged: false
                parameters: []
                forcePullImage: false
            healthChecks: []
            dependencies: []
            upgradeStrategy:
              minimumHealthCapacity: 1
              maximumOverCapacity: 1
            version: 2015-08-19T21:26:47.6160000Z
            versionInfo:
              lastScalingAt: 2015-08-19T21:26:47.6160000Z
              lastConfigChangeAt: 2015-08-19T21:00:54.6210000Z
          groups: []
          dependencies: []
          version: 2015-09-17T10:38:20.8750000Z
        dependencies: []
        version: 2015-09-17T10:38:20.8750000Z
      dependencies: []
      version: 2015-09-17T10:38:20.8750000Z
    type: object
    properties:
      id:
        description: ''
        type: string
      apps:
        description: ''
        type: array
        items:
          $ref: '#/definitions/App'
      groups:
        description: ''
        type: array
        items:
          $ref: '#/definitions/GroupUpdate'
      dependencies:
        description: ''
        type: array
        items:
          type: string
      scaleBy:
        description: ''
        type: number
        format: double
      version:
        description: ''
        type: string
        format: date-time
    required:
    - id
  Group:
    title: Group
    description: >
      Group is used to create or update applications and groups. Pods are not mutable

      through this interface, but are included for completeness.
    example:
      id: /
      apps: []
      groups:
      - id: /tools
        apps:
        - id: /tools/oauth-server
          instances: 2
          cpus: 1
          mem: 1024
          disk: 0
          constraints:
          - - hostname
            - UNIQUE
          uris: []
          ports:
          - 1980
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            volumes: []
            docker:
              image: docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774
              network: HOST
              privileged: false
              parameters: []
              forcePullImage: false
          healthChecks:
          - path: /
            protocol: HTTP
            portIndex: 0
            gracePeriodSeconds: 300
            intervalSeconds: 20
            timeoutSeconds: 20
            maxConsecutiveFailures: 3
            ignoreHttp1xx: false
          dependencies: []
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-09-28T19:47:37.6810000Z
          versionInfo:
            lastScalingAt: 2015-09-28T19:47:37.6810000Z
            lastConfigChangeAt: 2015-09-28T19:47:37.6810000Z
        - id: /tools/datadog-agent
          instances: 5
          cpus: 1
          mem: 512
          disk: 0
          executor: ''
          constraints:
          - - hostname
            - UNIQUE
          uris: []
          ports:
          - 10018
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            volumes:
            - containerPath: /var/run/docker.sock
              hostPath: /var/run/docker.sock
              mode: RW
            - containerPath: /host/proc/mounts
              hostPath: /proc/mounts
              mode: RO
            - containerPath: /host/sys/fs/cgroup
              hostPath: /sys/fs/cgroup/
              mode: RO
            docker:
              image: datadog/docker-dd-agent:latest
              network: HOST
              privileged: true
              parameters: []
              forcePullImage: false
          healthChecks: []
          dependencies: []
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-08-26T22:33:24.2250000Z
          versionInfo:
            lastScalingAt: 2015-08-26T22:33:24.2250000Z
            lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
        groups:
        - id: /tools/log
          apps: []
          groups: []
          dependencies: []
          version: 2015-09-17T10:38:20.8750000Z
        - id: /tools/docker
          apps:
          - id: /tools/docker/registry
            instances: 1
            cpus: 0.5
            mem: 4096
            disk: 0
            executor: ''
            constraints: []
            uris: []
            ports:
            - 5000
            requirePorts: false
            backoffSeconds: 1
            backoffFactor: 1.1499999999999999
            maxLaunchDelaySeconds: 3600
            container:
              type: DOCKER
              volumes:
              - containerPath: /docker_storage
                hostPath: /hdd/tools/docker/registry
                mode: RW
              docker:
                image: registry
                network: BRIDGE
                portMappings:
                - containerPort: 5000
                  hostPort: 0
                  servicePort: 5000
                  protocol: tcp
                privileged: false
                parameters: []
                forcePullImage: false
            healthChecks: []
            dependencies: []
            upgradeStrategy:
              minimumHealthCapacity: 1
              maximumOverCapacity: 1
            version: 2015-08-19T21:26:47.6160000Z
            versionInfo:
              lastScalingAt: 2015-08-19T21:26:47.6160000Z
              lastConfigChangeAt: 2015-08-19T21:00:54.6210000Z
          groups: []
          dependencies: []
          version: 2015-09-17T10:38:20.8750000Z
        dependencies: []
        version: 2015-09-17T10:38:20.8750000Z
      dependencies: []
      version: 2015-09-17T10:38:20.8750000Z
    type: object
    properties:
      id:
        description: ''
        type: string
      apps:
        description: ''
        type: array
        items:
          $ref: '#/definitions/App'
      pods:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Pod'
      groups:
        description: >-
          Groups can build a tree.

          Each group can contain sub-groups.

          The sub-groups are defined here.
        type: array
        items:
          $ref: '#/definitions/Group'
      dependencies:
        description: >-
          A list of services that this group depends on.

          An order is derived from the dependencies for performing start/stop and

          upgrade of the application. For example, an application /a relies on the

          services /b which itself relies on /c. To start all 3 applications,

          first /c is started than /b than /a.
        type: array
        items:
          type: string
      version:
        description: ''
        type: string
        format: date-time
    required:
    - id
  EnrichedTasksList:
    title: EnrichedTasksList
    example:
      tasks:
      - id: frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b
        host: srv4.example.com
        ports:
        - 31292
        startedAt: 2015-09-17T09:32:42.5980000Z
        stagedAt: 2015-09-17T09:32:36.8220000Z
        version: 2015-09-17T09:32:36.5830000Z
        slaveId: 20150707-153709-201330860-5050-12052-S0
        appId: /frontend-foosball
        state: TASK_RUNNING
        servicePorts:
        - 10019
      - id: tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed
        host: srv2.example.com
        ports:
        - 31721
        startedAt: 2015-08-19T21:26:50.8640000Z
        stagedAt: 2015-08-19T21:26:49.0400000Z
        version: 2015-08-19T21:26:47.6160000Z
        slaveId: 1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24
        state: TASK_RUNNING
        appId: /tools/docker/registry
        servicePorts:
        - 5000
    type: object
    properties:
      tasks:
        description: ''
        type: array
        items:
          $ref: '#/definitions/EnrichedTask'
    required:
    - tasks
  EnrichedTask:
    title: EnrichedTask
    type: object
    properties:
      appId:
        description: ''
        type: string
      host:
        description: ''
        type: string
      id:
        description: ''
        type: string
      state:
        description: ''
        type: string
      healthCheckResults:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Health'
      ipAddresses:
        description: ''
        type: array
        items:
          $ref: '#/definitions/IpAddr'
      ports:
        description: ''
        type: array
        items:
          type: integer
          format: int32
      servicePorts:
        description: ''
        type: array
        items:
          type: integer
          format: int32
      slaveId:
        description: ''
        type: string
      stagedAt:
        description: ''
        type: string
      startedAt:
        description: ''
        type: string
      version:
        description: ''
        type: string
      localVolumes:
        description: ''
        type: array
        items:
          $ref: '#/definitions/LocalVolumeId'
    required:
    - appId
    - host
    - id
    - state
  Health:
    title: Health
    type: object
    properties:
      alive:
        description: ''
        type: boolean
      consecutiveFailures:
        description: ''
        type: integer
        format: int32
      instanceId:
        description: ''
        type: string
      firstSuccess:
        description: ''
        type: string
      lastSuccess:
        description: ''
        type: string
      lastFailure:
        description: ''
        type: string
      lastFailureCause:
        description: ''
        type: string
    required:
    - alive
    - consecutiveFailures
    - instanceId
  IpAddr:
    title: IpAddr
    type: object
    properties:
      ipAddress:
        description: ''
        type: string
      protocol:
        description: ''
        type: string
    required:
    - ipAddress
    - protocol
  LocalVolumeId:
    title: LocalVolumeId
    type: object
    properties:
      runSpecId:
        description: ''
        type: string
      containerPath:
        description: ''
        type: string
      uuid:
        description: ''
        type: string
      persistenceId:
        description: ''
        type: string
    required:
    - runSpecId
    - containerPath
    - uuid
    - persistenceId
  MarathonInfo:
    title: MarathonInfo
    example:
      name: marathon
      version: 1.5.0-SNAPSHOT
      buildref: unknown
      elected: true
      leader: localhost:8080
      frameworkId: 96d7da70-b731-4cfb-96a7-0ee877af615d-0000
      marathon_config:
        access_control_allow_origin:
        - '*'
        checkpoint: true
        decline_offer_duration: 120000
        default_network_name: container-network
        env_vars_prefix: APP
        executor: //cmd
        failover_timeout: 604800
        features: []
        framework_name: marathon
        ha: true
        hostname: localhost
        launch_token: 100
        launch_token_refresh_interval: 30000
        leader_proxy_connection_timeout_ms: 5000
        leader_proxy_read_timeout_ms: 10000
        local_port_max: 20000
        local_port_min: 10000
        master: zk://localhost:2181/mesos
        max_instances_per_offer: 5
        mesos_bridge_name: mesos-bridge
        mesos_heartbeat_failure_threshold: 5
        mesos_heartbeat_interval: 15000
        mesos_leader_ui_url: http://localhost:5050/
        mesos_role: slave_public
        mesos_user: nobody
        min_revive_offers_interval: 5000
        offer_matching_timeout: 3000
        on_elected_prepare_timeout: 180000
        reconciliation_initial_delay: 15000
        reconciliation_interval: 600000
        revive_offers_for_new_apps: true
        revive_offers_repetitions: 3
        scale_apps_initial_delay: 15000
        scale_apps_interval: 300000
        store_cache: true
        task_launch_confirm_timeout: 300000
        task_launch_timeout: 300000
        task_lost_expunge_initial_delay: 300000
        task_lost_expunge_interval: 30000
        task_reservation_timeout: 20000
        webui_url: http://localhost:8080
      zookeeper_config:
        zk: zk://localhost:2181/marathon
        zk_compression: true
        zk_compression_threshold: 65536
        zk_connection_timeout: 10000
        zk_max_node_size: 1024000
        zk_max_versions: 50
        zk_session_timeout: 10000
        zk_timeout: 10000
      http_config:
        http_port: 8080
        https_port: 8443
    type: object
    properties:
      name:
        description: ''
        type: string
      version:
        description: ''
        type: string
      buildref:
        description: ''
        type: string
      elected:
        description: ''
        type: boolean
      marathon_config:
        $ref: '#/definitions/MarathonConfig'
      zookeeper_config:
        $ref: '#/definitions/ZooKeeperConfig'
      http_config:
        $ref: '#/definitions/HttpConfig'
      leader:
        description: ''
        type: string
      frameworkId:
        description: ''
        type: string
    required:
    - name
    - version
    - buildref
    - elected
    - marathon_config
    - zookeeper_config
    - http_config
  MarathonConfig:
    title: MarathonConfig
    type: object
    properties:
      features:
        description: ''
        type: array
        items:
          type: string
      task_lost_expunge_initial_delay:
        description: ''
        type: integer
        format: int64
      task_lost_expunge_interval:
        description: ''
        type: integer
        format: int64
      access_control_allow_origin:
        description: ''
        type: array
        items:
          type: string
      checkpoint:
        description: ''
        type: boolean
      decline_offer_duration:
        description: ''
        type: integer
        format: int64
      default_network_name:
        description: ''
        type: string
      env_vars_prefix:
        description: ''
        type: string
      executor:
        description: ''
        type: string
      failover_timeout:
        description: ''
        type: integer
        format: int64
      framework_name:
        description: ''
        type: string
      ha:
        description: ''
        type: boolean
      hostname:
        description: ''
        type: string
      launch_token:
        description: ''
        type: integer
        format: int32
      launch_token_refresh_interval:
        description: ''
        type: integer
        format: int64
      leader_proxy_connection_timeout_ms:
        description: ''
        type: integer
        format: int32
      leader_proxy_read_timeout_ms:
        description: ''
        type: integer
        format: int32
      local_port_max:
        description: ''
        type: integer
        format: int32
      local_port_min:
        description: ''
        type: integer
        format: int32
      master:
        description: ''
        type: string
      max_instances_per_offer:
        description: ''
        type: integer
        format: int32
      mesos_bridge_name:
        description: ''
        type: string
      mesos_heartbeat_failure_threshold:
        description: ''
        type: integer
        format: int32
      mesos_heartbeat_interval:
        description: ''
        type: integer
        format: int64
      mesos_leader_ui_url:
        description: ''
        type: string
      mesos_role:
        description: ''
        type: string
      mesos_user:
        description: ''
        type: string
      min_revive_offers_interval:
        description: ''
        type: integer
        format: int64
      offer_matching_timeout:
        description: ''
        type: integer
        format: int64
      on_elected_prepare_timeout:
        description: ''
        type: integer
        format: int64
      reconciliation_initial_delay:
        description: ''
        type: integer
        format: int64
      reconciliation_interval:
        description: ''
        type: integer
        format: int64
      revive_offers_for_new_apps:
        description: ''
        type: boolean
      revive_offers_repetitions:
        description: ''
        type: integer
        format: int32
      scale_apps_initial_delay:
        description: ''
        type: integer
        format: int64
      scale_apps_interval:
        description: ''
        type: integer
        format: int64
      store_cache:
        description: ''
        type: boolean
      task_launch_confirm_timeout:
        description: ''
        type: integer
        format: int64
      task_launch_timeout:
        description: ''
        type: integer
        format: int64
      task_reservation_timeout:
        description: ''
        type: integer
        format: int64
      webui_url:
        description: ''
        type: string
    required:
    - features
    - task_lost_expunge_initial_delay
    - task_lost_expunge_interval
  ZooKeeperConfig:
    title: ZooKeeperConfig
    type: object
    properties:
      zk:
        description: ''
        type: string
      zk_connection_timeout:
        description: ''
        type: integer
        format: int64
      zk_max_versions:
        description: ''
        type: integer
        format: int32
      zk_session_timeout:
        description: ''
        type: integer
        format: int64
      zk_timeout:
        description: ''
        type: integer
        format: int64
      zk_compression:
        description: ''
        type: boolean
      zk_compression_threshold:
        description: ''
        type: integer
        format: int64
      zk_max_node_size:
        description: ''
        type: integer
        format: int64
    required:
    - zk
    - zk_connection_timeout
    - zk_max_versions
    - zk_session_timeout
    - zk_timeout
  HttpConfig:
    title: HttpConfig
    type: object
    properties:
      http_port:
        description: ''
        type: integer
        format: int32
      https_port:
        description: ''
        type: integer
        format: int32
    required:
    - http_port
    - https_port
  LeaderInfo:
    title: LeaderInfo
    example:
      leader: marathon.globalcorp.com:8080
    type: object
    properties:
      leader:
        description: ''
        type: string
    required:
    - leader
  Message:
    title: Message
    example:
      message: There is no leader
    type: object
    properties:
      message:
        description: ''
        type: string
    required:
    - message
  Queue:
    title: Queue
    example:
      queue:
      - app:
          id: /tools/datadog-agent
          instances: 5
          cpus: 1
          mem: 512
          disk: 0
          constraints:
          - - hostname
            - UNIQUE
          ports:
          - 10018
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            docker:
              image: datadog/docker-dd-agent:latest
              network: HOST
              privileged: true
              forcePullImage: false
          upgradeStrategy:
            minimumHealthCapacity: 0.5
            maximumOverCapacity: 0
          version: 2015-08-26T22:33:24.2250000Z
          versionInfo:
            lastScalingAt: 2015-08-26T22:33:24.2250000Z
            lastConfigChangeAt: 2015-05-19T13:59:18.8990000Z
        count: 1
        delay:
          timeLeftSeconds: 0
          overdue: true
        since: 2016-02-28T16:41:41.0900000Z
        processedOffersSummary:
          processedOffersCount: 123
          unusedOffersCount: 0
      - app:
          id: /foo
          user: root
          env:
            MASTER: zk://172.16.0.12:2181,172.16.0.13:2181,172.16.0.14:2181/mesos
          instances: 1
          cpus: 0.5
          mem: 128
          disk: 0
          executor: //cmd
          constraints:
          - - hostname
            - UNIQUE
          uris:
          - http://www.mesosphere.io/index.html
          ports:
          - 10010
          requirePorts: false
          backoffSeconds: 1
          backoffFactor: 1.1499999999999999
          maxLaunchDelaySeconds: 3600
          container:
            type: DOCKER
            docker:
              image: thomasr/dispatch
              network: HOST
              privileged: false
              forcePullImage: false
          upgradeStrategy:
            minimumHealthCapacity: 1
            maximumOverCapacity: 1
          version: 2015-09-30T09:09:17.6140000Z
          versionInfo:
            lastScalingAt: 2015-09-30T09:09:17.6140000Z
            lastConfigChangeAt: 2015-09-30T09:09:17.6140000Z
        count: 2
        delay:
          timeLeftSeconds: 0
          overdue: true
        since: 2016-02-28T16:41:41.0900000Z
        processedOffersSummary:
          processedOffersCount: 123
          unusedOffersCount: 123
          lastUnusedOfferAt: 2016-02-28T16:41:41.0900000Z
          lastUsedOfferAt: 2016-02-28T16:41:41.0900000Z
          rejectSummaryLastOffers:
          - reason: UnfulfilledRole
            declined: 0
            processed: 123
          - reason: UnfulfilledConstraint
            declined: 0
            processed: 123
          - reason: NoCorrespondingReservationFound
            declined: 0
            processed: 123
          - reason: InsufficientCpus
            declined: 75
            processed: 123
          - reason: InsufficientMemory
            declined: 15
            processed: 48
          - reason: InsufficientDisk
            declined: 10
            processed: 33
          - reason: InsufficientGpus
            declined: 0
            processed: 23
          - reason: InsufficientGpus
            declined: 0
            processed: 23
          rejectSummaryLaunchAttempt:
          - reason: UnfulfilledRole
            declined: 0
            processed: 246
          - reason: UnfulfilledConstraint
            declined: 0
            processed: 246
          - reason: NoCorrespondingReservationFound
            declined: 0
            processed: 246
          - reason: InsufficientCpus
            declined: 150
            processed: 246
          - reason: InsufficientMemory
            declined: 30
            processed: 96
          - reason: InsufficientDisk
            declined: 20
            processed: 66
          - reason: InsufficientGpus
            declined: 0
            processed: 46
          - reason: InsufficientGpus
            declined: 0
            processed: 46
        lastUnusedOffers:
        - offer:
            id: offer_123
            agentId: slave_123
            hostname: 1.2.3.4
            resources:
            - name: cpus
              scalar: 23
              ranges:
              - begin: 1
                end: 5
              set:
              - a
              - b
              role: '*'
            attributes:
            - name: foo
              scalar: 23
              ranges:
              - begin: 1
                end: 5
              set:
              - a
              - b
          timestamp: 2016-02-28T16:41:41.0900000Z
          reason:
          - InsufficientMemory
    type: object
    properties:
      queue:
        description: ''
        type: array
        items:
          type: object
  Metrics:
    title: Metrics
    type: object
    properties:
      start:
        description: ''
        type: string
        format: date-time
      end:
        description: ''
        type: string
        format: date-time
      histograms:
        description: ''
        type: object
        additionalProperties:
          $ref: '#/definitions/Histogram'
      counters:
        description: ''
        type: object
        additionalProperties:
          $ref: '#/definitions/Counter'
      gauges:
        description: ''
        type: object
        additionalProperties:
          $ref: '#/definitions/Histogram'
      min-max-counters:
        description: ''
        type: object
        additionalProperties:
          $ref: '#/definitions/Histogram'
    required:
    - start
    - end
    - histograms
    - counters
    - gauges
    - min-max-counters
  Histogram:
    title: Histogram
    type: object
    properties:
      count:
        description: The number of samples
        type: integer
        format: int64
      min:
        description: The minimum value
        type: integer
        format: int64
      max:
        description: The maximum value
        type: integer
        format: int64
      p50:
        description: The 50th percentile median value
        type: integer
        format: int64
      p75:
        description: The 75th percentile median value
        type: integer
        format: int64
      p98:
        description: The 98th percentile median value
        type: integer
        format: int64
      p99:
        description: The 99th percentile median value
        type: integer
        format: int64
      p999:
        description: The 999th percentile median value
        type: integer
        format: int64
      mean:
        description: The average of all samples
        type: number
        format: double
      tags:
        description: metadata about the metric
        type: object
        additionalProperties:
          type: string
      unit:
        description: The unit of measurement
        type: object
    required:
    - count
    - min
    - max
    - p50
    - p75
    - p98
    - p99
    - p999
    - mean
    - tags
    - unit
  Counter:
    title: Counter
    type: object
    properties:
      count:
        description: The current value
        type: integer
        format: int64
      tags:
        description: metadata about the metric
        type: object
        additionalProperties:
          type: string
      unit:
        description: The unit of measurement
        type: object
    required:
    - count
    - tags
    - unit
  LoggerChange:
    title: LoggerChange
    type: object
    properties:
      level:
        $ref: '#/definitions/LevelEnum'
      logger:
        description: The full qualified name of the logger.
        type: string
      durationSeconds:
        description: >-
          The number of seconds to set this logging level.

          The current logging level is reset after the duration.

          If this parameter is not defined, the change to the logging level is permanent
        type: integer
        format: int32
    required:
    - level
    - logger
  LevelEnum:
    title: levelEnum
    example: trace
    type: string
    enum:
    - trace
    - debug
    - info
    - warn
    - error
