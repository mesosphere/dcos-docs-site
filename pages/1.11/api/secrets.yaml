swagger: '3.0.0'
servers:
  - url: /secrets/v1
info:
  version: 1.0.0
  title: ' DC/OS Secrets API'
tags:
  - name: backend
    description: Secret stores related API endpoints
  - name: secrets
    description: Secrets manipulation
paths:
  /ping:
    get:
      tags:
        - backend
      summary: Return 'pong' if secrets service is up.
      description: Return 'pong' if secrets service is up.
      responses:
        200:
          description: Response body contains pong response.
        404:
          description: Store not found.
        503:
          description: Service Unavailable.
  /ping/backends/{backend}:
    get:
      tags:
        - backend
      summary: Return 'pong' if backend service is up.
      description: Return 'pong' if backend service is up.
      parameters:
        - name: backend
          description: The backend store.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response body contains pong response.
        404:
          description: Store not found.
        503:
          description: Service Unavailable.
  /ping/backends/all:
    get:
      tags:
        - backend
      summary: Return 'pong' if all backend services are up.
      description: Return 'pong' if all backend services are up.
      responses:
        200:
          description: Response body contains pong response.
        404:
          description: No store found.
        503:
          description: Services Unavailable.
  /init/{store}:
    get:
      tags:
        - backend
      summary: Return the initialization status of a store.
      description: Return the initialization status of a store.
      parameters:
        - name: store
          description: The backend store from which to get the secret.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response body contains initialization response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitResponse'
        403:
          description: Forbidden.
        404:
          description: Store not found.
    put:
      tags:
        - backend
      summary: Initializes a store.
      description: Initializes a store.
      parameters:
        - name: store
          description: The backend to store the secret in.
          in: path
          required: true
          schema:
      responses:
        200:
          description: Store initialized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitResponse'
        403:
          description: Forbidden.
        404:
          description: Store not found.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitRequest'
        description: The initialization request.
        required: true
  /seal-status/{store}:
    get:
      tags:
        - backend
      summary: Returns the seal status of the store.
      description: Returns the seal status of the store.
      parameters:
        - name: store
          description: The backend store from which to get the secret.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response body contains initialization response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SealStatus'
        403:
          description: Forbidden.
        404:
          description: Store not found.
  /unseal/{store}:
    put:
      tags:
        - backend
      summary: Sends a decrypted unseal key to progress the unsealing of the store.
      description: Sends a decrypted unseal key to progress the unsealing of the store.
      parameters:
        - name: store
          description: The backend to store the secret in.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Unseal progressed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SealStatus'
        403:
          description: Forbidden.
        404:
          description: Store not found.
      requestBody:
        $ref: '#/components/requestBodies/UnsealRequest'
  /auto-unseal/{store}:
    put:
      tags:
        - backend
      summary: Unseal give secrets store using bootstraped PGP keys.
      description: 'Triggers automatic unsealing of given secrets store, using
        the PGP keys that were created during the bootstrap process.'
      parameters:
        - name: store
          description: The backend to store the secret in.
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Given secrets-store has been auto-unsealed
        403:
          description: Forbidden.
        404:
          description: Store not found.

  /seal/{store}:
    put:
      tags:
        - backend
      summary: Seals the store.
      description: Seals the store.
      parameters:
        - name: store
          description: The backend to store the secret in.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Seal processed.
        403:
          description: Forbidden.
        404:
          description: Store not found.
  /secret/{store}/{path/to/secret}:
    get:
      tags:
        - secrets
      summary: Read or list a secret from the store by its path.
      description: Read or list a secret from the store by its path.
      parameters:
        - name: store
          description: The backend store from which to get the secret.
          in: path
          required: true
          schema:
            type: string
        - name: list
          in: query
          description: |
            If set to true, list only secret keys.
          schema:
            type: string
        - name: path/to/secret
          description: The path to store the secret in.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response body contains secret authorized content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
            application/octet-stream:
              description: Binary data of secret.
              schema:
                type: string
                format: binary
        400:
          description: Unsupported Accept header.
        403:
          description: Forbidden.
        404:
          description: Secret not found.
    put:
      tags:
        - secrets
      summary: Create a secret in the store at the path.
      description: Create a secret in the store at the path.
      parameters:
        - name: store
          description: The backend to store the secret in.
          in: path
          required: true
          schema:
            type: string
        - name: path/to/secret
          description: The path to store the secret in.
          in: path
          required: true
          schema:
            type: string
      responses:
        201:
          description: Secret created.
        400:
          description: Unsupported Content-Type header.
        403:
          description: Forbidden.
        409:
          description: Secret already exists.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
          application/octet-stream:
            schema:
              type: string
              format: binary
        description: Secret value.
        required: true
    patch:
      tags:
        - secrets
      summary: Update secret.
      description: Update existing secret in the specified store.
      parameters:
        - name: store
          description: The backend to store the secret in.
          in: path
          required: true
          schema:
            type: string
        - name: path/to/secret
          description: The path for the secret to update.
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Secret updated.
        403:
          description: Forbidden.
        404:
          description: Secret not found.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Secret value.
        required: true
    delete:
      tags:
        - secrets
      summary: Delete a secret.
      description: Delete a secret.
      parameters:
        - name: store
          description: The backend to delete the secret from.
          in: path
          required: true
          schema:
            type: string
        - name: path/to/secret
          description: The path to the secret to delete.
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        403:
          description: Forbidden.
        404:
          description: Secret not found.
  /store:
    get:
      tags:
        - backend
      summary: List all secret stores.
      description: List all secret stores.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/Backend'
        403:
          description: Forbidden.
  /store/{backend}:
    get:
      tags:
        - backend
      summary: Retrieve information for the named backend.
      description: Retrieve information for the named backend.
      parameters:
        - name: backend
          description: Backend name.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response body contains the backend.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backend'
        403:
          description: Forbidden.
        404:
          description: Backend not found.
    put:
      tags:
        - backend
      summary: Create and initialize a secret store backend.
      description: Create and initialize a secret store backend.
      parameters:
        - name: backend
          description: Name for the store backend.
          in: path
          required: true
          schema:
            type: string
      responses:
        201:
          description: Secret store created.
        403:
          description: Forbidden.
        404:
          description: Backend type/driver not found.
        409:
          description: Secret store already exists with this backend.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backend'
        description: Driver to use for the backend store. ex. vault
        required: true
    delete:
      tags:
        - backend
      summary: Delete a secret store.
      description: Delete a secret store.
      parameters:
        - name: backend
          description: Backend to delete.
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        403:
          description: Forbidden.
        404:
          description: Backend not found.
components:
  schemas:
    InitRequest:
      type: object
      properties:
        shares:
          type: integer
        threshold:
          type: integer
        pgp_keys:
          type: array
          items:
            type: string
      additionalProperties: false
    InitResponse:
      type: object
      properties:
        initialized:
          type: boolean
        keys:
          type: array
          items:
            type: string
        pgp_fingerprints:
          type: array
          items:
            type: string
        recovery_keys:
          type: array
          items:
            type: string
        root_token:
          type: string
      additionalProperties: false
    SealStatus:
      type: object
      properties:
        sealed:
          type: boolean
        shares:
          type: integer
        threshold:
          type: integer
        progress:
          type: integer
      additionalProperties: false
    UnsealRequest:
      type: object
      properties:
        key:
          type: string
      additionalProperties: false
    Secret:
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Backend:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        driver:
          type: string
        initialized:
          type: boolean
        sealed:
          type: boolean
      additionalProperties: false
  requestBodies:
    UnsealRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsealRequest'
      description: The unseal request.
      required: true
