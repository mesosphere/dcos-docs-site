## Service Settings

### Placement Constraints

Placement constraints allow you to customize where a service is deployed in the DC/OS cluster. Placement constraints  use the [Marathon operators](http://mesosphere.github.io/marathon/docs/constraints.html) syntax. For example, `[["hostname", "UNIQUE"]]` ensures that at most one pod instance is deployed per agent.

A common task is to specify a list of whitelisted systems to deploy to. To achieve this, use the following syntax for the placement constraint:
```
[["hostname", "LIKE", "10.0.0.159|10.0.1.202|10.0.3.3"]]
```

**Note**: Be sure to include excess capacity in such a scenario so that if one of the whitelisted systems goes down, there is still enough capacity to repair your service.

#### Updating Placement Constraints

Clusters change, and as such so will your placement constraints. However, already running service pods will _not_ by affected by changes in placement constraints. This is because altering a placement constraint might invalidate the current placement of a running pod, and the pod will not be relocated automatically as doing so is a destructive action. We recommend using the following procedure to update the placement constraints of a pod:
- Update the placement constraint definition in the service.
- For each affected pod, _one at a time_, perform a `pod replace`. This will (destructively) move the pod to be in accordance with the new placement constraints.

### Zones

**Requires:** DC/OS 1.11 Enterprise or later.

Placement constraints can be applied to DC/OS zones by referring to the `@zone` key. For example, one could spread pods across a minimum of 3 different zones by including this constraint:
```
[["@zone", "GROUP_BY", "3"]]
```

**Caution:** A service installed without a zone constraint cannot be updated to have one, and a service installed with a zone constraint may not have it removed.

### Virtual networks

DC/OS {{ model.techName }} supports deployment on [virtual networks](/1.10/networking/virtual-networks/) on DC/OS (including the `dcos` overlay network), allowing each container (task) to have its own IP address and not use port resources on the agent machines. This can be specified by passing the following configuration during installation:

```json
{
  "service": {
    "virtual_network_enabled": true
  }
}
```

**Note:** Once the service is deployed on a virtual network, it cannot be updated to use the host network.
