<!-- This file is usually found in the Configuration section. -->


The default DC/OS {{ model.techName }} installation provides reasonable defaults for trying out the service, but may not be sufficient for production use. You may require a different configuration depending on the context of the deployment.

## Installing with Custom Configuration

The following are some examples of how to customize the installation of your {{ model.techName }} instance.

In each case, you would create a new {{ model.techName }} instance using the custom configuration as follows:

```bash
$ dcos package install {{ model.packageName }} --options=sample-{{ model.serviceName }}.json
```

We recommend that you store your custom configuration in source control.

### Installing multiple instances

By default, the {{ model.techName }} service is installed with a service name of `{{ model.serviceName }}`. You may specify a different name using a custom service configuration as follows:

```json
{
  "service": {
    "name": "{{ model.serviceName }}-other"
  }
}
```

When the above JSON configuration is passed to the `package install {{ model.packageName }}` command via the `--options` argument, the new service will use the name specified in that JSON configuration:

```bash
$ dcos package install {{ model.packageName }} --options={{ model.serviceName }}-other.json
```

Multiple instances of {{ model.techName }} may be installed into your DC/OS cluster by customizing the name of each instance. For example, you might have one instance of {{ model.techName }} named `{{ model.serviceName }}-staging` and another named `{{ model.serviceName }}-prod`, each with its own custom configuration.

After specifying a custom name for your instance, it can be reached using `dcos {{ model.packageName }}` CLI commands or directly over HTTP as described [below](#addressing-named-instances).

<p class="message--warning"><strong>WARNING: </strong>The service name <strong>cannot</strong> be changed after initial install. Changing the service name would require installing a new instance of the service against the new name, then copying over any data as necessary to the new instance.</p>




### Installing into folders

In DC/OS 1.10 and later, services may be installed into folders by specifying a slash-delimited service name. For example:

```json
{
  "service": {
    "name": "/foldered/path/to/{{ model.serviceName }}"
  }
}
```

The above example will install the service under a path of `foldered` => `path` => `to` => `{{ model.serviceName }}`. It can then be reached using `dcos {{ model.packageName }}` CLI commands or directly over HTTP as described [below](#addressing-named-instances).

<p class="message--warning"><strong>WARNING: </strong>The service folder location <strong>cannot</strong> be changed after initial install. Changing the folder location would require installing a new instance of the service against the new name, then copying over any data as necessary to the new instance.</p>

### Addressing named instances

After you've installed the service under a custom name or under a folder, it may be accessed from all `dcos {{ model.packageName }}` CLI commands using the `--name` argument. By default, the `--name` value defaults to the name of the package, or `{{ model.packageName }}`.

For example, if you had an instance named `{{ model.serviceName }}-dev`, the following command would invoke a `pod list` command against it:

```bash
$ dcos {{ model.packageName }} --name={{ model.serviceName }}-dev pod list
```

The same query would be over HTTP as follows:

```bash
$ curl -H "Authorization:token=$auth_token" <dcos_url>/service/{{ model.serviceName }}-dev/v1/pod
```

Likewise, if you had an instance in a folder like `/foldered/path/to/{{ model.serviceName }}`, the following command would invoke a `pod list` command against it:

```bash
$ dcos {{ model.packageName }} --name=/foldered/path/to/{{ model.serviceName }} pod list
```

Similarly, it could be queried directly over HTTP as follows:

```bash
$ curl -H "Authorization:token=$auth_token" <dcos_url>/service/foldered/path/to/{{ model.serviceName }}-dev/v1/pod
```

You may add a `-v` (verbose) argument to any `dcos {{ model.packageName }}` command to see the underlying HTTP queries that are being made. This can be a useful tool to see where the CLI is getting its information. In practice, `dcos {{ model.packageName }}` commands are a thin wrapper around an HTTP interface provided by the DC/OS {{ model.techName }} Service itself.

### Integration with DC/OS access controls

In Enterprise DC/OS, DC/OS access controls can be used to restrict access to your service. To give a non-superuser complete access to a service, grant them the following list of permissions:
```
dcos:adminrouter:service:marathon full
dcos:service:marathon:marathon:<service-name> full
dcos:adminrouter:ops:mesos full
dcos:adminrouter:ops:slave full
```

Where `<service-name>` is your full service name, including the folder if it is installed in one.
