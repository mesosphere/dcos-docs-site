
# Install a basic cluster

To start a basic test cluster {{ model.install.nodeDescription }}, run the following command on the DC/OS CLI.


```bash
$ dcos package install {{ model.packageName }}
```

This command creates a new instance with the default name `{{ model.serviceName }}`. Two instances cannot share the same name, so installing additional instances beyond the default instance requires customizing the `name` at install time for each additional instance.

All `dcos {{ model.packageName }}` CLI commands have a `--name` argument allowing you to specify which instance to query. If you do not specify a service name, the CLI assumes a default value matching the package name, `{{ model.packageName }}`. The default value for `--name` can be customized via the DC/OS CLI configuration:

```bash
$ dcos {{ model.packageName }} --name={{ model.serviceName }} <cmd>
```

Alternatively, you can [install from the DC/OS web interface](/latest/deploying-services/install/#installing-a-service-using-the-gui). If you install {{ model.techName }} from the DC/OS web interface, the `dcos {{ model.packageName }}` CLI commands are not automatically installed to your workstation. They may be manually installed using the DC/OS CLI:

```bash
dcos package install {{ model.packageName }} --cli
```

After running the `package install` command, the service will begin installing.

# Enterprise DC/OS installation
Depending on the [security mode](/latest/security/ent/#security-modes) of the Enterprise DC/OS cluster, Enterprise DC/OS users may need to create a custom .json file and use it to install {{ model.techName }}.

## <a name="create-json"></a>Create a Configuration File
Create a custom configuration file that will be used to install {{ model.techName }}, and save it as `config.json`. Specify the service account (`<service_account_id>`) and a secret path (`{{ model.packageName }}/<secret-name>`) .
```json
{
  "service": {
    "service_account": "<service_account_id>",
    "service_account_secret": "{{ model.packageName }}/<secret-name>"
  }
}
```
## <a name="install-custom"></a>Installing with a custom config file
Use the custom configuration file you just created to install {{ model.techName }} with this command:

```bash
dcos package install --options=config.json {{ model.packageName }}
```

# Service Deployment

To monitor the deployment of your test instance, install the package cli (see command above) and run the command:

```bash
dcos {{ model.packageName }} plan show deploy
```

Once the deploy plan has a status of `Complete`, the service is fully deployed.

## Service Discovery

To connect a client, query the service for its endpoints.
```bash
dcos {{ model.packageName }} endpoints
```

Select an endpoint from the list to see the available connections.
```bash
dcos {{ model.packageName }} endpoints <endpoint>
```

## Working with the Service

Using the endpoint information, you can connect a client to the service from within the DC/OS cluster (for example, a Marathon app running a client application). See the other sections of the documentation for more details on configuration, operation, and service capabilities.
