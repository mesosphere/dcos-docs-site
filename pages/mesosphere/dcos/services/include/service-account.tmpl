# <a name="provision-a-service-account"></a>Provisioning a service account

This section describes how to configure DC/OS access for {{ model.techName }}. Depending on your [security mode](/mesosphere/dcos/latest/security/ent/#security-modes/), {{ model.techName }} may require [service authentication](/mesosphere/dcos/latest/security/ent/service-auth/) for access to DC/OS.

A service like {{ model.techName }} typically performs certain privileged actions on the cluster, which might require authenticating with the cluster. A service account associated with the service is used to authenticate with the DC/OS cluster. It is recommended to provisioning a separate service account for each service that would perform privileged operations. Service accounts authenticate using public-private keypair. The public key is used to create the service account in the cluster, while the corresponding private key is stored in the [secret store](/mesosphere/dcos/latest/security/ent/secrets/). The service account and the service account secret are passed to the service as install time options.

| Security mode | Service Account |
|---------------|-----------------------|
| Disabled      | Not available   |
| Permissive    | Optional   |
| Strict        | Required |

If you install a service in permissive mode and do not specify a service account, Metronome and Marathon will act as if requests made by this service are made by an account with the [superuser permission](/mesosphere/dcos/latest/security/ent/perms-reference/#superuser).

## Prerequisites:

- [DC/OS CLI installed](/mesosphere/dcos/latest/cli/install/) and be logged in as a superuser.
- [Enterprise DC/OS CLI 0.4.14 or later installed](/mesosphere/dcos/latest/cli/enterprise-cli/#ent-cli-install).

# <a name="create-a-keypair"></a>Create a Key Pair
In this step, a 2048-bit RSA public-private key pair is created using the Enterprise DC/OS CLI.

Create a public-private key pair and save each value into a separate file within the current directory.

```bash
dcos security org service-accounts keypair <private-key>.pem <public-key>.pem
```

<p class="message--note"><strong>NOTE: </strong>You can use the <a href="https://docs.d2iq.com/mesosphere/dcos/latest/security/ent/secrets/">DC/OS Secret Store</a> to secure the key pair.</p>


# <a name="create-a-service-account"></a>Create a Service Account

From a terminal prompt, create a new service account (for example, `{{ model.serviceName }}`) containing the public key (`<your-public-key>.pem`).

```bash
dcos security org service-accounts create -p <your-public-key>.pem -d <description> {{ model.serviceName }}
```

You can verify your new service account using the following command.

```bash
dcos security org service-accounts show {{ model.serviceName }}
```

# <a name="create-an-sa-secret"></a>Create a Secret
Create a secret (`{{ model.packageName }}/<secret-name>`) with your service account and private key specified (`<private-key>.pem`).

<p class="message--note"><strong>NOTE: </strong>If you store your secret in a path that matches the service name, for example, service name and secret path are both {{ model.serviceName }}, then only the service named {{ model.serviceName }} can access it.</p>

```bash
dcos security secrets create-sa-secret <private-key>.pem <service-account-id> {{ model.serviceName }}/<secret-name>
```

<p class="message--note"><strong>NOTE: </strong>If you are running, now EOL-ed, DC/OS 1.11 or older you would need to add <tt>--strict</tt> to the above command. For example, <tt>dcos security secrets --strict create-sa-secret <private-key>.pem <service-account-id> {{ model.serviceName }}/sa-secret</tt> .</p>

You can list the secrets with this command:

```bash
dcos security secrets list /
```
