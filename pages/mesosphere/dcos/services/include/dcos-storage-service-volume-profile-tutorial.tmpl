DC/OS Storage Service (DSS) is a service that manages volumes, volume profiles, volume providers, and storage devices in the DC/OS cluster. The DSS serves as the brain of the storage support system by collecting storage related information from various components in the cluster, keeping track of their states, and acting on user requests. For detailed information on DSS, please go through it's documentation [here](https://docs.d2iq.com/mesosphere/dcos/services/storage/)

Here is a step-by-step procedure about how to use DSS volumes in conjunction to {{ model.techName }} service:

## Pre-requisites:

- Terraform.
- DC/OS Enterprise CLI.

## Getting started

1. Use the [DC/OS Universal Installer](/mesosphere/dcos/latest/installing/evaluation/) to deploy a cluster with at least 3 private agent nodes and an [extra volume on each of these nodes](../../../storage/1.0.0/install/provision-extra-volumes). Each volume needs to be larger than 10GB.

    ```hcl
    module "dcos" {
        source  = "dcos-terraform/dcos/aws"
        version = "~> 0.1.0"

        # ...

        num_private_agents = "3"
        dcos_variant = "ee"
        dcos_security = "permissive"

        private_agents_extra_volumes = [
            {
            type = "gp2"
            device_name = "/dev/xvdi"
            }
        ]
    }
    ```

2. Get the node ID of 3 agent nodes.

    ```bash
    dcos node list
    ```
    ```
        HOSTNAME          IP         PUBLIC IP(S)                     ID                          TYPE         REGION       ZONE
    172.16.1.181   172.16.1.181   3.89.142.10     46d008de-a6f7-4628-bb9e-31855b553737-S3  agent (public)   us-east-1  us-east-1a
    172.16.1.201   172.16.1.201   18.234.186.9    46d008de-a6f7-4628-bb9e-31855b553737-S2  agent            us-east-1  us-east-1a
    172.16.18.149  172.16.18.149  18.234.65.75    46d008de-a6f7-4628-bb9e-31855b553737-S1  agent            us-east-1  us-east-1b
    172.16.34.203  172.16.34.203  54.86.126.235   46d008de-a6f7-4628-bb9e-31855b553737-S0  agent            us-east-1  us-east-1c
    master.mesos.  172.16.12.234  52.206.129.215  46d008de-a6f7-4628-bb9e-31855b553737     master (leader)  us-east-1  us-east-1a
    ```

3. Install the DC/OS Storage Service

    This assumes that the DSS `.dcos` package has already been added to the [package registry](../../install/package-registry-based).

    ```bash
    dcos package install storage
    ```

4. Create the `devices` and `lvm` volume providers on 3 agent nodes.

    ```bash
    cat <<EOF | dcos storage provider create
    {
        "name": "devices-S0",
        "description": "Devices provider",
        "spec": {
            "plugin": {
                "name": "devices",
                "config-version": "latest"
            },
            "node": "46d008de-a6f7-4628-bb9e-31855b553737-S0",
            "plugin-configuration": {}
        }
    }
    EOF
    cat <<EOF | dcos storage provider create
    {
        "name": "devices-S1",
        "description": "Devices provider",
        "spec": {
            "plugin": {
                "name": "devices",
                "config-version": "latest"
            },
            "node": "46d008de-a6f7-4628-bb9e-31855b553737-S1",
            "plugin-configuration": {}
        }
    }
    EOF
    cat <<EOF | dcos storage provider create
    {
        "name": "devices-S2",
        "description": "Devices provider",
        "spec": {
            "plugin": {
                "name": "devices",
                "config-version": "latest"
            },
            "node": "46d008de-a6f7-4628-bb9e-31855b553737-S2",
            "plugin-configuration": {}
        }
    }
    EOF
    ```

    Because we added the extra volume as device `xvdi` on each agent, we
    create `lvm` volume providers using this device.

    ```bash
    cat <<EOF | dcos storage provider create
    {
        "name": "volume-group-S0",
        "description": "The primary volume group",
        "spec": {
            "plugin": {
                "name": "lvm",
                "config-version": "latest"
            },
            "node": "46d008de-a6f7-4628-bb9e-31855b553737-S0",
            "plugin-configuration": {
                "devices": ["xvdi"]
            },
            "labels": {"rotational": "false"}
        }
    }
    EOF
    cat <<EOF | dcos storage provider create
    {
        "name": "volume-group-S1",
        "description": "The primary volume group",
        "spec": {
            "plugin": {
                "name": "lvm",
                "config-version": "latest"
            },
            "node": "46d008de-a6f7-4628-bb9e-31855b553737-S1",
            "plugin-configuration": {
                "devices": ["xvdi"]
            },
            "labels": {"rotational": "false"}
        }
    }
    EOF
    cat <<EOF | dcos storage provider create
    {
        "name": "volume-group-S2",
        "description": "The primary volume group",
        "spec": {
            "plugin": {
                "name": "lvm",
                "config-version": "latest"
            },
            "node": "46d008de-a6f7-4628-bb9e-31855b553737-S2",
            "plugin-configuration": {
                "devices": ["xvdi"]
            },
            "labels": {"rotational": "false"}
        }
    }
    EOF
    ```

    If the creation is successful, you can view the newly created volume providers using the `list` command.

    ```bash
    dcos storage provider list
    ```
    ```
    PLUGIN   NAME             NODE                                     STATE
    devices  devices-S0       46d008de-a6f7-4628-bb9e-31855b553737-S0  ONLINE
    devices  devices-S1       46d008de-a6f7-4628-bb9e-31855b553737-S1  ONLINE
    devices  devices-S2       46d008de-a6f7-4628-bb9e-31855b553737-S2  ONLINE
    lvm      volume-group-S0  46d008de-a6f7-4628-bb9e-31855b553737-S0  ONLINE
    lvm      volume-group-S1  46d008de-a6f7-4628-bb9e-31855b553737-S1  ONLINE
    lvm      volume-group-S2  46d008de-a6f7-4628-bb9e-31855b553737-S2  ONLINE
    ```

5. Create a volume profile `{{ model.serviceName }}` for mount volumes that will match the created `lvm` volume providers.
Volumes that have profile `{{ model.serviceName }}` will be formatted with the `xfs` filesystem, as specified in the profile definition.

    ```bash
    cat <<EOF | dcos storage profile create
    {
        "name": "{{ model.serviceName }}",
        "description": "{{ model.techName }} disks",
        "spec": {
            "provider-selector": {
                "plugin": "lvm",
                "matches": {
                    "labels": {
                        "rotational": "false"
                    }
                }
            },
            "mount": {
                "filesystem": "xfs"
            }
        }
    }
    EOF
    ```

    If the creation is successful, you can view the newly created profile using the `list` command.

    ```bash
    dcos storage profile list
    ```
    ```
    TYPE  NAME       STATUS
    lvm   {{ model.serviceName }}  ACTIVE
    ```

6. Create three 10240M volumes of profile `{{ model.serviceName }}`, 1 per agent.

    ```bash
    dcos storage volume create --name {{ model.serviceName }}-volume-S0 --capacity 10240M --profile {{ model.serviceName }} --node 46d008de-a6f7-4628-bb9e-31855b553737-S0
    dcos storage volume create --name {{ model.serviceName }}-volume-S1 --capacity 10240M --profile {{ model.serviceName }} --node 46d008de-a6f7-4628-bb9e-31855b553737-S1
    dcos storage volume create --name {{ model.serviceName }}-volume-S2 --capacity 10240M --profile {{ model.serviceName }} --node 46d008de-a6f7-4628-bb9e-31855b553737-S2
    ```

    If the creation is successful, you can view the newly created volumes using the `list` command.

    ```bash
    dcos storage volume list
    ```
    ```
    NODE                                     NAME                 SIZE    STATUS
    46d008de-a6f7-4628-bb9e-31855b553737-S0  {{ model.serviceName }}-volume-S0  10240M  ONLINE
    46d008de-a6f7-4628-bb9e-31855b553737-S1  {{ model.serviceName }}-volume-S1  10240M  ONLINE
    46d008de-a6f7-4628-bb9e-31855b553737-S2  {{ model.serviceName }}-volume-S2  10240M  ONLINE
    ```

7. Install {{ model.techName }} from the DC/OS Universe.

    {{ model.techName }} is configured to look for `MOUNT` volumes of profile `{{ model.serviceName }}`.

    ```bash
    cat > {{ model.serviceName }}-options.json <<EOF
    {
        "nodes": {
            "volume_profile": "{{ model.serviceName }}",
            "disk_type": "MOUNT"
        }
    }
    EOF
    dcos package install {{ model.serviceName }} --options={{ model.serviceName }}-options.json
    ```

    Once the {{ model.techName }} service is installed, it will start its tasks. After a while,
    its deployment should be completed.

    ```bash
    dcos {{ model.serviceName }} update status
    ```
    ```
    deploy (serial strategy) (COMPLETE)
    ├─ node-0:[init] (COMPLETE)
    ├─ node-0:[server] (COMPLETE)
    ├─ node-1:[server] (COMPLETE)
    └─ node-2:[server] (COMPLETE)
    ```
