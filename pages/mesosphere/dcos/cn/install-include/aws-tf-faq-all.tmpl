以下是使用 Terraform 时常见问题的解答。本文档支持 0.1 和 0.2 版本。

### 目录
- [我可以在哪里查看 terraform 模块的源代码？](#where-can-i-view-the-source-code-for-the-terraform-module)
- [可使用哪些云提供程序？](#which-cloud-providers-are-available-for-use)
- [我可以将哪些变量传递给“便捷包装器”？](#what-variables-can-i-pass-to-the-convenience-wrapper)
- [如何设置 HTTP 代理？](#how-to-set-a-http-proxy)
- [如何使用多个分区？](#how-to-use-multiple-zones)
- [更改或升级 DC/OS 版本](#changing-or-upgrading-dcos-versions)
- [添加附加卷](#adding-additional-volumes)
- [错误：不是有效分域](#error-not-a-valid-region)
- [错误：远程执行超时](#error-remote-exec-timeout)
- [错误：资源已存在](#error-resource-already-exists)
- [错误：引用了未知模块](#error-unknown-module-referenced)
- [错误：验证提供程序凭据](#error-validating-provider-credentials)
- [错误：安装 Kubernetes 时无法获取 IP 地址](#error-failed-to-obtain-the-ip-address-when-installing-kubernetes)
- [错误：IAM 实例配置文件创建](#error-iam-instance-profile-creation)
- [错误：具有该名称的服务器证书已存在。](#error-server-certificate-with-that-name-already-exists)
- [错误：上传服务器证书。](#error-uploading-server-certificate)


## 我可以在哪里查看 terraform 模块的源代码？
有关与 DC/OS Terraform 有关的重要信息，请参见以下内容：

- [Terraform 注册表](https://registry.terraform.io/modules/dcos-terraform)

- [Github 主页](https://github.com/dcos-terraform)

## 可使用哪些云提供程序？
目前我们支持 AWS、Azure 和 GCP。

查看可用的 [云提供程序](https://github.com/dcos-terraform) 列表。

## 我可以将哪些变量传递给“便捷包装器”？
对于每个云提供程序（AWS、GCP、Azure），您可以在“输入”下相关 [Terraform 注册表](https://registry.terraform.io/modules/dcos-terraform) 页面上找到广泛的可能变量列表。

## 如何设置 HTTP 代理？
在企业环境中，出于安全目的，标准做法是通过 http_proxy 汇集所有 http 流量。Universal 安装工具支持带有以下变量的 http_proxy：
`dcos_use_proxy`
`dcos_http_proxy`
`dcos_https_proxy`
`dcos_no_proxy`

这些变量可供您添加到 `main.tf`。有关详细信息，请参阅高级 AWS、GCP、Azure 页面。

## 如何使用多个分区？
在 AWS 和 GCP 的 Universal 安装工具上，默认支持多个分区。要将 DC/OS 群集固定到特定的可用性分区，可以在 `main.tf` 中输入 `availability_zones` 变量。如果没有为 AWS 和 GCP 指定可用性分区，Universal 安装工具将要求并在所有可用性分区上部署。如果高可用性是 DC/OS 群集的优先级，则配置 `availability_zones` 变量至关重要。

## 更改或升级 DC/OS 版本
Terraform 设计用于从容处理配置更改和版本更新。它将确定您要求的变更并相应地采取行动。

- 如果您希望将 DC/OS 版本升级为新版本，只需将 `main.tf` 中的 `dcos_version` 变量改为您所需的版本。然后只需发出 `terraform apply` 使更改生效。

如果您希望更改 DC/OS 群集配置参数，例如更新解析器，只需对 `main.tf` 中所需配置变量进行更改。发出 `terraform apply` 以供安装工具获取更改。Provisioner 将检测配置中的更改并根据需要执行更改。

## 添加附加卷
我们支持使用 `private_agent_extra_volumes` 变量将附加 EBS 卷添加到专用代理节点实例中。您可以指定每个所需卷的大小、类型、IOP 和设备名称。请参阅以下示例，以将 2 个附加卷添加到专用代理节点中：

```hcl
private_agent_extra_volumes = [
    {
      size        = "100"
      type        = "gp2"
      iops        = "3000"
      device_name = "/dev/xvdi"
    },
    {
      size        = "1000"
      type        = ""     # Use AWS default.
      iops        = "0"    # Use AWS default.
      device_name = "/dev/xvdj"
    }
  ]
}
```

## 错误：不是有效分域

```bash
Error: Error applying plan:

1 error(s) occurred:

* module.dcos.provider.aws: Not a valid region:

Terraform does not automatically rollback in the face of errors.
Instead, your Terraform state file has been partially updated with
any resources that successfully completed. Please address the error
above and apply again to incrementally change your infrastructure.
```

您尚未将默认分域正确分配给 AWS 提供程序。Terraform 要求您将默认分域 ENV 设置为先决条件。

只需导出变量：有关详细信息，请参阅“AWS 提供程序”。

```bash
export AWS_DEFAULT_REGION="us-east-1"
```

或者，作为替代方案，您还可以将分域变量设置为所需分域 (`${var.region}`)。

## 错误：远程执行超时
这些模块使用 remote exec over ssh 处理安装和升级。您将需要确保您的密钥已通过 ssh-agent 认证。将密钥添加到 ssh-agent：
```bash
ssh-add /your/private/key
```

## 错误：资源已存在
如果您之前已经丢失了最近部署的状态，或者尝试重新使用另一个部署的相同 `cluster_name` 变量，您将看到“重复资源”错误：

```text
*module.dcos.module.dcos-infrastructure.module.dcos-elb.module.dcos-elb-masters.module.masters.aws_elb.loadbalancer: 1 error(s) occurred:

* aws_elb.loadbalancer: DuplicateLoadBalancerName: Load Balancer named viktors-open-dcos-cluster-master already exists and it is configured with different parameters.
    status code: 400, request id: 15897298-bdf0-11e8-a0c7-c5b9b43286ee
```

您将需要删除现有资源或将当前部署 `cluster_name` 更改为其他内容。


## 错误：引用了未知模块

Universal 安装工具专为简单性而设计。如果您运行 `terraform init` 并遇到此错误消息 `Error: output ____: reference to undefined module “____”`，则可能存在缺失或冲突的文件。

确保没有重复的 Terraform 文件，并且文件夹中存在一个单个 `main.tf` 文件。对此进行验证完后，运行 `terraform init`。这将安装运行 Universal 安装工具所需的所有模块。不需要 `git clone`。

## 错误：验证提供程序凭据
如果您遇到有关验证提供程序凭据或状态码 403 的消息，那么罪魁祸首可能是凭据配置不当。请再次浏览凭据设置，并检查它们是否已正确设置。

## 错误：安装 Kubernetes 时无法获取 IP 地址
如果您已使用 Universal 安装工具启动了 DC/OS 1.12 或更高版本的群集，并在安装 Kubernetes 时遇到此错误消息：

`EXIT with status 1: Failed to obtain the IP address for ‘ip_______.ec2.internal'; the DNS service may not be able to resolve it: Name or service not known`

请确保您使用 RHEL 或 CentOS 7.5 作为实例 OS。CoreOS 目前不是 DC/OS 支持的操作系统。您可以通过在 `main.tf` 内 `dcos_instance_os` 中指定变量来更改 DC/OS 群集的操作系统。

有关在 DC/OS 1.12 或更高版本上运行 Kubernetes 的要求的详细信息，请参阅 [此支持文档](https://mesosphere-community.force.com/s/article/Critical-Issue-Kubernetes-Upgrade-MSPH-2018-0007)。


## 错误：IAM 实例配置文件创建
即使在检查 IAM 控制台后，部署也会失败并显示以下示例错误，并且可以看到角色和策略已删除：

```bash
* module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_instance_profile.agent_profile: 1 error(s) occurred:

* aws_iam_instance_profile.agent_profile: Error creating IAM instance profile dcos-<CLUSTER_NAME>-instance_profile: EntityAlreadyExists: Instance Profile dcos-<CLUSTER_NAME>-instance_profile already exists.
        status code: 409, request id: e3b2fe0b-4f05-11e9-b286-e78361536fef
* module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_instance_profile.master_profile: 1 error(s) occurred:

* aws_iam_instance_profile.master_profile: Error creating IAM instance profile dcos-<CLUSTER_NAME>-master_instance_profile: EntityAlreadyExists: Instance Profile dcos-<CLUSTER_NAME>-master_instance_profile already exists.
        status code: 409, request id: e3aeb888-4f05-11e9-b9b4-758e0e14b43e
```

即使您已删除相关角色/策略，您也无法通过 IAM 控制台查看“实例配置文件”。您应通过 AWS CLI 发出以下命令以删除实例配置文件：

```bash
aws iam delete-instance-profile --instance-profile-name dcos-<CLUSTER_NAME>-instance_profile
aws iam delete-instance-profile --instance-profile-name dcos-<CLUSTER_NAME>-master_instance_profile
```

清理这些实例配置文件后，再次重新部署群集将解决此问题。

## 错误：具有该名称的服务器证书已存在。

配置群集时，您可能会遇到错误“上传服务器证书时出错，错误：EntityAlreadyExists: 具有该名称的服务器证书已存在。” 这很可能是因为在使用相同群集名称前部署失败。发出以下命令以删除旧版本，然后重新使用 terraform。

```bash
aws iam delete-server-certificate --server-certificate-name <CLUSTER_NAME>-cert
aws iam delete-server-certificate --server-certificate-name int-<CLUSTER_NAME>-cert
aws iam delete-server-certificate --server-certificate-name ext-<CLUSTER_NAME>-cert
```

## 错误：上传服务器证书

当您的时钟未与权威时间服务器同步或未设置为等于权威时间服务器提供值时，您将收到如下错误：

```bash
* aws_iam_server_certificate.selfsigned: Error uploading server certificate, error: MalformedCertificate: Unable to parse certificate. Please ensure the certificate is in PEM format.
```

最有可能的是，使用 `terraform` 上传的服务器证书设置了未来日期时间，`aws` API 将拒绝它，并发送此错误。
请确保从中配置群集的机器上的时钟具有同步的时间。
