{
  "swagger":"2.0",
  "info":{
    "version":"1.0.0",
    "title":""
  },
  "basePath":"/acs/api/v1",
  "tags":[
    {
      "name":"auth",
      "description":"Exchange user name and password for an API token"
    },
    {
      "name":"users",
      "description":"Manage local and remote users"
    },
    {
      "name":"groups",
      "description":"Manage user groups"
    },
    {
      "name":"permissions",
      "description":"Manage permissions"
    },
    {
      "name":"ldap",
      "description":"Manage LDAP configuration and users"
    }
  ],
  "schemes":[
    "http",
    "https"
  ],
  "paths":{
    "/auth/login":{
      "post":{
        "tags":[
          "auth"
        ],
        "summary":"Obtain an API token.",
        "description":"Pass in the user ID and password of a DC/OS user with the permissions that you will need. Returns API token in a JSON object. Also plants a cookie containing the token. The token expires in 5 days.",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"Credentials",
            "description":"uid & password or uid & token.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/Credentials"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Authentication successful. Response body contains authentication token (the token is also included in a cookie set with the response).",
            "schema":{
              "$ref":"#/definitions/Token"
            },
            "headers":{
              "Set-Cookie":{
                "description":"Token (implementation detail for browser support, should not be of interest to general API consumers)",
                "type":"string"
              }
            }
          },
          "401":{
            "description":"Authentication failed."
          }
        }
      }
    },
    "/users":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Retrieve all user or service accounts.",
        "description":"Retrieve `User` objects. Allows to query service accounts, defaults to only user accounts.",
        "parameters":[
          {
            "name":"type",
            "in":"query",
            "description":"If set to `services`, list only service accounts. If unset, default to only listing user accounts.",
            "type":"string"
          }
        ],
        "produces":[
          "application/json"
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "type":"object",
              "properties":{
                "array":{
                  "type":"array",
                  "items":{
                    "$ref":"#/definitions/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{uid}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get single user object.",
        "description":"Get specific `User` object. Corresponding to an account.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The ID of the user object to retrieve.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/User"
            }
          }
        }
      },
      "put":{
        "tags":[
          "users"
        ],
        "summary":"Create user.",
        "description":"Create user (uid in url, details incl. credentials in body).",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The ID of the user to create.",
            "type":"string"
          },
          {
            "name":"User creation object",
            "description":"Password/description.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/UserCreate"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"User created."
          },
          "409":{
            "description":"User already exists."
          }
        }
      },
      "patch":{
        "tags":[
          "users"
        ],
        "summary":"Update user account.",
        "description":"Update existing user account (meta data and/or password).",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The ID of the user account to modify.",
            "type":"string"
          },
          {
            "name":"User update object",
            "description":"Password/description.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/UserUpdate"
            }
          }
        ],
        "responses":{
          "204":{
            "description":"Update applied."
          },
          "501":{
            "description":"Not implemented for service accounts."
          }
        }
      },
      "delete":{
        "tags":[
          "users"
        ],
        "summary":"Delete account.",
        "description":"Delete account.",
        "parameters":[
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The ID of the user account to delete.",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      }
    },
    "/users/{uid}/groups":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Retrieve groups the user is member of.",
        "description":"Retrieve groups the user is member of.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The ID of the user.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/UserGroups"
            }
          }
        }
      }
    },
    "/users/{uid}/permissions":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Retrieve permissions a account has.",
        "description":"Retrieve permissions this account has, and distinguish direct permissions from those that are obtained through group membership.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The id of the user.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/UserPermissions"
            }
          }
        }
      }
    },
    "/groups":{
      "get":{
        "tags":[
          "groups"
        ],
        "summary":"Retrieve all group objects.",
        "description":"Retrieve array of `Group` objects.",
        "produces":[
          "application/json"
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "type":"object",
              "properties":{
                "array":{
                  "type":"array",
                  "items":{
                    "$ref":"#/definitions/Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{gid}":{
      "get":{
        "tags":[
          "groups"
        ],
        "summary":"Get single group object.",
        "description":"Get specific `Group` object.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The ID of the group to retrieve.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/Group"
            }
          }
        }
      },
      "put":{
        "tags":[
          "groups"
        ],
        "summary":"Create a group.",
        "description":"Create a group.",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The ID of the group.",
            "type":"string"
          },
          {
            "name":"Group creation object",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/GroupCreate"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"Group created."
          },
          "409":{
            "description":"Group exists."
          }
        }
      },
      "patch":{
        "tags":[
          "groups"
        ],
        "summary":"Update group.",
        "description":"Update existing group (description).",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The ID of the group to modify.",
            "type":"string"
          },
          {
            "name":"Group update object",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/GroupUpdate"
            }
          }
        ],
        "responses":{
          "204":{
            "description":"Update applied."
          }
        }
      },
      "delete":{
        "tags":[
          "groups"
        ],
        "summary":"Delete group.",
        "description":"Delete group.",
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The ID of the group to delete.",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success"
          }
        }
      }
    },
    "/groups/{gid}/users":{
      "get":{
        "tags":[
          "groups"
        ],
        "summary":"Retrieve members of a group.",
        "description":"Retrieve users that are member of this group.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The group ID.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/GroupUsers"
            }
          }
        }
      }
    },
    "/groups/{gid}/permissions":{
      "get":{
        "tags":[
          "groups"
        ],
        "summary":"Retrieve group permissions.",
        "description":"Retrieve permissions of this group.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The group ID.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/GroupPermissions"
            }
          }
        }
      }
    },
    "/groups/{gid}/users/{uid}":{
      "delete":{
        "tags":[
          "groups"
        ],
        "summary":"Delete user account from group.",
        "description":"Delete user account from group.",
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The ID of the group to delete from.",
            "type":"string"
          },
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"The ID of the user account.",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      },
      "put":{
        "tags":[
          "groups"
        ],
        "summary":"Add account to group.",
        "description":"Add account to group.",
        "parameters":[
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"The ID of the group to add the user account to.",
            "type":"string"
          },
          {
            "name":"uid",
            "description":"The ID of the account to add.",
            "in":"path",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success"
          },
          "409":{
            "description":"account is already part of the group."
          }
        }
      }
    },
    "/acls":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Retrieve all ACL objects.",
        "description":"Get array of `ACL` objects.",
        "produces":[
          "application/json"
        ],
        "responses":{
          "200":{
            "description":"Success",
            "schema":{
              "type":"object",
              "properties":{
                "array":{
                  "type":"array",
                  "items":{
                    "$ref":"#/definitions/ACL"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/acls/{rid}":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Retrieve ACL for a certain resource.",
        "description":"Retrieve single `ACL` object, for a specific resource.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"The ID of the resource to retrieve the ACL for.",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/ACL"
            }
          }
        }
      },
      "put":{
        "tags":[
          "permissions"
        ],
        "summary":"Create ACL for a certain resource.",
        "description":"Create new ACL for resource with ID `rid` (description in body, no permissions by default).",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"The ID of the resource for which the ACL should be created.",
            "type":"string"
          },
          {
            "name":"ACL",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/ACLCreate"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"ACL created."
          },
          "409":{
            "description":"Already exists (this resource already has an ACL set)."
          }
        }
      },
      "patch":{
        "tags":[
          "permissions"
        ],
        "summary":"Update ACL for a certain resource.",
        "description":"Update ACL for resource with ID `rid`.",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"The ID of the resource for which the ACL should be created.",
            "type":"string"
          },
          {
            "name":"ACL update object",
            "description":"New ACL.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/ACLUpdate"
            }
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      },
      "delete":{
        "tags":[
          "permissions"
        ],
        "summary":"Delete ACL for a certain resource.",
        "description":"Delete ACL of resource with ID `rid`.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"The ID of resource for which the ACL should be deleted.",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      }
    },
    "/acls/{rid}/users/{uid}":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Get allowed actions for given resource and user.",
        "description":"Get allowed actions for given resource and user.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID",
            "type":"string"
          },
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"account ID",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "type":"object",
              "properties":{
                "array":{
                  "type":"array",
                  "items":{
                    "$ref":"#/definitions/Action"
                  }
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "permissions"
        ],
        "summary":"Forbid all actions of given account to given resource.",
        "description":"Forbid all actions of given account to given resource.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID.",
            "type":"string"
          },
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"account ID.",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      }
    },
    "/acls/{rid}/users/{uid}/{action}":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Query whether action is allowed or not.",
        "description":"Query whether action is allowed or not.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID",
            "type":"string"
          },
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"account ID",
            "type":"string"
          },
          {
            "name":"action",
            "in":"path",
            "required":true,
            "description":"action name",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Boolean answer in JSON response body.",
            "schema":{
              "$ref":"#/definitions/ActionAllowed"
            }
          }
        }
      },
      "put":{
        "tags":[
          "permissions"
        ],
        "summary":"Permit single action for given account and resource.",
        "description":"Permit single action for given account and resource.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID.",
            "type":"string"
          },
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"account ID.",
            "type":"string"
          },
          {
            "name":"action",
            "in":"path",
            "required":true,
            "description":"action name",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      },
      "delete":{
        "tags":[
          "permissions"
        ],
        "summary":"Forbid single action for given account and resource.",
        "description":"Forbid single action for given account and resource.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID.",
            "type":"string"
          },
          {
            "name":"uid",
            "in":"path",
            "required":true,
            "description":"account ID.",
            "type":"string"
          },
          {
            "name":"action",
            "in":"path",
            "required":true,
            "description":"action name",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      }
    },
    "/acls/{rid}/groups/{gid}":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Get allowed actions for given resource and group.",
        "description":"Get allowed actions for given resource and group.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID",
            "type":"string"
          },
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"group ID",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "type":"object",
              "properties":{
                "array":{
                  "type":"array",
                  "items":{
                    "$ref":"#/definitions/Action"
                  }
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "permissions"
        ],
        "summary":"Forbid all actions of given group to given resource.",
        "description":"Forbid all actions of given group to given resource.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID.",
            "type":"string"
          },
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"group ID.",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      }
    },
    "/acls/{rid}/groups/{gid}/{action}":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Query whether action is allowed or not.",
        "description":"Query whether action is allowed or not.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID",
            "type":"string"
          },
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"group ID",
            "type":"string"
          },
          {
            "name":"action",
            "in":"path",
            "required":true,
            "description":"action name",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Boolean answer in JSON response body.",
            "schema":{
              "$ref":"#/definitions/ActionAllowed"
            }
          }
        }
      },
      "put":{
        "tags":[
          "permissions"
        ],
        "summary":"Permit single action for given resource and group.",
        "description":"Permit single action for given resource and group.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID.",
            "type":"string"
          },
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"group ID.",
            "type":"string"
          },
          {
            "name":"action",
            "in":"path",
            "required":true,
            "description":"action name",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      },
      "delete":{
        "tags":[
          "permissions"
        ],
        "summary":"Forbid single action for given resource and group.",
        "description":"Forbid single action for given resource and group.",
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID.",
            "type":"string"
          },
          {
            "name":"gid",
            "in":"path",
            "required":true,
            "description":"group ID.",
            "type":"string"
          },
          {
            "name":"action",
            "in":"path",
            "required":true,
            "description":"action name",
            "type":"string"
          }
        ],
        "responses":{
          "204":{
            "description":"Success."
          }
        }
      }
    },
    "/acls/{rid}/permissions":{
      "get":{
        "tags":[
          "permissions"
        ],
        "summary":"Retrieve all permissions for resource.",
        "description":"Retrieve all permissions that are set for a specific resource.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"rid",
            "in":"path",
            "required":true,
            "description":"resource ID",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Success.",
            "schema":{
              "$ref":"#/definitions/ACLPermissions"
            }
          }
        }
      }
    },
    "/ldap/config":{
      "get":{
        "tags":[
          "ldap"
        ],
        "summary":"Retrieve LDAP configuration settings.",
        "description":"Retrieve the current LDAP configuration settings.",
        "produces":[
          "application/json"
        ],
        "responses":{
          "200":{
            "description":"Success. The response body contains a JSON object containing the current LDAP configuration.",
            "schema":{
              "$ref":"#/definitions/LDAPConfiguration"
            }
          },
          "400":{
            "description":"Various errors. If no config has yet been stored, the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response."
          }
        }
      },
      "put":{
        "tags":[
          "ldap"
        ],
        "summary":"Set new LDAP configuration.",
        "description":"Set the parameters to use to connect to an LDAP directory server. If an LDAP configuration already exists, this will overwrite it.",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"LDAP configuration parameters",
            "description":"New LDAP configuration parameters.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/LDAPConfiguration"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Success. The LDAP configuration was set. Basic validation tests passed, but the directory service was not contacted. You're encouraged to now perform a basic feature check against the directory back-end with the newly set configuration, by using the the `config\test` endpoint."
          },
          "400":{
            "description":"Various errors. If the configuration object itself is invalid, the custom error code `ERR_LDAP_CONFIG_INVALID` is set in the response, and a description sheds light onto the problem specifics."
          }
        }
      },
      "delete":{
        "tags":[
          "ldap"
        ],
        "summary":"Delete the LDAP configuration.",
        "description":"Delete current directory (LDAP) back-end configuration. This deactivates the LDAP authentication.",
        "produces":[
          "application/json"
        ],
        "parameters":[

        ],
        "responses":{
          "204":{
            "description":"`Successfully deleted the LDAP configuration.`"
          },
          "400":{
            "description":"Various errors. If no config has yet been stored, the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response."
          }
        }
      }
    },
    "/ldap/config/test":{
      "post":{
        "tags":[
          "ldap"
        ],
        "summary":"Test connection to LDAP.",
        "description":"Perform basic feature tests. Verify that the current directory (LDAP) configuration parameters allow for a successful connection to the directory back-end. For instance, this endpoint simulates the procedure for authentication via LDAP, but provides more useful feedback upon failure than the actual login endpoint.",
        "produces":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"LDAP test user credentials",
            "description":"JSON object containing `uid` and password of an LDAP user. For the most expressive test result, choose credentials different from the lookup credentials. The `uid` is the string the user is supposed to log in with after successful LDAP back-end configuration. NOTE: the `dntemplate` is used with the user name provided.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/LDAPTestCredentials"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Directory back-end was reached and all feature tests passed.",
            "schema":{
              "$ref":"#/definitions/LDAPTestResultObject"
            }
          },
          "502":{
            "description":"Either there was a connection error or one of the feature tests failed. To distinguish this response from a proxy-generated 502, a JSON object is included in the response. It contains a message in its `description` property, describing the problem in more detail.",
            "schema":{
              "$ref":"#/definitions/LDAPTestResultObject"
            }
          }
        }
      }
    },
    "/ldap/importuser":{
      "post":{
        "tags":[
          "ldap"
        ],
        "summary":"Import an LDAP user.",
        "description":"Attempt to import a user from the configured LDAP into DC/OS.",
        "consumes":[
          "application/json"
        ],
        "parameters":[
          {
            "name":"LDAP user name",
            "description":"A JSON object specifying the user name of the user that should be imported. That string is equivalent to the `uid` the user is supposed to log in with after successful import. The exact meaning of this string depends on the configured LDAP authentication method. NOTE: the `dntemplate` is used with the user name provided.",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/LDAPImportUserObject"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"`Created.`"
          },
          "400":{
            "description":"Various errors. If no directory back-end has been configured yet, the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response. If there was no LDAP search result or an error occured during the search process, one of the custom error codes `ERR_LDAPIMPORT_USER_NOT_FOUND` and `ERR_LDAPIMPORT_SEARCH_FAILED` is set in the response, and a description is provided to report the problem specifics."
          }
        }
      }
    }
  },
  "definitions":{
    "Credentials":{
      "type":"object",
      "required":[
        "uid"
      ],
      "properties":{
        "uid":{
          "type":"string"
        },
        "exp":{
          "type":"integer"
        },
        "algorithm":{
          "type":"string"
        },
        "password":{
          "type":"string"
        },
        "token":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "Token":{
      "type":"object",
      "required":[
        "token"
      ],
      "properties":{
        "token":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "Action":{
      "type":"object",
      "properties":{
        "name":{
          "type":"string"
        },
        "url":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "User":{
      "type":"object",
      "required":[
        "uid",
        "url",
        "description",
        "is_remote"
      ],
      "properties":{
        "uid":{
          "type":"string"
        },
        "url":{
          "type":"string"
        },
        "description":{
          "type":"string"
        },
        "is_remote":{
          "type":"boolean"
        }
      },
      "additionalProperties":false
    },
    "UserCreate":{
      "type":"object",
      "properties":{
        "description":{
          "type":"string"
        },
        "password":{
          "type":"string"
        },
        "public_key":{
          "type":"string"
        },
        "secret":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "UserUpdate":{
      "type":"object",
      "properties":{
        "description":{
          "type":"string"
        },
        "password":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "UserGroups":{
      "type":"object",
      "additionalProperties":false,
      "properties":{
        "array":{
          "type":"array",
          "items":{
            "type":"object",
            "required":[
              "group",
              "membershipurl"
            ],
            "properties":{
              "membershipurl":{
                "type":"string"
              },
              "group":{
                "$ref":"#/definitions/Group"
              }
            }
          }
        }
      }
    },
    "UserPermissions":{
      "type":"object",
      "additionalProperties":false,
      "properties":{
        "direct":{
          "type":"array",
          "additionalProperties":false,
          "items":{
            "type":"object",
            "required":[
              "rid",
              "description",
              "aclurl",
              "actions"
            ],
            "properties":{
              "rid":{
                "type":"string"
              },
              "description":{
                "type":"string"
              },
              "aclurl":{
                "type":"string"
              },
              "actions":{
                "type":"array",
                "items":{
                  "$ref":"#/definitions/Action"
                }
              }
            }
          }
        },
        "groups":{
          "type":"array",
          "additionalProperties":false,
          "items":{
            "type":"object",
            "required":[
              "rid",
              "gid",
              "description",
              "aclurl",
              "membershipurl",
              "actions"
            ],
            "properties":{
              "rid":{
                "type":"string"
              },
              "gid":{
                "type":"string"
              },
              "description":{
                "type":"string"
              },
              "aclurl":{
                "type":"string"
              },
              "membershipurl":{
                "type":"string"
              },
              "actions":{
                "type":"array",
                "items":{
                  "$ref":"#/definitions/Action"
                }
              }
            }
          }
        }
      }
    },
    "Group":{
      "type":"object",
      "required":[
        "gid",
        "url",
        "description"
      ],
      "properties":{
        "gid":{
          "type":"string"
        },
        "url":{
          "type":"string"
        },
        "description":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "GroupCreate":{
      "type":"object",
      "required":[
        "description"
      ],
      "properties":{
        "description":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "GroupUpdate":{
      "type":"object",
      "required":[
        "description"
      ],
      "properties":{
        "description":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "GroupUsers":{
      "type":"object",
      "properties":{
        "array":{
          "type":"array",
          "items":{
            "type":"object",
            "required":[
              "membershipurl",
              "user"
            ],
            "properties":{
              "membershipurl":{
                "type":"string"
              },
              "user":{
                "$ref":"#/definitions/User"
              }
            }
          }
        }
      }
    },
    "GroupPermissions":{
      "type":"object",
      "additionalProperties":false,
      "properties":{
        "array":{
          "type":"array",
          "items":{
            "type":"object",
            "required":[
              "rid",
              "description",
              "aclurl",
              "actions"
            ],
            "properties":{
              "rid":{
                "type":"string"
              },
              "description":{
                "type":"string"
              },
              "aclurl":{
                "type":"string"
              },
              "actions":{
                "type":"array",
                "items":{
                  "$ref":"#/definitions/Action"
                }
              }
            }
          }
        }
      }
    },
    "ACL":{
      "type":"object",
      "required":[
        "rid",
        "url",
        "description"
      ],
      "properties":{
        "rid":{
          "type":"string"
        },
        "url":{
          "type":"string"
        },
        "description":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "ACLCreate":{
      "type":"object",
      "required":[
        "description"
      ],
      "properties":{
        "description":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "ACLUpdate":{
      "type":"object",
      "required":[
        "description"
      ],
      "properties":{
        "description":{
          "type":"string"
        }
      },
      "additionalProperties":false
    },
    "ACLPermissions":{
      "type":"object",
      "additionalProperties":false,
      "properties":{
        "groups":{
          "type":"array",
          "items":{
            "type":"object",
            "required":[
              "gid",
              "groupurl",
              "actions"
            ],
            "properties":{
              "gid":{
                "type":"string"
              },
              "groupurl":{
                "type":"string"
              },
              "actions":{
                "type":"array",
                "items":{
                  "$ref":"#/definitions/Action"
                }
              }
            }
          }
        },
        "users":{
          "type":"array",
          "items":{
            "type":"object",
            "required":[
              "uid",
              "userurl",
              "actions"
            ],
            "properties":{
              "uid":{
                "type":"string"
              },
              "userurl":{
                "type":"string"
              },
              "actions":{
                "type":"array",
                "items":{
                  "$ref":"#/definitions/Action"
                }
              }
            }
          }
        }
      }
    },
    "ActionAllowed":{
      "type":"object",
      "properties":{
        "allowed":{
          "type":"boolean"
        }
      },
      "additionalProperties":false
    },
    "LDAPConfiguration":{
      "type":"object",
      "required":[
        "host",
        "port",
        "enforce-starttls",
        "use-ldaps",
        "lookup-dn",
        "lookup-password"
      ],
      "properties":{
        "port":{
          "type":"integer"
        },
        "dntemplate":{
          "type":"string"
        },
        "lookup-password":{
          "type":"string"
        },
        "host":{
          "type":"string"
        },
        "use-ldaps":{
          "type":"boolean"
        },
        "enforce-starttls":{
          "type":"boolean"
        },
        "lookup-dn":{
          "type":"string"
        }
      }
    },
    "LDAPImportUserObject":{
      "type":"object",
      "additionalProperties":false,
      "required":[
        "username"
      ],
      "properties":{
        "username":{
          "type":"string"
        }
      }
    },
    "LDAPTestCredentials":{
      "type":"object",
      "additionalProperties":false,
      "required":[
        "uid",
        "password"
      ],
      "properties":{
        "uid":{
          "type":"string"
        },
        "password":{
          "type":"string"
        }
      }
    },
    "LDAPTestResultObject":{
      "type":"object",
      "additionalProperties":false,
      "required":[
        "code",
        "description"
      ],
      "properties":{
        "code":{
          "type":"string"
        },
        "description":{
          "type":"string"
        }
      }
    }
  }
}