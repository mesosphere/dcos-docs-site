# DO NOT EDIT THIS FILE, GENERATED BY ./scripts/swagger-marathon.sh
  swagger: "2.0"
  info: 
    title: "Marathon REST API"
    version: "2.0"
  host: ".."
  consumes: 
    - "application/json"
  produces: 
    - "application/json"
  definitions: 
    app.AppResidency: 
      description: "When using local persistent volumes that pin tasks onto agents,\nthese values define how Marathon handles terminal states of these tasks.\n"
      type: "object"
      properties: 
        relaunchEscalationTimeoutSeconds: 
          default: 3600
          minimum: 0
          format: "int64"
          description: "This property is deprecated and it has no effect. When a task using persistent local volumes cannot be restarted on the agent it's been pinned to, Marathon will try to launch this task on another node after this timeout. Defaults to 3600 (one hour).\","
          type: "integer"
        taskLostBehavior: 
          default: "WAIT_FOREVER"
          description: "This property is deprecated and it has no effect."
          $ref: "#/definitions/strings.TaskLostBehavior"
      required: 
        - "relaunchEscalationTimeoutSeconds"
        - "taskLostBehavior"
    app.UpgradeStrategy: 
      description: "During an upgrade all instances of an application get replaced by a new\nversion.\nThe upgradeStrategy controls how Marathon stops old versions and\nlaunches new versions.\n"
      type: "object"
      properties: 
        maximumOverCapacity: 
          minimum: 0
          maximum: 1
          format: "double"
          description: "A number between 0 and 1 which is multiplied with the instance count.\nThis is the maximum number of additional instances launched at any\npoint of time during the upgrade process.\n"
          type: "number"
        minimumHealthCapacity: 
          minimum: 0
          maximum: 1
          format: "double"
          description: "A number between 0 and 1 that is multiplied with the instance count.\nThis is the minimum number of healthy nodes that do not sacrifice\noverall application purpose. Marathon will make sure, during the\nupgrade process, that at any point of time this number of healthy\ninstances are up.\n"
          type: "number"
      required: 
        - "maximumOverCapacity"
        - "minimumHealthCapacity"
    app.App: 
      type: "object"
      properties: 
        id: 
          $ref: "#/definitions/strings.PathId"
        acceptedResourceRoles: 
          uniqueItems: true
          description: "A list of resource roles.\nMarathon considers only resource offers with roles in this list for\nlaunching tasks of this app. If you do not specify this,\nMarathon considers all resource offers with roles that have been\nconfigured by the `--default_accepted_resource_roles` command line flag.\nIf no `--default_accepted_resource_roles` was given on startup,\nMarathon considers all resource offers. To register Marathon for a role,\nyou need to specify the `--mesos_role` command line flag on startup.\nIf you want to assign all resources of a agent to a role,\nyou can use the `--default_role` argument when starting up the agent.\nIf you need a more fine-grained configuration, you can use the\n`--resources` argument to specify resource shares per role.\nSee [the Mesos attribute and resources documentation](http://mesos.apache.org/documentation/latest/attributes-resources/) for details\n"
          example: 
            - "public-facing"
          type: "array"
          items: 
            type: "string"
          x-annotation-app.pragma.forceOptional: null
        args: 
          description: "An array of strings that represents an alternative mode of specifying the\ncommand to run. This was motivated by safe usage of containerizer features\nlike a custom Docker ENTRYPOINT. This args field may be used in place of\ncmd even when using the default command executor.\nThis change mirrors API and semantics changes in the Mesos CommandInfo\nprotobuf message starting with version `0.20.0`.\nEither `cmd` or `args` must be supplied.\nIt is invalid to supply both `cmd` and `args` in the same app.\n"
          type: "array"
          items: 
            type: "string"
          x-annotation-app.pragma.omitEmpty: null
        backoffFactor: 
          default: 1.15
          minimum: 1
          format: "double"
          description: "Configures exponential backoff behavior when launching potentially sick\napps. This prevents sandboxes associated with consecutively failing tasks\nfrom filling up the hard disk on Mesos agents.\nThe backoff period is multiplied by the factor for each consecutive\nfailure until it reaches maxLaunchDelaySeconds.\nThis applies also to tasks that are killed due to failing too\nmany health checks.\n"
          type: "number"
        backoffSeconds: 
          default: 1
          minimum: 0
          format: "int32"
          description: "Configures exponential backoff behavior when launching potentially sick\napps. This prevents sandboxes associated with consecutively failing tasks\nfrom filling up the hard disk on Mesos agents.\nThe backoff period is multiplied by the factor for each consecutive\nfailure until it reaches maxLaunchDelaySeconds.\nThis applies also to tasks that are killed due to failing too\nmany health checks.\n"
          type: "integer"
        cmd: 
          minLength: 1
          description: "The command that is executed.  This value is wrapped by Mesos via\n`/bin/sh -c ${app.cmd}`.\nEither `cmd` or `args` must be supplied.\nIt is invalid to supply both `cmd` and `args` in the same app.\n"
          type: "string"
        constraints: 
          uniqueItems: true
          type: "array"
          items: 
            $ref: "#/definitions/app.constraints.AppConstraint"
          x-annotation-app.pragma.omitEmpty: null
        container: 
          $ref: "#/definitions/app.appContainer.Container"
        cpus: 
          default: 1
          minimum: 0.001
          format: "double"
          description: "The number of CPU shares this application needs per instance. This number does not have to be integer, but can be a fraction.\",\n"
          type: "number"
        dependencies: 
          uniqueItems: true
          description: "A list of services upon which this application depends\nAn order is derived from the dependencies for performing start/stop and\nupgrade of the application. For example, an application /a relies on the\nservices /b which itself relies on /c. To start all 3 applications, first\n/c is started than /b than /a.\n"
          type: "array"
          items: 
            $ref: "#/definitions/strings.PathId"
          x-annotation-app.pragma.omitEmpty: null
        disk: 
          default: 0
          minimum: 0
          format: "double"
          description: "How much disk space is needed for this application.\nThis number does not have to be an integer, but can be a fraction.\n"
          type: "number"
        env: 
          $ref: "#/definitions/app.env.LegacyEnvVars"
          x-annotation-app.pragma.omitEmpty: null
        executor: 
          default: ""
          pattern: "^(//cmd)|(/?[^/]+(/[^/]+)*)|$"
          description: "The executor to use to launch this application.\nDifferent executors are available.\nThe simplest one (and the one configured by default if none is given) is `//cmd`,\nwhich takes the cmd and executes that on the shell level.\n"
          type: "string"
        executorResources: 
          description: "The resources to allocate to the executor."
          $ref: "#/definitions/app.resources.ExecutorResources"
        fetch: 
          description: "Provided URIs are passed to Mesos fetcher module and resolved in runtime."
          type: "array"
          items: 
            $ref: "#/definitions/app.artifact.Artifact"
          x-annotation-app.pragma.omitEmpty: null
        healthChecks: 
          uniqueItems: true
          type: "array"
          items: 
            $ref: "#/definitions/app.health.AppHealthCheck"
          x-annotation-app.pragma.omitEmpty: null
        check: 
          $ref: "#/definitions/app.check.AppCheck"
        instances: 
          default: 1
          minimum: 0
          format: "int32"
          description: "The number of instances of this application to start.\nPlease note: this number can be changed any time as needed to\nscale the application.\n"
          type: "integer"
        labels: 
          $ref: "#/definitions/app.label.KVLabels"
        maxLaunchDelaySeconds: 
          default: 300
          minimum: 0
          format: "int32"
          description: "Configures exponential backoff behavior when launching potentially sick\napps. This prevents sandboxes associated with consecutively failing tasks\nfrom filling up the hard disk on Mesos agents.\nThe backoff period is multiplied by the factor for each consecutive\nfailure until it reaches maxLaunchDelaySeconds.\nThis applies also to tasks that are killed due to failing too many health checks.\n"
          type: "integer"
        mem: 
          default: 128
          minimum: 0
          format: "double"
          description: "The amount of memory in MB that is needed for the application per instance.\n"
          type: "number"
        gpus: 
          default: 0
          minimum: 0
          format: "int32"
          description: "The amount of GPU cores that is needed for the application per instance.\n"
          type: "integer"
        ipAddress: 
          $ref: "#/definitions/app.network.IpAddress"
          x-annotation-app.pragma.deprecated: "Use `networks` instead."
        networks: 
          type: "array"
          items: 
            $ref: "#/definitions/app.network.Network"
        ports: 
          description: "An array of required port resources on the agent host.\nThe number of items in the array determines how many dynamic ports are\nallocated for every task.\nFor every port that is zero, a globally unique (cluster-wide) port is\nassigned and provided as part of the app definition to be used in load\nbalancing definitions.\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.number.AnyPort"
          x-annotation-app.pragma.forceOptional: null
          x-annotation-app.pragma.deprecated: "Use `portDefinitions` instead."
        portDefinitions: 
          description: "An array of required port resources on the agent host.\nThe number of items in the array determines how many dynamic ports are\nallocated for every task. For every port definition with port number zero,\na globally unique (cluster-wide) service port is assigned and provided as\npart of the app definition to be used in load balancing definitions.\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.network.PortDefinition"
          x-annotation-app.pragma.forceOptional: null
        readinessChecks: 
          type: "array"
          items: 
            $ref: "#/definitions/app.readiness.ReadinessCheck"
          x-annotation-app.pragma.omitEmpty: null
        residency: 
          description: "This property is deprecated and it has no effect."
          $ref: "#/definitions/app.AppResidency"
        requirePorts: 
          default: false
          description: "Applies only for host networking.\nNormally, the host ports of your tasks are automatically assigned.\nThis corresponds to the requirePorts value false which is the default.\nIf you need more control and want to specify your host ports in advance,\nyou can set requirePorts to true. This way the ports you have specified\nare used as host ports. That also means that Marathon can schedule the\nassociated tasks only on hosts that have the specified ports available.\n"
          type: "boolean"
        secrets: 
          $ref: "#/definitions/app.secrets.Secrets"
          x-annotation-app.pragma.omitEmpty: null
        taskKillGracePeriodSeconds: 
          minimum: 0
          format: "int32"
          description: "Configures the number of seconds between escalating from SIGTERM to\nSIGKILL when signalling tasks to terminate.\nUsing this grace period, tasks should perform orderly shut down\nimmediately upon receiving SIGTERM.\n"
          type: "integer"
        upgradeStrategy: 
          $ref: "#/definitions/app.UpgradeStrategy"
        uris: 
          description: "URIs defined here are resolved, before the application gets started.\nIf the application has external dependencies, they should be defined here.\n"
          type: "array"
          items: 
            $ref: "#/definitions/strings.Uri"
          x-annotation-app.pragma.forceOptional: null
          x-annotation-app.pragma.deprecated: "Use `fetch` instead."
        user: 
          description: "The user to use to run the tasks on the agent."
          type: "string"
        version: 
          description: "The version of this definition"
          type: "string"
          format: "date-time"
        versionInfo: 
          $ref: "#/definitions/app.versionInfo.VersionInfo"
        killSelection: 
          default: "YOUNGEST_FIRST"
          $ref: "#/definitions/app.killSelection.KillSelection"
        unreachableStrategy: 
          $ref: "#/definitions/app.unreachableStrategy.UnreachableStrategy"
        tty: 
          description: "Describes if (pseudo) TTY sould be allocated for the process of this container.\n"
          type: "boolean"
        role: 
          minLength: 1
          description: "The role to use. If not specified, uses the role of the enclosing group, or the default role.\nAt the moment, only the default role or the group role are allowed\n"
          type: "string"
      required: 
        - "id"
      x-annotation-app.pragma.generateUpdateType: null
    app.appContainer.EngineType: 
      description: "Container engine type. Supported engine types at the moment are DOCKER and MESOS.\n"
      enum: 
        - "MESOS"
        - "DOCKER"
      type: "string"
    app.appContainer.DockerCredentials: 
      description: "Credential to authenticate with the docker registry"
      type: "object"
      properties: 
        principal: 
          description: "Principal to authenticate with the docker registry"
          type: "string"
        secret: 
          description: "Secret to authenticate with the docker registry"
          type: "string"
      required: 
        - "principal"
      x-annotation-app.pragma.deprecated: "Deprecated since v1.5"
    app.appContainer.DockerNetwork: 
      description: "The networking mode, this container should operate in.\nOne of BRIDGE|HOST|NONE|USER\n"
      enum: 
        - "BRIDGE"
        - "HOST"
        - "NONE"
        - "USER"
      type: "string"
    app.appContainer.DockerParameter: 
      type: "object"
      properties: 
        key: 
          minLength: 1
          description: "key of this parameter"
          type: "string"
        value: 
          description: "value of this parameter"
          type: "string"
      required: 
        - "key"
        - "value"
    app.appContainer.ContainerPortMapping: 
      type: "object"
      properties: 
        containerPort: 
          default: 0
          description: "Refers to the port the application listens to inside of the\ncontainer.\nIt is optional and defaults to 0.\nFor each containerPort with a value of 0 Marathon assigns the\ncontainerPort the same value as the assigned hostPort.\nThis is especially useful for apps that advertise the port they\nare listening on to the outside world for P2P communication.\nWithout containerPort: 0 they would erroneously advertise their\nprivate container port which is usually not the same as the\nexternally visible host port.\n"
          $ref: "#/definitions/app.number.AnyPort"
        hostPort: 
          description: "Retains the traditional meaning in Marathon, which is a random\nport from the range included in the Mesos resource offer.\nThe resulting host ports for each task are exposed via the task\ndetails in the REST API and the Marathon web UI.\nhostPort is optional.\nIn BRIDGE mode it defaults to 0 if left unspecified.\nIn USER mode an unspecified hostPort does not allocate a port\nfrom a Mesos offer.\n"
          $ref: "#/definitions/app.number.AnyPort"
        labels: 
          description: "This can be used to add metadata to be interpreted by external applications such as firewalls."
          $ref: "#/definitions/app.label.KVLabels"
        name: 
          description: "Name of the service hosted on this port. If provided, it must be unique over all port mappings."
          $ref: "#/definitions/strings.LegacyName"
        protocol: 
          default: "tcp"
          $ref: "#/definitions/strings.NetworkProtocol"
        servicePort: 
          default: 0
          description: "Is a helper port intended for doing service discovery using a\nwell-known port per service.\nThe assigned servicePort value is not used/interpreted by\nMarathon itself but supposed to used by load balancer\ninfrastructure.\nSee Service Discovery Load Balancing doc page.\nThe servicePort parameter is optional and defaults to 0.\nLike hostPort, If the value is 0, a random port will be assigned.\nIf a servicePort value is assigned by Marathon then Marathon\nguarantees that its value is unique across the cluster.\nThe values for random service ports are in the range\n[local_port_min, local_port_max] where local_port_min and\nlocal_port_max are command line options with default values of\n10000 and 20000, respectively.\n"
          $ref: "#/definitions/app.number.AnyPort"
        networkNames: 
          description: "List of the container networks associated with this mapping. If\nabsent, then this mapping is associated with all defined container\nnetworks (for this application). A single item list is mandatory when\n`hostPort` is specified and multiple container networks are defined.\n"
          type: "array"
          items: 
            $ref: "#/definitions/strings.Name"
          x-annotation-app.pragma.omitEmpty: null
      required: 
        - "containerPort"
    app.appContainer.DockerContainer: 
      type: "object"
      properties: 
        credential: 
          description: "The credentials to fetch this container.\nPlease note: this property is supported only with the Mesos containerizer, not the docker containerizer.\n"
          $ref: "#/definitions/app.appContainer.DockerCredentials"
          x-annotation-app.pragma.deprecated: "Deprecated since Marathon v1.5 in favor of pullConfig"
        pullConfig: 
          description: "Docker's config.json given as a secret name into a secret store\nwhich corresponding value is a content of `~/.docker/config.json`.\nIt is supported only with Mesos containerizer.\n"
          $ref: "#/definitions/app.appContainer.docker.DockerPullConfig"
        forcePullImage: 
          default: false
          description: "The container will be pulled, regardless if it is already available on\nthe local system.\n"
          type: "boolean"
        image: 
          minLength: 1
          description: "The name of the docker image to use"
          type: "string"
        network: 
          $ref: "#/definitions/app.appContainer.DockerNetwork"
          x-annotation-app.pragma.deprecated: "Deprecated in favor of App.networks"
        parameters: 
          description: "Allowing arbitrary parameters to be passed to docker CLI.\nNote that anything passed to this field is not guaranteed to be\nsupported moving forward, as we might move away from the docker CLI.\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.appContainer.DockerParameter"
        portMappings: 
          type: "array"
          items: 
            $ref: "#/definitions/app.appContainer.ContainerPortMapping"
          x-annotation-app.pragma.deprecated: "Deprecated in favor of Container.portMappings"
          x-annotation-app.pragma.forceOptional: null
        privileged: 
          default: false
          description: "Run this docker image in privileged mode\nPlease note: this property is supported only with the docker containerizer, not the Mesos containerizer.\n"
          type: "boolean"
      required: 
        - "image"
    app.appContainer.Container: 
      type: "object"
      properties: 
        type: 
          default: "DOCKER"
          $ref: "#/definitions/app.appContainer.EngineType"
        docker: 
          $ref: "#/definitions/app.appContainer.DockerContainer"
        linuxInfo: 
          $ref: "#/definitions/pod.linux.LinuxInfo"
        volumes: 
          type: "array"
          items: 
            $ref: "#/definitions/pod.volumes.AppVolume"
        portMappings: 
          description: "Map container ports to host and service ports when using bridge- or container-mode networking.\nIf left unspecified, Marathon will provide a single, default port mapping.\nTo obtain a container with no port mappings, specify an empty array here.\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.appContainer.ContainerPortMapping"
          x-annotation-app.pragma.forceOptional: null
      required: 
        - "type"
    app.artifact.Artifact: 
      example: 
        uri: "http://download.me/file.tgz"
        extract: true
        executable: true
        cache: false
      type: "object"
      properties: 
        uri: 
          $ref: "#/definitions/strings.Uri"
        extract: 
          default: true
          type: "boolean"
        executable: 
          default: false
          type: "boolean"
        cache: 
          default: false
          type: "boolean"
        destPath: 
          $ref: "#/definitions/strings.Path"
      required: 
        - "uri"
    app.check.HttpCheck: 
      type: "object"
      properties: 
        endpoint: 
          description: "The endpoint name to use.\nIn \"host\" mode checks use the hostPort. In other modes use the containerPort.\n"
          $ref: "#/definitions/strings.Name"
        path: 
          $ref: "#/definitions/strings.Path"
        scheme: 
          default: "HTTP"
          $ref: "#/definitions/strings.HttpScheme"
      required: 
        - "endpoint"
    app.check.TcpCheck: 
      type: "object"
      properties: 
        endpoint: 
          description: "The endpoint name to use.\nIn \"host\" mode checks use the hostPort. In other modes use the containerPort.\n"
          $ref: "#/definitions/strings.Name"
      required: 
        - "endpoint"
    app.check.CommandCheck: 
      type: "object"
      properties: 
        command: 
          $ref: "#/definitions/app.check.command.MesosCommand"
      required: 
        - "command"
    app.check.AppHttpCheck: 
      type: "object"
      properties: 
        portIndex: 
          description: "Index in this app's ports array to be used for check requests.\nAn index is used so the app can use random ports,\nlike [0, 0, 0] for example, and tasks could be started with\nport environment variables like $PORT1.\n"
          $ref: "#/definitions/app.number.AnyPort"
        port: 
          description: "The specific port to connect to.\nIn case of dynamic ports, see portIndex.\n"
          $ref: "#/definitions/app.number.AnyPort"
        path: 
          $ref: "#/definitions/strings.Path"
        scheme: 
          default: "HTTP"
          $ref: "#/definitions/strings.HttpScheme"
    app.check.AppTcpCheck: 
      type: "object"
      properties: 
        portIndex: 
          description: "Index in this app's ports array to be used for check requests.\nAn index is used so the app can use random ports,\nlike [0, 0, 0] for example, and tasks could be started with\nport environment variables like $PORT1.\n"
          $ref: "#/definitions/app.number.AnyPort"
        port: 
          description: "The specific port to connect to.\nIn case of dynamic ports, see portIndex.\n"
          $ref: "#/definitions/app.number.AnyPort"
    app.check.Check: 
      type: "object"
      properties: 
        http: 
          $ref: "#/definitions/app.check.HttpCheck"
        tcp: 
          $ref: "#/definitions/app.check.TcpCheck"
        exec: 
          description: "Command that executes some check process.\nUse with pods requires Mesos v1.2 or higher.\n"
          $ref: "#/definitions/app.check.CommandCheck"
        intervalSeconds: 
          default: 60
          minimum: 0
          format: "int32"
          description: "Interval between the checks"
          type: "integer"
        timeoutSeconds: 
          default: 20
          minimum: 0
          format: "int32"
          description: "Amount of time to wait for the check to complete."
          type: "integer"
        delaySeconds: 
          default: 15
          minimum: 0
          format: "int32"
          description: "Amount of time to wait until starting the checks."
          type: "integer"
    app.check.AppCheck: 
      type: "object"
      properties: 
        http: 
          $ref: "#/definitions/app.check.AppHttpCheck"
        tcp: 
          $ref: "#/definitions/app.check.AppTcpCheck"
        exec: 
          description: "Command that executes some check process.\nUse with pods requires Mesos v1.2 or higher.\n"
          $ref: "#/definitions/app.check.CommandCheck"
        intervalSeconds: 
          default: 60
          minimum: 0
          format: "int32"
          description: "Interval between the checks"
          type: "integer"
        timeoutSeconds: 
          default: 20
          minimum: 0
          format: "int32"
          description: "Amount of time to wait for the check to complete."
          type: "integer"
        delaySeconds: 
          default: 15
          minimum: 0
          format: "int32"
          description: "Amount of time to wait until starting the checks."
          type: "integer"
    app.check.HttpCheckStatus: 
      type: "object"
      properties: 
        statusCode: 
          minimum: 0
          format: "int32"
          description: "HTTP Check response status code"
          type: "integer"
      required: 
        - "statusCode"
    app.check.TCPCheckStatus: 
      type: "object"
      properties: 
        succeeded: 
          description: "TCP Check responded"
          type: "boolean"
      required: 
        - "succeeded"
    app.check.CommandCheckStatus: 
      type: "object"
      properties: 
        exitCode: 
          format: "int32"
          description: "Command Check process exit code"
          type: "integer"
      required: 
        - "exitCode"
    app.check.CheckStatus: 
      type: "object"
      properties: 
        http: 
          $ref: "#/definitions/app.check.HttpCheckStatus"
        tcp: 
          $ref: "#/definitions/app.check.TCPCheckStatus"
        command: 
          $ref: "#/definitions/app.check.CommandCheckStatus"
    app.constraints.ConstraintOperator: 
      enum: 
        - "UNIQUE"
        - "CLUSTER"
        - "GROUP_BY"
        - "LIKE"
        - "UNLIKE"
        - "MAX_PER"
        - "IS"
      type: "string"
    app.constraints.Constraint: 
      type: "object"
      example: 
        fieldName: "hostname"
        operator: "UNIQUE"
      properties: 
        fieldName: 
          type: "string"
        operator: 
          $ref: "#/definitions/app.constraints.ConstraintOperator"
        value: 
          type: "string"
      required: 
        - "fieldName"
        - "operator"
    app.constraints.AppConstraint: 
      minItems: 2
      maxItems: 3
      description: "v2 App defined constraints as a 2 or 3 element array\nwith [fieldName, ConstraintOperator(,value?)].\n"
      example: 
        - "hostname"
        - "UNIQUE"
      type: "array"
      items: 
        type: "string"
      x-annotation-app.pragma.omitEmpty: null
    app.constraints.VolumeConstraint: 
      minItems: 2
      maxItems: 3
      description: "Constrain which volume to choose on the agent.\nCurrently, it is only possible to constrain the path of the disk resource by regular expression.\n"
      type: "array"
      items: 
        type: "string"
      x-annotation-app.pragma.omitEmpty: null
    deleteTasks.DeleteTasks: 
      description: "List of task ids that should be deleted."
      type: "object"
      properties: 
        ids: 
          type: "array"
          items: 
            type: "string"
      required: 
        - "ids"
    deploymentResult.DeploymentResult: 
      description: "Result of the deployment"
      type: "object"
      properties: 
        deploymentId: 
          type: "string"
        version: 
          type: "string"
          format: "date-time"
      required: 
        - "deploymentId"
        - "version"
    metrics.deprecatedMetrics.DeprecatedTimeMeasurement: 
      description: "The unit of time"
      type: "string"
    metrics.deprecatedMetrics.DeprecatedGeneralMeasurement: 
      type: "object"
      properties: 
        name: 
          type: "string"
        label: 
          type: "string"
      required: 
        - "name"
        - "label"
    metrics.deprecatedMetrics.DeprecatedUnitOfMeasurement: 
      oneOf: 
        - 
          $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedTimeMeasurement"
        - 
          $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedGeneralMeasurement"
    metrics.deprecatedMetrics.DeprecatedHistogram: 
      type: "object"
      properties: 
        count: 
          format: "int64"
          description: "The number of samples"
          type: "integer"
        min: 
          format: "int64"
          description: "The minimum value"
          type: "number"
        max: 
          format: "int64"
          description: "The maximum value"
          type: "number"
        p50: 
          format: "int64"
          description: "The 50th percentile median value"
          type: "number"
        p75: 
          format: "int64"
          description: "The 75th percentile median value"
          type: "number"
        p98: 
          format: "int64"
          description: "The 98th percentile median value"
          type: "number"
        p99: 
          format: "int64"
          description: "The 99th percentile median value"
          type: "number"
        p999: 
          format: "int64"
          description: "The 999th percentile median value"
          type: "number"
        mean: 
          format: "float"
          description: "The average of all samples"
          type: "number"
        tags: 
          description: "metadata about the metric"
          type: "object"
          additionalProperties: 
            type: "string"
        unit: 
          description: "The unit of measurement"
          $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedUnitOfMeasurement"
      required: 
        - "count"
        - "min"
        - "max"
        - "p50"
        - "p75"
        - "p98"
        - "p99"
        - "p999"
        - "mean"
        - "tags"
        - "unit"
    metrics.deprecatedMetrics.DeprecatedCounter: 
      type: "object"
      properties: 
        count: 
          format: "int64"
          description: "The current value"
          type: "integer"
        tags: 
          description: "metadata about the metric"
          type: "object"
          additionalProperties: 
            type: "string"
        unit: 
          description: "The unit of measurement"
          $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedUnitOfMeasurement"
      required: 
        - "count"
        - "tags"
        - "unit"
    metrics.deprecatedMetrics.DeprecatedMetrics: 
      type: "object"
      additionalProperties: 
        type: "object"
      properties: 
        start: 
          type: "string"
          format: "date-time"
        end: 
          type: "string"
          format: "date-time"
        histograms: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedHistogram"
        counters: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedCounter"
        gauges: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedHistogram"
        min-max-counters: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedHistogram"
      required: 
        - "start"
        - "end"
        - "histograms"
        - "counters"
        - "gauges"
        - "min-max-counters"
    app.appContainer.docker.DockerPullConfig: 
      description: "Docker's config.json. It should be specifed only as a secret\nname into a secret store, and the corresponding value should be\na stringified valid JSON object which can be found in\n`~/.docker/config.json`.\n"
      type: "object"
      properties: 
        secret: 
          minLength: 1
          type: "string"
      required: 
        - "secret"
    app.env.EnvVarValue: 
      type: "string"
    app.env.EnvVarSecret: 
      description: "An environment variable set to a secret"
      type: "object"
      properties: 
        secret: 
          description: "The name of the secret to refer to. At runtime, the value of the\nsecret will be injected into the value of the variable.\n"
          type: "string"
      required: 
        - "secret"
    app.env.EnvVarValueOrSecret: 
      oneOf: 
        - 
          $ref: "#/definitions/app.env.EnvVarValue"
        - 
          $ref: "#/definitions/app.env.EnvVarSecret"
    app.env.EnvVars: 
      type: "object"
      additionalProperties: 
        $ref: "#/definitions/app.env.EnvVarValueOrSecret"
    app.env.LegacyEnvVars: 
      type: "object"
      additionalProperties: 
        $ref: "#/definitions/app.env.EnvVarValueOrSecret"
    error.ErrorDetail: 
      type: "object"
      properties: 
        message: 
          type: "string"
        errors: 
          type: "array"
          items: 
            type: "string"
    error.Error: 
      type: "object"
      properties: 
        message: 
          type: "string"
        details: 
          type: "array"
          items: 
            $ref: "#/definitions/error.ErrorDetail"
      required: 
        - "message"
    app.health.HealthCheck: 
      properties: 
        http: 
          $ref: "#/definitions/app.check.HttpCheck"
        tcp: 
          $ref: "#/definitions/app.check.TcpCheck"
        exec: 
          description: "Command that executes some health check process.\nUse with pods requires Mesos v1.2 or higher.\n"
          $ref: "#/definitions/app.check.CommandCheck"
        gracePeriodSeconds: 
          default: 300
          minimum: 0
          format: "int32"
          description: "Health check failures are ignored within this number of seconds of\nthe task being started or until the task becomes healthy for the\nfirst time.\n"
          type: "integer"
        intervalSeconds: 
          default: 60
          minimum: 0
          format: "int32"
          description: "Interval between the health checks"
          type: "integer"
        maxConsecutiveFailures: 
          default: 3
          minimum: 0
          format: "int32"
          description: "Number of consecutive failures until the task will be killed"
          type: "integer"
        timeoutSeconds: 
          default: 20
          minimum: 0
          format: "int32"
          description: "Amount of time to wait for the health check to complete."
          type: "integer"
        delaySeconds: 
          default: 15
          minimum: 0
          format: "int32"
          description: "Amount of time to wait until starting the health checks."
          type: "integer"
      type: "object"
    app.health.AppHealthCheckProtocol: 
      description: "Protocol of the requests to be performed.\n"
      enum: 
        - "HTTP"
        - "HTTPS"
        - "TCP"
        - "COMMAND"
        - "MESOS_TCP"
        - "MESOS_HTTP"
        - "MESOS_HTTPS"
      type: "string"
    app.health.AppCommandCheck: 
      properties: 
        value: 
          description: "Command line executed by the default shell.\nThis process has to return with a zero exit code to indicate the process is healthy.\nReturn codes other than null signal, the task is unhealthy.\n"
          type: "string"
      required: 
        - "value"
      type: "object"
    app.health.AppHealthCheck: 
      type: "object"
      properties: 
        command: 
          $ref: "#/definitions/app.health.AppCommandCheck"
        gracePeriodSeconds: 
          default: 300
          minimum: 0
          format: "int32"
          description: "Health check failures are ignored within this number of seconds of\nthe task being started or until the task becomes healthy for the\nfirst time.\n"
          type: "integer"
        ignoreHttp1xx: 
          description: "Ignore HTTP 1xx responses"
          type: "boolean"
        intervalSeconds: 
          default: 60
          minimum: 0
          format: "int32"
          description: "Number of seconds to wait between health checks"
          type: "integer"
        maxConsecutiveFailures: 
          default: 3
          minimum: 0
          format: "int32"
          description: "Number of consecutive health check failures after which the\nunhealthy task should be killed.\n"
          type: "integer"
        path: 
          description: "Path to endpoint exposed by the task that will provide health status.\nNote: only used if protocol == HTTP[S].\"\n"
          example: "/path/to/health"
          type: "string"
        port: 
          description: "The specific port to connect to.\nIn case of dynamic ports, see portIndex.\n"
          $ref: "#/definitions/app.number.AnyPort"
        portIndex: 
          description: "Index in this app's ports array to be used for health requests.\nAn index is used so the app can use random ports,\nlike [0, 0, 0] for example, and tasks could be started with\nport environment variables like $PORT1.\n"
          $ref: "#/definitions/app.number.AnyPort"
        protocol: 
          default: "HTTP"
          $ref: "#/definitions/app.health.AppHealthCheckProtocol"
        ipProtocol: 
          default: "IPv4"
          $ref: "#/definitions/strings.IpProtocol"
        timeoutSeconds: 
          default: 20
          format: "int32"
          description: "Number of seconds after which a health check is considered a failure\nregardless of the response.\n"
          type: "integer"
        delaySeconds: 
          default: 15
          minimum: 0
          format: "int32"
          description: "Amount of time to wait until starting the health checks."
          type: "integer"
    app.health.Health: 
      type: "object"
      properties: 
        alive: 
          type: "boolean"
        consecutiveFailures: 
          format: "int32"
          type: "number"
        firstSuccess: 
          type: "string"
        instanceId: 
          $ref: "#/definitions/strings.InstanceId"
        lastSuccess: 
          type: "string"
        lastFailure: 
          type: "string"
        lastFailureCause: 
          type: "string"
      required: 
        - "alive"
        - "consecutiveFailures"
        - "instanceId"
    info.LeaderInfo: 
      type: "object"
      properties: 
        leader: 
          type: "string"
      required: 
        - "leader"
    info.MarathonConfig: 
      type: "object"
      properties: 
        access_control_allow_origin: 
          type: "array"
          items: 
            type: "string"
        checkpoint: 
          type: "boolean"
        decline_offer_duration: 
          format: "int64"
          type: "number"
        default_network_name: 
          type: "string"
        env_vars_prefix: 
          type: "string"
        executor: 
          type: "string"
        failover_timeout: 
          format: "int64"
          type: "number"
        features: 
          type: "array"
          items: 
            type: "string"
        framework_name: 
          type: "string"
        ha: 
          type: "boolean"
        hostname: 
          type: "string"
        launch_token: 
          format: "int32"
          type: "number"
        launch_token_refresh_interval: 
          format: "int64"
          type: "number"
        leader_proxy_connection_timeout_ms: 
          format: "int32"
          type: "number"
        leader_proxy_read_timeout_ms: 
          format: "int32"
          type: "number"
        local_port_max: 
          format: "int32"
          type: "number"
        local_port_min: 
          format: "int32"
          type: "number"
        master: 
          type: "string"
        max_instances_per_offer: 
          format: "int32"
          type: "number"
        mesos_bridge_name: 
          type: "string"
        mesos_heartbeat_failure_threshold: 
          format: "int32"
          type: "number"
        mesos_heartbeat_interval: 
          format: "int64"
          type: "number"
        mesos_leader_ui_url: 
          type: "string"
        mesos_role: 
          type: "string"
        mesos_user: 
          type: "string"
        min_revive_offers_interval: 
          format: "int64"
          type: "number"
        offer_matching_timeout: 
          format: "int64"
          type: "number"
        on_elected_prepare_timeout: 
          format: "int64"
          type: "number"
        reconciliation_initial_delay: 
          format: "int64"
          type: "number"
        reconciliation_interval: 
          format: "int64"
          type: "number"
        scale_apps_initial_delay: 
          format: "int64"
          type: "number"
        scale_apps_interval: 
          format: "int64"
          type: "number"
        store_cache: 
          type: "boolean"
        task_launch_confirm_timeout: 
          format: "int64"
          type: "number"
        task_launch_timeout: 
          format: "int64"
          type: "number"
        task_lost_expunge_initial_delay: 
          format: "int64"
          type: "number"
        task_lost_expunge_interval: 
          format: "int64"
          type: "number"
        task_reservation_timeout: 
          format: "int64"
          type: "number"
        webui_url: 
          type: "string"
      required: 
        - "features"
        - "task_lost_expunge_initial_delay"
        - "task_lost_expunge_interval"
    info.ZooKeeperConfig: 
      type: "object"
      properties: 
        zk: 
          type: "string"
        zk_compression: 
          type: "boolean"
        zk_compression_threshold: 
          format: "int64"
          type: "number"
        zk_connection_timeout: 
          format: "int64"
          type: "number"
        zk_max_node_size: 
          format: "int64"
          type: "number"
        zk_max_versions: 
          format: "int32"
          type: "number"
        zk_session_timeout: 
          format: "int64"
          type: "number"
        zk_timeout: 
          format: "int64"
          type: "number"
      required: 
        - "zk"
        - "zk_connection_timeout"
        - "zk_max_versions"
        - "zk_session_timeout"
        - "zk_timeout"
    info.HttpConfig: 
      type: "object"
      properties: 
        http_port: 
          minimum: 0
          format: "int32"
          type: "number"
        https_port: 
          minimum: 0
          format: "int32"
          type: "number"
      required: 
        - "http_port"
        - "https_port"
    info.MarathonInfo: 
      type: "object"
      properties: 
        name: 
          type: "string"
        version: 
          type: "string"
        buildref: 
          type: "string"
        elected: 
          type: "boolean"
        leader: 
          type: "string"
        frameworkId: 
          type: "string"
        marathon_config: 
          $ref: "#/definitions/info.MarathonConfig"
        zookeeper_config: 
          $ref: "#/definitions/info.ZooKeeperConfig"
        http_config: 
          $ref: "#/definitions/info.HttpConfig"
      required: 
        - "name"
        - "version"
        - "buildref"
        - "elected"
        - "marathon_config"
        - "zookeeper_config"
        - "http_config"
    instance.AgentInfo: 
      type: "object"
      properties: 
        host: 
          type: "string"
        agentId: 
          type: "string"
        region: 
          type: "string"
        zone: 
          type: "string"
        attributes: 
          type: "array"
          items: 
            $ref: "#/definitions/instance.offer.AgentAttribute"
      required: 
        - "host"
        - "attributes"
    instance.InstanceState: 
      type: "object"
      properties: 
        condition: 
          $ref: "#/definitions/strings.Condition"
        since: 
          type: "string"
          format: "date-time"
        activeSince: 
          type: "string"
          format: "date-time"
        healthy: 
          type: "boolean"
        goal: 
          $ref: "#/definitions/strings.Goal"
      required: 
        - "condition"
        - "since"
        - "goal"
    instance.Instance: 
      type: "object"
      properties: 
        instanceId: 
          $ref: "#/definitions/strings.InstanceId"
        state: 
          $ref: "#/definitions/instance.InstanceState"
        agentInfo: 
          $ref: "#/definitions/instance.AgentInfo"
        runSpecVersion: 
          type: "string"
          format: "date-time"
        unreachableStrategy: 
          $ref: "#/definitions/app.unreachableStrategy.UnreachableStrategy"
      required: 
        - "instanceId"
        - "state"
        - "runSpecVersion"
        - "unreachableStrategy"
    app.killSelection.KillSelection: 
      default: "YOUNGEST_FIRST"
      description: "Defines which instance is killed first."
      enum: 
        - "YOUNGEST_FIRST"
        - "OLDEST_FIRST"
      type: "string"
    app.label.KVLabels: 
      type: "object"
      additionalProperties: 
        type: "string"
    pod.linux.Seccomp: 
      type: "object"
      properties: 
        profileName: 
          description: "Filename of the Seccomp profile found on the agent.  The task will fail if that file does not exist."
          type: "string"
        unconfined: 
          default: false
          description: "Set to `true` if Seccomp is not applied to the container"
          type: "boolean"
      required: 
        - "unconfined"
    pod.linux.IPCMode: 
      enum: 
        - "PRIVATE"
        - "SHARE_PARENT"
      type: "string"
    pod.linux.IPCInfo: 
      type: "object"
      properties: 
        mode: 
          description: "Defines the shared memory and IPC contraints."
          $ref: "#/definitions/pod.linux.IPCMode"
        shmSize: 
          format: "int32"
          description: "The size of shared memory to be used in MiB."
          type: "number"
      required: 
        - "mode"
    pod.linux.LinuxInfo: 
      type: "object"
      properties: 
        seccomp: 
          $ref: "#/definitions/pod.linux.Seccomp"
        ipcInfo: 
          $ref: "#/definitions/pod.linux.IPCInfo"
    podStatus.localVolumes.LocalVolumeId: 
      type: "object"
      properties: 
        runSpecId: 
          $ref: "#/definitions/strings.PathId"
        containerPath: 
          type: "string"
        uuid: 
          type: "string"
        persistenceId: 
          $ref: "#/definitions/strings.PersistenceId"
      required: 
        - "runSpecId"
        - "containerPath"
        - "uuid"
        - "persistenceId"
    logging.LoggerLevel: 
      description: "Enumeration type for all available log level.\n"
      enum: 
        - "trace"
        - "debug"
        - "info"
        - "warn"
        - "error"
      type: "string"
    logging.Loggers: 
      type: "object"
      additionalProperties: 
        type: "string"
    logging.LoggerChange: 
      type: "object"
      properties: 
        level: 
          description: "The log level to set."
          $ref: "#/definitions/logging.LoggerLevel"
        logger: 
          description: "The full qualified name of the logger."
          type: "string"
        durationSeconds: 
          format: "int32"
          description: "The number of seconds to set this logging level.\nThe current logging level is reset after the duration.\nIf this parameter is not defined, the change to the logging level is permanent\n"
          type: "integer"
      required: 
        - "level"
        - "logger"
    app.check.command.ShellCommand: 
      type: "object"
      additionalProperties: 
        type: "nil"
      properties: 
        shell: 
          minLength: 1
          description: "command line executed by the default shell, not parsed by marathon\n"
          type: "string"
      required: 
        - "shell"
    app.check.command.ArgvCommand: 
      type: "object"
      additionalProperties: 
        type: "nil"
      properties: 
        argv: 
          minItems: 1
          description: "named executable first, followed by one or more parameters"
          type: "array"
          items: 
            type: "string"
      required: 
        - "argv"
    app.check.command.MesosCommand: 
      oneOf: 
        - 
          $ref: "#/definitions/app.check.command.ShellCommand"
        - 
          $ref: "#/definitions/app.check.command.ArgvCommand"
    metrics.Metrics: 
      oneOf: 
        - 
          $ref: "#/definitions/metrics.deprecatedMetrics.DeprecatedMetrics"
        - 
          $ref: "#/definitions/metrics.newMetrics.NewMetrics"
    app.network.Endpoint: 
      description: "Endpoints accept connections from outside of a pod.\nEndpoints may also be advertised outside of a cluster.\n"
      type: "object"
      properties: 
        name: 
          minLength: 1
          maxLength: 63
          description: "Name of this port. Should be unique in the context of the pod.\n"
          $ref: "#/definitions/strings.Name"
        containerPort: 
          description: "The container port that a task's process is actually listening on.\nRequired if the network mode is container\n"
          $ref: "#/definitions/app.number.Port"
        hostPort: 
          description: "Mapped port on the host.\nAll host ports are allocated from resource offers.\n"
          $ref: "#/definitions/app.number.AnyPort"
        protocol: 
          minItems: 1
          description: "The protocol of this port, advertised in Mesos DiscoveryInfo (DI).\nSpecifying more than one protocol here will result in the generation\nof multiple Port DI entries.\n"
          type: "array"
          items: 
            $ref: "#/definitions/strings.Name"
          x-annotation-app.pragma.omitEmpty: null
        labels: 
          description: "Metadata as key/value pair. Possible uses include VIPs,\nper-network-interface binding\n"
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
        networkNames: 
          description: "List of the container networks associated with this endpoint. If\nabsent, then this endpoint is associated with all defined container\nnetworks (for this application). A single item list is mandatory when\n`hostPort` is specified and multiple container networks are defined.\n"
          type: "array"
          items: 
            $ref: "#/definitions/strings.Name"
          x-annotation-app.pragma.omitEmpty: null
      required: 
        - "name"
    app.network.NetworkMode: 
      description: "`container` networks are named networks and are assigned an IP address by Mesos.\nThe `container/bridge` network is a special container network that operates in a\nmanner similar to Docker's \"default bridge\" mode, and depends on specific Mesos\nCNI support. The `host` network results in containers sharing the network namespace\nof the Mesos agent, and no IP address is allocated.\n"
      enum: 
        - "container"
        - "container/bridge"
        - "host"
      type: "string"
    app.network.Network: 
      type: "object"
      properties: 
        name: 
          description: "Defines the name of the container network to join. Not for use with `host` mode networking."
          $ref: "#/definitions/strings.NetworkName"
        mode: 
          default: "container"
          $ref: "#/definitions/app.network.NetworkMode"
        labels: 
          description: "Labels applied to the pod's NetworkInfo.\nIgnored when using `host` node networking.\n"
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
    app.network.IpDiscoveryPort: 
      description: "Port"
      type: "object"
      properties: 
        number: 
          default: 0
          description: "The port number"
          $ref: "#/definitions/app.number.AnyPort"
        name: 
          description: "Name of the port"
          $ref: "#/definitions/strings.LegacyName"
        protocol: 
          default: "tcp"
          $ref: "#/definitions/strings.NetworkProtocol"
        labels: 
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
      required: 
        - "name"
    app.network.IpDiscovery: 
      description: "Information useful for service discovery"
      type: "object"
      properties: 
        ports: 
          description: "Array of objects describing the ports exposed by each task\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.network.IpDiscoveryPort"
          x-annotation-app.pragma.omitEmpty: null
    app.network.IpAddress: 
      description: "If an application definition includes the 'ipAddress' field, then Marathon\nwill request a per-task IP from Mesos.\nA separate ports/portMappings configuration is then disallowed.\n"
      type: "object"
      properties: 
        discovery: 
          description: "DEPRECATED. Please try to use portMappings instead.\n"
          $ref: "#/definitions/app.network.IpDiscovery"
        groups: 
          uniqueItems: true
          description: "Ignored by Marathon, only exists here to preserve API compat (for now)."
          type: "array"
          items: 
            type: "string"
          x-annotation-app.pragma.omitEmpty: null
        labels: 
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
        networkName: 
          minLength: 1
          description: "If present, declares the name of the network that the container should\njoin.\nIn practice it is up to the IPAM to decide how to interpret this field\n"
          type: "string"
      x-annotation-app.pragma.deprecated: "Experimental API that is now deprecated. Prefer portMappings"
    app.network.PortDefinition: 
      type: "object"
      properties: 
        port: 
          default: 0
          description: "If requirePorts is set to true, then this port number will be used\non the agent host. Otherwise if the requirePorts is set to false and\nthis port number is not zero, then it will be used as a service port\nand a dynamic port will be used on the agent host.\nIf it is set to zero, a dynamic port will be used on the host and a\nunique service port will be assigned by Marathon.\n"
          $ref: "#/definitions/app.number.AnyPort"
        labels: 
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
        name: 
          description: "Name of the service hosted on this port.\nIf provided, it must be unique over all port definitions.\n"
          $ref: "#/definitions/strings.LegacyName"
        protocol: 
          default: "tcp"
          description: "If this port is used for tcp or udp or both."
          $ref: "#/definitions/strings.NetworkProtocol"
    metrics.newMetrics.Counter: 
      type: "object"
      properties: 
        count: 
          format: "int64"
          type: "integer"
      required: 
        - "count"
    metrics.newMetrics.Gauge: 
      type: "object"
      properties: 
        value: 
          format: "double"
          type: "number"
      required: 
        - "value"
    metrics.newMetrics.Histogram: 
      type: "object"
      properties: 
        count: 
          format: "int64"
          type: "integer"
        min: 
          format: "double"
          type: "number"
        mean: 
          format: "double"
          type: "number"
        max: 
          format: "double"
          type: "number"
        p50: 
          format: "double"
          type: "number"
        p75: 
          format: "double"
          type: "number"
        p95: 
          format: "double"
          type: "number"
        p98: 
          format: "double"
          type: "number"
        p99: 
          format: "double"
          type: "number"
        p999: 
          format: "double"
          type: "number"
        stddev: 
          format: "double"
          type: "number"
      required: 
        - "count"
        - "min"
        - "mean"
        - "max"
        - "p50"
        - "p75"
        - "p95"
        - "p98"
        - "p99"
        - "p999"
        - "stddev"
    metrics.newMetrics.Meter: 
      type: "object"
      properties: 
        count: 
          format: "int64"
          type: "integer"
        m1_rate: 
          format: "double"
          type: "number"
        m5_rate: 
          format: "double"
          type: "number"
        m15_rate: 
          format: "double"
          type: "number"
        mean_rate: 
          format: "double"
          type: "number"
        units: 
          type: "string"
      required: 
        - "count"
        - "m1_rate"
        - "m5_rate"
        - "m15_rate"
        - "mean_rate"
        - "units"
    metrics.newMetrics.Timer: 
      type: "object"
      properties: 
        count: 
          format: "int64"
          type: "integer"
        min: 
          format: "double"
          type: "number"
        mean: 
          format: "double"
          type: "number"
        max: 
          format: "double"
          type: "number"
        p50: 
          format: "double"
          type: "number"
        p75: 
          format: "double"
          type: "number"
        p95: 
          format: "double"
          type: "number"
        p98: 
          format: "double"
          type: "number"
        p99: 
          format: "double"
          type: "number"
        p999: 
          format: "double"
          type: "number"
        stddev: 
          format: "double"
          type: "number"
        m1_rate: 
          format: "double"
          type: "number"
        m5_rate: 
          format: "double"
          type: "number"
        m15_rate: 
          format: "double"
          type: "number"
        mean_rate: 
          format: "double"
          type: "number"
        duration_units: 
          type: "string"
        rate_units: 
          type: "string"
      required: 
        - "count"
        - "min"
        - "mean"
        - "max"
        - "p50"
        - "p75"
        - "p95"
        - "p98"
        - "p99"
        - "p999"
        - "stddev"
        - "m1_rate"
        - "m5_rate"
        - "m15_rate"
        - "mean_rate"
        - "duration_units"
        - "rate_units"
    metrics.newMetrics.NewMetrics: 
      type: "object"
      properties: 
        version: 
          type: "string"
        counters: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.newMetrics.Counter"
        gauges: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.newMetrics.Gauge"
        histograms: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.newMetrics.Histogram"
        meters: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.newMetrics.Meter"
        timers: 
          type: "object"
          additionalProperties: 
            $ref: "#/definitions/metrics.newMetrics.Timer"
      required: 
        - "version"
        - "counters"
        - "gauges"
        - "histograms"
        - "meters"
        - "timers"
    app.number.Port: 
      minimum: 1
      maximum: 65535
      format: "int32"
      type: "integer"
    app.number.AnyPort: 
      default: 0
      minimum: 0
      maximum: 65535
      format: "int32"
      type: "integer"
    instance.offer.NumberRange: 
      properties: 
        begin: 
          format: "int64"
          type: "number"
        end: 
          format: "int64"
          type: "number"
      required: 
        - "begin"
        - "end"
      type: "object"
    instance.offer.AgentAttribute: 
      properties: 
        name: 
          description: "The name of the attribute."
          type: "string"
        text: 
          description: "The text value of this attribute"
          type: "string"
        scalar: 
          description: "The scalar value of the attribute."
          type: "number"
        ranges: 
          description: "The range value of the attribute."
          type: "array"
          items: 
            $ref: "#/definitions/instance.offer.NumberRange"
          x-annotation-app.pragma.forceOptional: null
        set: 
          description: "all values of this attribute."
          type: "array"
          items: 
            type: "string"
          x-annotation-app.pragma.forceOptional: null
      required: 
        - "name"
      type: "object"
    pod.PodScalingPolicyType: 
      enum: 
        - "fixed"
      type: "string"
    pod.PodScalingPolicy: 
      discriminator: "kind"
      description: "Add new possible super-types as different scaling policies are supported.\n"
      properties: 
        kind: 
          $ref: "#/definitions/pod.PodScalingPolicyType"
      required: 
        - "kind"
      type: "object"
    pod.FixedPodScalingPolicy: 
      allOf: 
        - 
          $ref: "#/definitions/pod.PodScalingPolicy"
        - 
          properties: 
            instances: 
              default: 1
              minimum: 0
              format: "int32"
              description: "The number of instances of this pod to start."
              type: "integer"
          required: 
            - "instances"
          type: "object"
    pod.PodSchedulingBackoffStrategy: 
      description: "Configures exponential backoff behavior when launching potentially sick apps.\nThis prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos agents.\nThe backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds.\nThis applies also to tasks that are killed due to failing too many health checks.\n"
      type: "object"
      properties: 
        backoff: 
          default: 1
          minimum: 0
          description: "The initial backoff (seconds) applied when a launched instance fails."
          type: "number"
        backoffFactor: 
          default: 1.15
          minimum: 0
          description: "The factor applied to the current backoff to determine the new backoff."
          type: "number"
        maxLaunchDelay: 
          default: 300
          minimum: 0
          description: "The maximum backoff (seconds) applied when subsequent failures are detected."
          type: "number"
    pod.PodUpgradeStrategy: 
      description: "During an upgrade all instances of an application get replaced by a new version.\nThe upgradeStrategy controls how Marathon stops old versions and launches new versions.\n"
      type: "object"
      properties: 
        minimumHealthCapacity: 
          default: 1
          minimum: 0
          maximum: 1
          description: "A number between 0and 1 that is multiplied with the instance count.\nThis is the minimum number of healthy nodes that do not sacrifice overall application purpose.\nMarathon will make sure, during the upgrade process, that at any point of time this number of healthy instances are up.\n"
          type: "number"
        maximumOverCapacity: 
          default: 1
          minimum: 0
          maximum: 1
          description: "A number between 0 and 1 which is multiplied with the instance count.\nThis is the maximum number of additional instances launched at any point of time during the upgrade process.\n"
          type: "number"
    pod.PodPlacementPolicy: 
      type: "object"
      properties: 
        constraints: 
          uniqueItems: true
          type: "array"
          items: 
            $ref: "#/definitions/app.constraints.Constraint"
          x-annotation-app.pragma.omitEmpty: null
        acceptedResourceRoles: 
          description: "A list of resource roles.\nMarathon considers only resource offers with roles in this list for\nlaunching tasks of this app. If you do not specify this,\nMarathon considers all resource offers with roles that have been\nconfigured by the `--default_accepted_resource_roles` command line flag.\nIf no `--default_accepted_resource_roles` was given on startup,\nMarathon considers all resource offers. To register Marathon for a role,\nyou need to specify the `--mesos_role` command line flag on startup.\nIf you want to assign all resources of a agent to a role,\nyou can use the `--default_role` argument when starting up the agent.\nIf you need a more fine-grained configuration, you can use the\n`--resources` argument to specify resource shares per role.\nSee [the Mesos attribute and resources documentation](http://mesos.apache.org/documentation/latest/attributes-resources/) for details\n"
          example: 
            - "public-facing"
          type: "array"
          items: 
            type: "string"
          x-annotation-app.pragma.omitEmpty: null
    pod.PodSchedulingPolicy: 
      type: "object"
      properties: 
        backoff: 
          $ref: "#/definitions/pod.PodSchedulingBackoffStrategy"
        upgrade: 
          $ref: "#/definitions/pod.PodUpgradeStrategy"
        placement: 
          $ref: "#/definitions/pod.PodPlacementPolicy"
          x-annotation-app.pragma.omitEmpty: null
        killSelection: 
          $ref: "#/definitions/app.killSelection.KillSelection"
        unreachableStrategy: 
          $ref: "#/definitions/app.unreachableStrategy.UnreachableStrategy"
    pod.Pod: 
      description: "A pod allows one to launch a collection co-located (on the same agent) containers\nthat share the same network namespace and that may share the same volumes.\nResources are specified on a per-container basis.\n"
      properties: 
        id: 
          $ref: "#/definitions/strings.PathId"
        labels: 
          description: "Metadata as key/value pair.\nUseful when passing directives to be interpreted by Mesos modules.\n"
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
        version: 
          description: "The version of the definition, immutable"
          type: "string"
          format: "date-time"
        user: 
          description: "The OS user to use to run the tasks on the agent.\nMay be overridden by a container.\n"
          type: "string"
        environment: 
          description: "Environment Variables to set at the pod level.\nIndividual containers may override them\n"
          $ref: "#/definitions/app.env.EnvVars"
          x-annotation-app.pragma.omitEmpty: null
        containers: 
          minItems: 1
          type: "array"
          items: 
            $ref: "#/definitions/pod.container.PodContainer"
        secrets: 
          $ref: "#/definitions/app.secrets.Secrets"
          x-annotation-app.pragma.omitEmpty: null
        volumes: 
          description: "Volumes defined on a pod level that are mounted into containers"
          type: "array"
          items: 
            $ref: "#/definitions/pod.volumes.PodVolume"
          x-annotation-app.pragma.omitEmpty: null
        networks: 
          description: "Network settings are defined on a pod level. All containers share the same network stack.\nAt this time, only one stack is supported.\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.network.Network"
          x-annotation-app.pragma.omitEmpty: null
        scaling: 
          $ref: "#/definitions/pod.PodScalingPolicy"
        scheduling: 
          $ref: "#/definitions/pod.PodSchedulingPolicy"
        executorResources: 
          description: "The resources to allocate to the executor."
          $ref: "#/definitions/app.resources.ExecutorResources"
        role: 
          minLength: 1
          description: "The role to use. If not specified, uses the role of the enclosing group, or the default role.\nAt the moment, only the default role or the group role are allowed\n"
          type: "string"
        linuxInfo: 
          $ref: "#/definitions/pod.linux.LinuxInfo"
      required: 
        - "id"
        - "containers"
      type: "object"
    pod.container.ImageType: 
      enum: 
        - "DOCKER"
      type: "string"
    pod.container.Image: 
      type: "object"
      properties: 
        kind: 
          $ref: "#/definitions/pod.container.ImageType"
        id: 
          description: "address/identifier of the file system image"
          example: "mesosphere/marathon:1.3.0"
          $ref: "#/definitions/strings.Path"
        pullConfig: 
          description: "Name of a secret whose value contains a stringified\nDocker config.json\n"
          $ref: "#/definitions/app.appContainer.docker.DockerPullConfig"
        forcePull: 
          description: "true if the image should always be pulled"
          type: "boolean"
        labels: 
          description: "Used during image discovery and dependency resolution.\nSeveral well-known labels are defined:\nversion: the version of this image\nos: (default: linux) operating system\narch: (default: amd64) architecture\n"
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
      required: 
        - "kind"
        - "id"
    pod.container.MesosExec: 
      type: "object"
      properties: 
        command: 
          description: "Command specification executed by Mesos, not parsed by Marathon.\nThe presence of `command.shell` implies `overrideEntrypoint=true`.\n"
          $ref: "#/definitions/app.check.command.MesosCommand"
        overrideEntrypoint: 
          description: "When true argv[0] will be used as the entrypoint/exec of the container.\nOtherwise the contents of argv[] are appended as arguments.\n"
          type: "boolean"
      required: 
        - "command"
    pod.container.Lifecycle: 
      type: "object"
      properties: 
        killGracePeriodSeconds: 
          minimum: 0
          format: "double"
          description: "After a SIGTERM is sent to a container instance, Mesos will wait this number of seconds\nbefore issuing a SIGKILL.\n"
          type: "number"
    pod.container.PodContainer: 
      description: "Mesos Container"
      type: "object"
      properties: 
        name: 
          description: "The name of this container"
          $ref: "#/definitions/strings.Name"
        exec: 
          $ref: "#/definitions/pod.container.MesosExec"
        resources: 
          description: "The resources to allocate to the container."
          $ref: "#/definitions/app.resources.Resources"
        endpoints: 
          description: "The ports needed to run this container"
          type: "array"
          items: 
            $ref: "#/definitions/app.network.Endpoint"
          x-annotation-app.pragma.omitEmpty: null
        linuxInfo: 
          $ref: "#/definitions/pod.linux.LinuxInfo"
        image: 
          description: "The filesystem image to populate the container with"
          $ref: "#/definitions/pod.container.Image"
        environment: 
          $ref: "#/definitions/app.env.EnvVars"
          x-annotation-app.pragma.omitEmpty: null
        user: 
          description: "The OS user to use to run the tasks on the agent.\nValues here override a \"user\" value specified in the pod definition.\n"
          type: "string"
        healthCheck: 
          description: "The health check to perform on the container, if any."
          $ref: "#/definitions/app.health.HealthCheck"
        check: 
          description: "checks to perform on the container"
          $ref: "#/definitions/app.check.Check"
        volumeMounts: 
          description: "All volume mounts"
          type: "array"
          items: 
            $ref: "#/definitions/pod.volumes.VolumeMount"
          x-annotation-app.pragma.omitEmpty: null
        artifacts: 
          description: "All artifacts to download before the task runs"
          type: "array"
          items: 
            $ref: "#/definitions/app.artifact.Artifact"
          x-annotation-app.pragma.omitEmpty: null
        labels: 
          description: "Metadata as key/value pair.\nUseful when passing directives to be interpreted by Mesos modules.\n"
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
        lifecycle: 
          $ref: "#/definitions/pod.container.Lifecycle"
        tty: 
          description: "Describes if (pseudo) TTY should be allocated for the process of this container.\n"
          type: "boolean"
      required: 
        - "name"
        - "resources"
    podStatus.StatusCondition: 
      type: "object"
      properties: 
        name: 
          description: "Human and machine-readable name of this condition.\nFor example \"healthy\", \"disk-full\".\n"
          $ref: "#/definitions/strings.Name"
        lastChanged: 
          description: "last time the value field was changed for this condition"
          type: "string"
          format: "date-time"
        lastUpdated: 
          description: "last time this condition was updated (value may not have changed)"
          type: "string"
          format: "date-time"
        value: 
          maxLength: 64
          description: "the state of the condition. may be boolean or some enumeration-derived value"
          type: "string"
        reason: 
          description: "a machine-readable value that systems use to reason about the state of the condition\n"
          type: "string"
      required: 
        - "name"
        - "lastChanged"
        - "lastUpdated"
        - "value"
    podStatus.ContainerState: 
      description: "Reflects the status of the associated Mesos task.\n"
      type: "string"
    podStatus.ContainerEndpointStatus: 
      type: "object"
      properties: 
        name: 
          description: "name of the endpoint"
          $ref: "#/definitions/strings.Name"
        allocatedHostPort: 
          $ref: "#/definitions/app.number.Port"
        healthy: 
          description: "true if a health check is defined for this endpoint and is passing"
          type: "boolean"
      required: 
        - "name"
    podStatus.ContainerTerminationState: 
      type: "object"
      properties: 
        exitCode: 
          format: "int32"
          type: "integer"
        message: 
          description: "Human-explanation for container termination."
          type: "string"
    podStatus.ContainerStatus: 
      type: "object"
      properties: 
        name: 
          description: "name of the container specification (within the pod)"
          $ref: "#/definitions/strings.Name"
        status: 
          $ref: "#/definitions/podStatus.ContainerState"
        statusSince: 
          description: "Time at which the status code was last modified.\n"
          type: "string"
          format: "date-time"
        message: 
          description: "Human-friendly explanation for the container's current status.\n"
          type: "string"
        conditions: 
          description: "Set of status conditions that apply to this container.\n"
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.StatusCondition"
        containerId: 
          description: "Unique ID of this container in the cluster.\nTODO(jdef) Probably represents the Mesos task ID.\n"
          type: "string"
        endpoints: 
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.ContainerEndpointStatus"
        resources: 
          description: "Resources in use by this container.\n"
          $ref: "#/definitions/app.resources.Resources"
        termination: 
          $ref: "#/definitions/podStatus.ContainerTerminationState"
        lastUpdated: 
          description: "Time that this status was last checked and updated (even if nothing changed)\n"
          type: "string"
          format: "date-time"
        lastChanged: 
          description: "Time that this status was last modified (some aspect of status did change)\n"
          type: "string"
          format: "date-time"
      required: 
        - "name"
        - "status"
        - "statusSince"
        - "lastUpdated"
        - "lastChanged"
    podStatus.PodState: 
      description: "DEGRADED - The number of STABLE pod instances is less than the number of desired instances.\nSTABLE   - All launched pod instances have started and, if health checks were specified, are all healthy.\nTERMINAL - Marathon is tearing down all of the instances for this pod.\n"
      enum: 
        - "DEGRADED"
        - "STABLE"
        - "TERMINAL"
      type: "string"
    podStatus.NetworkStatus: 
      type: "object"
      properties: 
        name: 
          description: "name of the network"
          $ref: "#/definitions/strings.Name"
        addresses: 
          type: "array"
          items: 
            type: "string"
    podStatus.PodInstanceState: 
      description: "PENDING  - Instance is queued for launch.\nSTAGING  - Instance has been launched but is not yet running.\nSTABLE   - Any terminated containers have completed successfully and any running containers\n           are healthy (TBD by health checks, if enabled).\nDEGRADED - One or more containers are running but the instance is not considered STABLE.\nTERMINAL - Instance is in the process of shutting down.\n"
      enum: 
        - "PENDING"
        - "STAGING"
        - "STABLE"
        - "DEGRADED"
        - "TERMINAL"
      type: "string"
    podStatus.PodInstanceStatus: 
      type: "object"
      properties: 
        id: 
          description: "Unique ID of this pod instance in the cluster.\nTODO(jdef) Probably represents the Mesos executor ID.\n"
          type: "string"
        status: 
          $ref: "#/definitions/podStatus.PodInstanceState"
        statusSince: 
          description: "Time at which the status code was last modified.\n"
          type: "string"
          format: "date-time"
        message: 
          description: "Human-friendly explanation for reason of the current status.\n"
          type: "string"
        conditions: 
          description: "Set of status conditions that apply to this pod instance.\n"
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.StatusCondition"
        agentHostname: 
          description: "Hostname that this instance was launched on.\nMay be an IP address if the agent was configured to advertise its hostname that way.\n"
          type: "string"
        agentId: 
          description: "The Mesos-generated ID of the agent upon which the instance was launched.\n"
          type: "string"
        agentRegion: 
          description: "The @region property of the agent."
          type: "string"
        agentZone: 
          description: "The @zone property of the agent."
          type: "string"
        resources: 
          description: "Sum of all resources allocated for this pod instance.\nMay include additional, system-allocated resources for the default executor.\n"
          $ref: "#/definitions/app.resources.Resources"
        networks: 
          description: "Status of the networks to which this instance is attached.\n"
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.NetworkStatus"
        containers: 
          description: "status for each running container of this instance."
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.ContainerStatus"
        specReference: 
          description: "Location of the version of the pod specification this instance was created from.\n"
          $ref: "#/definitions/strings.Uri"
        localVolumes: 
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.localVolumes.LocalVolumeId"
        lastUpdated: 
          description: "Time that this status was last checked and updated (even if nothing changed)\n"
          type: "string"
          format: "date-time"
        lastChanged: 
          description: "Time that this status was last modified (some aspect of status did change)\n"
          type: "string"
          format: "date-time"
      required: 
        - "id"
        - "status"
        - "statusSince"
        - "lastUpdated"
        - "lastChanged"
    podStatus.ContainerTerminationHistory: 
      type: "object"
      properties: 
        containerId: 
          type: "string"
        lastKnownState: 
          $ref: "#/definitions/podStatus.ContainerState"
        termination: 
          $ref: "#/definitions/podStatus.ContainerTerminationState"
      required: 
        - "containerId"
    podStatus.TerminationHistory: 
      type: "object"
      properties: 
        instanceID: 
          type: "string"
        startedAt: 
          type: "string"
          format: "date-time"
        terminatedAt: 
          type: "string"
          format: "date-time"
        message: 
          description: "Human-friendly explanation for termination.\n"
          type: "string"
        containers: 
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.ContainerTerminationHistory"
      required: 
        - "instanceID"
        - "startedAt"
        - "terminatedAt"
    podStatus.PodStatus: 
      description: "Pod status communicates the lifecycle phase of the pod, current instance and container\nstatus, and recent termination status history.\n"
      properties: 
        id: 
          $ref: "#/definitions/strings.PathId"
        spec: 
          description: "The latest version of the pod specification (that has the same pod ID).\n"
          $ref: "#/definitions/pod.Pod"
        status: 
          $ref: "#/definitions/podStatus.PodState"
        statusSince: 
          description: "Time at which the status code was last modified.\n"
          type: "string"
          format: "date-time"
        message: 
          description: "Human-friendly explanation for reason of the current status.\n"
          type: "string"
        instances: 
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.PodInstanceStatus"
        terminationHistory: 
          description: "List of most recent instance terminations.\nTODO(jdef) determine how many items might show up here; current thinking is .. not many\n"
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.TerminationHistory"
        lastUpdated: 
          description: "Time that this status object was last checked and updated (even if nothing changed)\n"
          type: "string"
          format: "date-time"
        lastChanged: 
          description: "Time that this status object was last modified (some aspect of status did change)\n"
          type: "string"
          format: "date-time"
      required: 
        - "id"
        - "spec"
        - "status"
        - "statusSince"
        - "lastUpdated"
        - "lastChanged"
      type: "object"
    app.readiness.ReadinessCheck: 
      description: "Query these readiness checks to determine if a task is ready to serve requests.\n"
      type: "object"
      properties: 
        name: 
          default: "readinessCheck"
          minLength: 1
          description: "The name used to identify this readiness check"
          type: "string"
        protocol: 
          default: "HTTP"
          $ref: "#/definitions/strings.HttpScheme"
        path: 
          default: "/"
          minLength: 1
          description: "Path to endpoint exposed by the task that will provide readiness status.\n"
          example: "/path/to/health."
          $ref: "#/definitions/strings.Path"
        portName: 
          default: "http-api"
          description: "Name of the port to query as described in the portDefinitions.\n"
          example: "http-api"
          $ref: "#/definitions/strings.LegacyName"
        intervalSeconds: 
          default: 30
          minimum: 0
          format: "int32"
          description: "Number of seconds to wait between readiness checks.\n"
          type: "integer"
        timeoutSeconds: 
          default: 10
          minimum: 1
          format: "int32"
          description: "Number of seconds after which a health check is considered a failure\nregardless of the response.\nMust be smaller than intervalSeconds.\n"
          type: "integer"
        httpStatusCodesForReady: 
          uniqueItems: true
          minItems: 1
          description: "The HTTP(s) status codes to treat as 'ready'"
          type: "array"
          items: 
            minimum: 100
            maximum: 999
            format: "int32"
            type: "integer"
          x-annotation-app.pragma.forceOptional: null
        preserveLastResponse: 
          default: false
          description: "If and only if true, preserve the last readiness check responses and\nexpose them in the API as part of a deployment.\n"
          type: "boolean"
    app.resources.Resources: 
      description: "Resource Allocations"
      type: "object"
      properties: 
        cpus: 
          title: "cpu shares"
          default: 1
          minimum: 0.001
          format: "double"
          description: "The number of CPU shares this pod needs per instance. This number does not have to be integer, but can be a fraction."
          example: 0.1
          type: "number"
        mem: 
          title: "memory"
          default: 128
          minimum: 0.001
          format: "double"
          description: "The amount of memory in MB that is needed for the pod instance"
          example: 512
          type: "number"
        disk: 
          title: "disk space"
          default: 0
          minimum: 0
          format: "double"
          description: "How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction."
          example: 0.2
          type: "number"
        gpus: 
          title: "gpu shares"
          default: 0
          minimum: 0
          format: "int32"
          description: "The amount of GPU cores that are needed for the pod"
          example: 1
          type: "integer"
      required: 
        - "cpus"
        - "mem"
    app.resources.ExecutorResources: 
      description: "Executor Resource Allocations. Same as Resources but reserved for the pod executor."
      type: "object"
      properties: 
        cpus: 
          title: "cpu shares"
          default: 0.1
          minimum: 0.1
          format: "double"
          description: "The number of CPU shares this pod needs per instance for its executor. This number does not have to be integer, but can be a fraction."
          example: 0.2
          type: "number"
        mem: 
          title: "memory"
          default: 32
          minimum: 32
          format: "double"
          description: "The amount of memory in MB that is needed for the pod instance for the pod instance's executor"
          example: 512
          type: "number"
        disk: 
          title: "disk space"
          default: 10
          minimum: 10
          format: "double"
          description: "How much disk space is needed for for the executor. This number does not have to be an integer, but can be a fraction."
          example: 50
          type: "number"
    app.secrets.SecretDef: 
      description: "A secret declaration"
      type: "object"
      properties: 
        source: 
          minLength: 1
          description: "The source of the secrets value.\nThe format dependes on the secret store\n"
          type: "string"
      required: 
        - "source"
    app.secrets.Secrets: 
      description: "A map with named secret declarations.\nThe key is used to reference the values from other places in the parent definition.\n"
      type: "object"
      additionalProperties: 
        $ref: "#/definitions/app.secrets.SecretDef"
    strings.InstanceId: 
      pattern: "^(.+)\\.(instance-|marathon-)([^\\.]+)$"
      type: "string"
    strings.Name: 
      pattern: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
      minLength: 1
      maxLength: 63
      type: "string"
    strings.NetworkName: 
      pattern: "^[a-z0-9]([-a-z0-9_]*[a-z0-9])?$"
      minLength: 1
      maxLength: 63
      type: "string"
    strings.LegacyName: 
      pattern: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
      minLength: 1
      type: "string"
    strings.PathId: 
      pattern: "^(\\/?((\\.\\.)|(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9]))?($|\\/))+$"
      minLength: 1
      description: "Unique identifier for the pod consisting of a series of names separated by slashes.\nEach name must be at least 1 character and may only contain digits (`0-9`), dashes\n(`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.\n"
      example: "/ops/audit"
      type: "string"
    strings.Uri: 
      minLength: 1
      maxLength: 1024
      type: "string"
    strings.Path: 
      minLength: 1
      maxLength: 1024
      type: "string"
    strings.HttpScheme: 
      description: "The http scheme to use"
      enum: 
        - "HTTP"
        - "HTTPS"
      type: "string"
    strings.IpProtocol: 
      enum: 
        - "IPv4"
        - "IPv6"
      type: "string"
    strings.PersistenceId: 
      pattern: "^([^#]+)[#]([^#]+)[#]([^#]+)$"
      type: "string"
    strings.ReadMode: 
      enum: 
        - "RO"
        - "RW"
      type: "string"
    strings.NetworkProtocol: 
      default: "tcp"
      description: "Protocol of the port (tcp, udp)"
      enum: 
        - "tcp"
        - "udp"
        - "udp,tcp"
      type: "string"
    strings.TaskLostBehavior: 
      default: "WAIT_FOREVER"
      description: "When Marathon receives a TASK_LOST status update indicating that the\nagent running the task is gone, this property defines whether Marathon\nwill launch the task on another node or not. Defaults to WAIT_FOREVER\"\n"
      enum: 
        - "WAIT_FOREVER"
        - "RELAUNCH_AFTER_TIMEOUT"
      type: "string"
    strings.MesosTaskState: 
      enum: 
        - "TASK_ERROR"
        - "TASK_FAILED"
        - "TASK_FINISHED"
        - "TASK_KILLED"
        - "TASK_KILLING"
        - "TASK_RUNNING"
        - "TASK_STAGING"
        - "TASK_STARTING"
        - "TASK_UNREACHABLE"
        - "TASK_UNKNOWN"
        - "TASK_GONE"
        - "TASK_DROPPED"
      type: "string"
    strings.Condition: 
      enum: 
        - "Error"
        - "Failed"
        - "Finished"
        - "Killed"
        - "Killing"
        - "Running"
        - "Staging"
        - "Starting"
        - "Unreachable"
        - "UnreachableInactive"
        - "Gone"
        - "Dropped"
        - "Unknown"
      type: "string"
    strings.Goal: 
      enum: 
        - "Running"
        - "Stopped"
        - "Decommissioned"
      type: "string"
    strings.Message: 
      type: "object"
      properties: 
        message: 
          type: "string"
      required: 
        - "message"
    task.IpAddr: 
      type: "object"
      properties: 
        ipAddress: 
          type: "string"
        protocol: 
          $ref: "#/definitions/strings.IpProtocol"
      required: 
        - "ipAddress"
        - "protocol"
    task.Task: 
      type: "object"
      properties: 
        appId: 
          $ref: "#/definitions/strings.PathId"
        healthCheckResults: 
          type: "array"
          items: 
            $ref: "#/definitions/app.health.Health"
        checkResult: 
          $ref: "#/definitions/app.check.CheckStatus"
        host: 
          type: "string"
        id: 
          type: "string"
        ipAddresses: 
          type: "array"
          items: 
            $ref: "#/definitions/task.IpAddr"
        ports: 
          type: "array"
          items: 
            $ref: "#/definitions/app.number.Port"
        servicePorts: 
          type: "array"
          items: 
            $ref: "#/definitions/app.number.Port"
        slaveId: 
          type: "string"
        state: 
          $ref: "#/definitions/strings.MesosTaskState"
        stagedAt: 
          type: "string"
        startedAt: 
          type: "string"
        version: 
          type: "string"
        localVolumes: 
          type: "array"
          items: 
            $ref: "#/definitions/podStatus.localVolumes.LocalVolumeId"
        region: 
          type: "string"
        zone: 
          type: "string"
      required: 
        - "appId"
        - "host"
        - "id"
        - "state"
    task.TaskSingle: 
      type: "object"
      properties: 
        task: 
          $ref: "#/definitions/task.Task"
      required: 
        - "task"
    task.TaskList: 
      type: "object"
      properties: 
        tasks: 
          type: "array"
          items: 
            $ref: "#/definitions/task.Task"
      required: 
        - "tasks"
    task.TaskStatusCondition: 
      enum: 
        - "running"
        - "staging"
      type: "string"
    app.unreachableStrategy.UnreachableStrategy: 
      oneOf: 
        - 
          $ref: "#/definitions/app.unreachableStrategy.UnreachableDisabled"
        - 
          $ref: "#/definitions/app.unreachableStrategy.UnreachableEnabled"
    app.unreachableStrategy.UnreachableDisabled: 
      default: "disabled"
      enum: 
        - "disabled"
      type: "string"
    app.unreachableStrategy.UnreachableEnabled: 
      type: "object"
      properties: 
        inactiveAfterSeconds: 
          default: 0
          minimum: 0
          format: "int64"
          description: "If an instance is unreachable for longer than inactiveAfter seconds it is marked\nas inactive. This will trigger a new instance launch. The original task is not\nexpunged yet. Must be less than or equal to expungeAfterSeconds.\n\nThe default value is set to 0 seconds.\n"
          type: "integer"
        expungeAfterSeconds: 
          default: 0
          minimum: 0
          format: "int64"
          description: "If an instance is unreachable for longer than expungeAfterSeconds it will be expunged.  That means\nit will be killed if it ever comes back. Instances are usually marked as unreachable before they are expunged\nbut they don't have to. This value is required to be greater than or equal to inactiveAfterSeconds.\n\nThe default value is set to 0 seconds.\n"
          type: "integer"
    app.versionInfo.VersionInfo: 
      description: "Detailed version information"
      type: "object"
      properties: 
        lastScalingAt: 
          description: "Contains the timestamp of the last change to this pod which was not simply a scaling or restarting configuration"
          type: "string"
          format: "date-time"
        lastConfigChangeAt: 
          description: "Contains the timestamp of the last change including changes like scaling or restarting."
          type: "string"
          format: "date-time"
      required: 
        - "lastScalingAt"
        - "lastConfigChangeAt"
    pod.volumes.ExternalVolumeInfo: 
      type: "object"
      properties: 
        size: 
          minimum: 0
          format: "int64"
          description: "The size of the external volume in GiB"
          type: "integer"
        name: 
          description: "The name of the volume"
          type: "string"
        provider: 
          description: "The name of the volume provider"
          type: "string"
        options: 
          description: "Provider specific volume configuration options"
          $ref: "#/definitions/app.label.KVLabels"
          x-annotation-app.pragma.omitEmpty: null
    pod.volumes.PersistentVolumeType: 
      description: "The type of mesos disk resource to use; defaults to root if no profile name is specified.\nWhen specififying a profileName, this will default to mount.\n"
      enum: 
        - "root"
        - "path"
        - "mount"
      type: "string"
    pod.volumes.PersistentVolumeInfo: 
      type: "object"
      properties: 
        type: 
          $ref: "#/definitions/pod.volumes.PersistentVolumeType"
        size: 
          minimum: 0
          format: "int64"
          description: "The size of the persistence volume in MB."
          type: "integer"
        maxSize: 
          minimum: 0
          format: "int64"
          description: "For `mount` mesos disk resources, the optional maximum size of an exclusive mount volume to be considered.\n"
          type: "integer"
        profileName: 
          description: "The storage volume profile. Only volumes with the specified profile are used to launch an application.\nIt this option is not given, any volume (with or without a profile) will be used for launching.\n"
          type: "string"
        constraints: 
          uniqueItems: true
          description: "Constraints restricting where new persistent volumes should be created.\nCurrently, it is only possible to constrain the path of the disk resource by regular expression.\n"
          type: "array"
          items: 
            $ref: "#/definitions/app.constraints.VolumeConstraint"
      required: 
        - "size"
    pod.volumes.PodEphemeralVolume: 
      type: "object"
      properties: 
        name: 
          description: "The name of the volume to reference."
          $ref: "#/definitions/strings.Name"
      required: 
        - "name"
    pod.volumes.AppExternalVolume: 
      type: "object"
      properties: 
        containerPath: 
          minLength: 1
          description: "The path of the volume in the container"
          type: "string"
        external: 
          $ref: "#/definitions/pod.volumes.ExternalVolumeInfo"
        mode: 
          description: "Possible values are RO for ReadOnly and RW for Read/Write"
          $ref: "#/definitions/strings.ReadMode"
      required: 
        - "containerPath"
        - "external"
        - "mode"
    pod.volumes.AppHostVolume: 
      type: "object"
      properties: 
        containerPath: 
          minLength: 1
          description: "The path of the volume in the container"
          type: "string"
        hostPath: 
          minLength: 1
          description: "The path of the volume on the host"
          type: "string"
        mode: 
          description: "Possible values are RO for ReadOnly and RW for Read/Write"
          $ref: "#/definitions/strings.ReadMode"
      required: 
        - "containerPath"
        - "hostPath"
        - "mode"
    pod.volumes.PodHostVolume: 
      type: "object"
      properties: 
        name: 
          description: "The name of the volume to reference."
          $ref: "#/definitions/strings.Name"
        host: 
          description: "Absolute path of the file or directory on the agent, or else the relative\npath of the directory in the executor's sandbox.\nHost volumes are useful for mapping directories that exist on the agent apriori,\nor within the executor sandbox. No resources (Mesos or otherwise) are allocated for\nthese types of volumes.\n"
          type: "string"
      required: 
        - "name"
        - "host"
    pod.volumes.AppPersistentVolume: 
      type: "object"
      properties: 
        containerPath: 
          minLength: 1
          description: "The path of the volume in the container"
          type: "string"
        persistent: 
          $ref: "#/definitions/pod.volumes.PersistentVolumeInfo"
        mode: 
          description: "Possible values are RO for ReadOnly and RW for Read/Write"
          $ref: "#/definitions/strings.ReadMode"
      required: 
        - "containerPath"
        - "persistent"
        - "mode"
    pod.volumes.PodPersistentVolume: 
      type: "object"
      properties: 
        name: 
          minLength: 1
          description: "Name of the pod level volume"
          type: "string"
        persistent: 
          $ref: "#/definitions/pod.volumes.PersistentVolumeInfo"
      required: 
        - "name"
        - "persistent"
    pod.volumes.AppSecretVolume: 
      type: "object"
      properties: 
        containerPath: 
          minLength: 1
          description: "The path of the secret in the container"
          type: "string"
        secret: 
          minLength: 1
          description: "References the secret that is used by this volume"
          type: "string"
      required: 
        - "containerPath"
        - "secret"
    pod.volumes.PodSecretVolume: 
      type: "object"
      properties: 
        name: 
          minLength: 1
          description: "Name of the pod level volume"
          type: "string"
        secret: 
          minLength: 1
          description: "References the secret that is used by this volume"
          type: "string"
      required: 
        - "name"
        - "secret"
    pod.volumes.VolumeMount: 
      type: "object"
      properties: 
        name: 
          description: "The name of the volume to reference."
          $ref: "#/definitions/strings.Name"
        mountPath: 
          description: "The path inside the container at which the volume is mounted."
          $ref: "#/definitions/strings.Path"
        readOnly: 
          type: "boolean"
      required: 
        - "name"
        - "mountPath"
    pod.volumes.AppVolume: 
      oneOf: 
        - 
          $ref: "#/definitions/pod.volumes.AppPersistentVolume"
        - 
          $ref: "#/definitions/pod.volumes.AppExternalVolume"
        - 
          $ref: "#/definitions/pod.volumes.AppSecretVolume"
        - 
          $ref: "#/definitions/pod.volumes.AppHostVolume"
    pod.volumes.PodVolume: 
      oneOf: 
        - 
          $ref: "#/definitions/pod.volumes.PodPersistentVolume"
        - 
          $ref: "#/definitions/pod.volumes.PodSecretVolume"
        - 
          $ref: "#/definitions/pod.volumes.PodHostVolume"
        - 
          $ref: "#/definitions/pod.volumes.PodEphemeralVolume"
  paths: 
    /v2/apps: 
      get: 
        description: "Get the list of running applications. Several filters can be applied via the following query parameters."
        operationId: "GET_v2-apps"
        responses: 
          200: 
            description: "The list of applications that match the defined filters"
            schema: 
              example: 
                apps: 
                  - 
                    id: "/myapp"
                    cmd: "env && sleep 60"
                    args: null
                    user: null
                    env: 
                      LD_LIBRARY_PATH: "/usr/local/lib/myLib"
                    instances: 3
                    cpus: 0.1
                    mem: 5
                    disk: 0
                    executor: ""
                    constraints: 
                      - 
                        - "hostname"
                        - "UNIQUE"
                        - ""
                    uris: 
                      - "https://raw.github.com/mesosphere/marathon/master/README.md"
                    ports: 
                      - 10013
                      - 10015
                    requirePorts: false
                    backoffSeconds: 1
                    backoffFactor: 1.15
                    maxLaunchDelaySeconds: 3600
                    container: null
                    healthChecks: []
                    dependencies: []
                    upgradeStrategy: 
                      minimumHealthCapacity: 1
                      maximumOverCapacity: 1
                    labels: {}
                    acceptedResourceRoles: null
                    version: "2015-09-25T15:13:48.343Z"
                    versionInfo: 
                      lastScalingAt: "2015-09-25T15:13:48.343Z"
                      lastConfigChangeAt: "2015-09-25T15:13:48.343Z"
                    tasksStaged: 0
                    tasksRunning: 0
                    tasksHealthy: 0
                    tasksUnhealthy: 0
                    deployments: 
                      - 
                        id: "9538079c-3898-4e32-aa31-799bf9097f74"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
        parameters: 
          - 
            description: "Filter the result to only return apps whose `cmd` field contains the given value"
            type: "string"
            in: "query"
            name: "cmd"
          - 
            description: "Filter the result to only return apps whose `id` is or contains the given value"
            type: "string"
            in: "query"
            name: "id"
          - 
            description: "A label selector query contains one or more label selectors, which are comma separated. Marathon supports three types of selectors existence-based, equality-based and set-based. In the case of multiple selectors, all must be satisfied so comma separator acts as an AND logical operator. Labels and values must consist of alphanumeric characters plus `-` `_` and `.` `-A-Za-z0-9_.`. Any other character is possible, but must be escaped with a backslash character.\n* <code>Existence based Selector Query</code> Matches the existence of a label <br/> Example&#58; my_label,environment\n* <code>Equality based Selector Query</code> Matches existence of labels and the (non) equality of the value.<br/> Example&#58; environment==production, tier!=frontend\n* <code>Set based Selector Query</code> Matches existence of labels and the (non) existence of the value in a given set<br/> Example&#58; environment in (stage,production), tier notin (frontend, service)"
            type: "string"
            in: "query"
            name: "label"
          - 
            description: "Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values.\n- <code>apps.tasks</code> embed all tasks of each application<br/> Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.\n- <code>apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.\n- <code>apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.\n- <code>apps.readiness</code> embed all readiness check results\n- <code>apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.\n- <code>apps.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.\n- <code>apps.taskStats</code> exposes task statistics in the JSON."
            enum: 
              - "apps.tasks"
              - "apps.count"
              - "apps.deployments"
              - "apps.lastTaskFailure"
              - "apps.failures"
              - "apps.taskStats"
            type: "string"
            in: "query"
            name: "embed"
      put: 
        description: "Change multiple applications either by upgrading existing ones or creating new ones. If there is an update to an already running application, the application gets upgraded. Instances of this application will be started or restarted according to the usual logic to meet the requirements of the new definition. Usually, restart is required if the application configuration has changed. Restart is not necessary for scaling-only changes. The order of dependencies will be applied correctly. The upgradeStrategy defines the behaviour of the upgrade.\nIf the id of the application is not known, the application gets started. The order of dependencies will be applied correctly. It is possible to mix upgrades and installs.\nIf you have more complex scenarios with upgrades, use the groups endpoint.\nNote&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment."
        operationId: "PUT_v2-apps"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          400: 
            description: "The application definition provided in the body is not valid."
            examples: 
              application/json: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
            schema: 
              $ref: "#/definitions/error.Error"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already deployed application with this name"
            examples: 
              application/json: 
                message: "An app with id [/existing_app] already exists."
            schema: 
              $ref: "#/definitions/error.Error"
          422: 
            description: "The entity send can not be preocessed, since there are validation errors"
            examples: 
              application/json: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
            schema: 
              $ref: "#/definitions/error.Error"
        parameters: 
          - 
            schema: 
              example: 
                - 
                  id: "/test/sleep60"
                  cmd: "sleep 60"
                  cpus: 0.3
                  instances: 2
                  mem: 9
                  dependencies: 
                    - "/test/sleep120"
                    - "/other/namespace/or/app"
                - 
                  id: "/test/sleep120"
                  cmd: "sleep 120"
                  cpus: 0.3
                  instances: 2
                  mem: 9
              type: "array"
              items: 
                $ref: "#/definitions/app.App"
            in: "body"
            name: "body"
            required: true
          - 
            default: "true"
            description: "Without specifying this parameter, this method has a patch like semantic:\nAll values that are not defined in the json, will not change existing values.\nThis was the default behaviour in previous Marathon versions.\nFor backward compatibility, we will not change this behaviour, but let users opt in for a proper PUT.\nNote: We will change the default behaviour in the next Marathon version to support PATCH and PUT as HTTP methods.\n"
            type: "string"
            in: "query"
            name: "partialUpdate"
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      patch: 
        description: "Change multiple existing applications by applying a patch. Instances of these applications will be started or restarted according to the ususal logic to meet the requirements of the new app definitions. Usually, restart is required if the application configuration was changed (except for scaling changes). The order of dependencies will be applied correctly. Each upgradeStrategy defines the behaviour of the upgrade for the related app.\nThe whole operation fails if the IDs of one or more applications are unknown. The order of dependencies will be applied correctly.\nIf you have more complex scenarios with upgrades, use the groups endpoint.\nNote&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment."
        operationId: "PATCH_v2-apps"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          400: 
            description: "The application definition provided in the body is not valid."
            examples: 
              application/json: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
            schema: 
              $ref: "#/definitions/error.Error"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "One or more specified applications is currently locked by a deployment"
            examples: 
              application/json: 
                message: "App is locked by one or more deployments."
            schema: 
              $ref: "#/definitions/error.Error"
          422: 
            description: "The entity send can not be processed, since there are validation errors"
            examples: 
              application/json: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
            schema: 
              $ref: "#/definitions/error.Error"
        parameters: 
          - 
            schema: 
              example: 
                - 
                  id: "/test/sleep60"
                  cpus: 0.3
                - 
                  id: "/test/sleep120"
                  instances: 2
              type: "array"
              items: 
                $ref: "#/definitions/app.App"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      post: 
        description: "Create and start a new application.\nNote&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment."
        operationId: "POST_v2-apps"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          201: 
            description: "The application has been created and a deployment is started."
            schema: 
              example: 
                id: "/foo"
                instances: 2
                cmd: "sleep 1000"
                cpus: 0.1
                disk: 0
                mem: 16
                acceptedResourceRoles: 
                  - "mesos_role"
                args: 
                  - "sleep"
                  - "100"
                backoffFactor: 1.15
                backoffSeconds: 1
                constraints: 
                  - 
                    - "hostname"
                    - "LIKE"
                    - "srv2.*"
                container: 
                  docker: 
                    forcePullImage: false
                    image: "mesosphere:marathon/latest"
                    network: "BRIDGE"
                    parameters: 
                      - 
                        key: "name"
                        value: "kdc"
                    portMappings: 
                      - 
                        containerPort: 80
                        hostPort: 0
                        protocol: "tcp"
                        servicePort: 10019
                        name: "http"
                        labels: 
                          vip: "192.168.0.1:80"
                    privileged: false
                  type: "DOCKER"
                  volumes: 
                    - 
                      containerPath: "/docker_storage"
                      hostPath: "/hdd/tools/docker/registry"
                      mode: "RW"
                dependencies: 
                  - "/prod/group"
                env: 
                  XPS1: "Test"
                  XPS2: "Rest"
                  PASSWORD: 
                    secret: "/db/password"
                executor: ""
                healthChecks: 
                  - 
                    gracePeriodSeconds: 300
                    ignoreHttp1xx: false
                    intervalSeconds: 20
                    maxConsecutiveFailures: 3
                    path: "/"
                    portIndex: 0
                    protocol: "HTTP"
                    timeoutSeconds: 20
                readinessChecks: 
                  - 
                    name: "myReadyCheck"
                    protocol: "HTTP"
                    path: "/v1/plan"
                    portName: "http"
                    intervalSeconds: 10
                    timeoutSeconds: 3
                    httpStatusCodesForReady: 
                      - 200
                    preserveLastResponse: true
                labels: 
                  owner: "zeus"
                  note: "Away from olympus"
                maxLaunchDelaySeconds: 3600
                ipAddress: 
                  discovery: 
                    ports: 
                      - 
                        number: 8080
                        name: "rest-endpoint"
                        protocol: "tcp"
                  groups: 
                    - "dev"
                  labels: 
                    environment: "dev"
                portDefinitions: 
                  - 
                    port: 0
                    protocol: "tcp"
                    name: "http"
                    labels: 
                      vip: "192.168.0.1:80"
                requirePorts: false
                upgradeStrategy: 
                  maximumOverCapacity: 1
                  minimumHealthCapacity: 1
                fetch: 
                  - 
                    uri: "https://foo.com/setup.py"
                  - 
                    uri: "https://foo.com/archive.zip"
                    executable: false
                    extract: true
                    cache: true
                    destPath: "newname.zip"
                user: "root"
                secrets: 
                  secret1: 
                    source: "/db/password"
                  secret3: 
                    source: "/foo2"
                taskKillGracePeriodSeconds: 30
                tty: true
          400: 
            description: "The application definition provided in the body is not valid."
            examples: 
              application/json: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
            schema: 
              $ref: "#/definitions/error.Error"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already deployed application with this name"
            examples: 
              application/json: 
                message: "An app with id [/existing_app] already exists."
            schema: 
              $ref: "#/definitions/error.Error"
          422: 
            description: "The entity send can not be preocessed, since there are validation errors"
            examples: 
              application/json: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
            schema: 
              $ref: "#/definitions/error.Error"
        parameters: 
          - 
            schema: 
              example: 
                id: "/foo"
                instances: 2
                cmd: "sleep 1000"
                cpus: 0.1
                disk: 0
                mem: 16
                acceptedResourceRoles: 
                  - "mesos_role"
                args: 
                  - "sleep"
                  - "100"
                backoffFactor: 1.15
                backoffSeconds: 1
                constraints: 
                  - 
                    - "hostname"
                    - "LIKE"
                    - "srv2.*"
                container: 
                  docker: 
                    forcePullImage: false
                    image: "mesosphere:marathon/latest"
                    network: "BRIDGE"
                    parameters: 
                      - 
                        key: "name"
                        value: "kdc"
                    portMappings: 
                      - 
                        containerPort: 80
                        hostPort: 0
                        protocol: "tcp"
                        servicePort: 10019
                        name: "http"
                        labels: 
                          vip: "192.168.0.1:80"
                    privileged: false
                  type: "DOCKER"
                  volumes: 
                    - 
                      containerPath: "/docker_storage"
                      hostPath: "/hdd/tools/docker/registry"
                      mode: "RW"
                dependencies: 
                  - "/prod/group"
                env: 
                  XPS1: "Test"
                  XPS2: "Rest"
                  PASSWORD: 
                    secret: "/db/password"
                executor: ""
                healthChecks: 
                  - 
                    gracePeriodSeconds: 300
                    ignoreHttp1xx: false
                    intervalSeconds: 20
                    maxConsecutiveFailures: 3
                    path: "/"
                    portIndex: 0
                    protocol: "HTTP"
                    timeoutSeconds: 20
                readinessChecks: 
                  - 
                    name: "myReadyCheck"
                    protocol: "HTTP"
                    path: "/v1/plan"
                    portName: "http"
                    intervalSeconds: 10
                    timeoutSeconds: 3
                    httpStatusCodesForReady: 
                      - 200
                    preserveLastResponse: true
                labels: 
                  owner: "zeus"
                  note: "Away from olympus"
                maxLaunchDelaySeconds: 3600
                ipAddress: 
                  discovery: 
                    ports: 
                      - 
                        number: 8080
                        name: "rest-endpoint"
                        protocol: "tcp"
                  groups: 
                    - "dev"
                  labels: 
                    environment: "dev"
                portDefinitions: 
                  - 
                    port: 0
                    protocol: "tcp"
                    name: "http"
                    labels: 
                      vip: "192.168.0.1:80"
                requirePorts: false
                upgradeStrategy: 
                  maximumOverCapacity: 1
                  minimumHealthCapacity: 1
                fetch: 
                  - 
                    uri: "https://foo.com/setup.py"
                  - 
                    uri: "https://foo.com/archive.zip"
                    executable: false
                    extract: true
                    cache: true
                    destPath: "newname.zip"
                user: "root"
                secrets: 
                  secret1: 
                    source: "/db/password"
                  secret3: 
                    source: "/foo2"
                taskKillGracePeriodSeconds: 30
                tty: true
              $ref: "#/definitions/app.App"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
    /v2/apps/{app_id}: 
      get: 
        description: "Get the application with id `app_id`. The response includes some status information besides the current configuration of the app. You can specify optional embed arguments, to get more embedded information."
        operationId: "GET_v2-apps-app_id"
        responses: 
          200: 
            description: ""
            schema: 
              example: 
                apps: 
                  - 
                    id: "/myapp"
                    cmd: "env && sleep 60"
                    args: null
                    user: null
                    env: 
                      LD_LIBRARY_PATH: "/usr/local/lib/myLib"
                    instances: 3
                    cpus: 0.1
                    mem: 5
                    disk: 0
                    executor: ""
                    constraints: 
                      - 
                        - "hostname"
                        - "UNIQUE"
                        - ""
                    uris: 
                      - "https://raw.github.com/mesosphere/marathon/master/README.md"
                    ports: 
                      - 10013
                      - 10015
                    requirePorts: false
                    backoffSeconds: 1
                    backoffFactor: 1.15
                    maxLaunchDelaySeconds: 3600
                    container: null
                    healthChecks: []
                    dependencies: []
                    upgradeStrategy: 
                      minimumHealthCapacity: 1
                      maximumOverCapacity: 1
                    labels: {}
                    acceptedResourceRoles: null
                    version: "2015-09-25T15:13:48.343Z"
                    versionInfo: 
                      lastScalingAt: "2015-09-25T15:13:48.343Z"
                      lastConfigChangeAt: "2015-09-25T15:13:48.343Z"
                    tasksStaged: 0
                    tasksRunning: 0
                    tasksHealthy: 0
                    tasksUnhealthy: 0
                    deployments: 
                      - 
                        id: "9538079c-3898-4e32-aa31-799bf9097f74"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No app found with this `app_id`."
            examples: 
              application/json: 
                message: "App '/not_existent' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
        parameters: 
          - 
            description: "Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. <br/>\n- <code>app.tasks</code>. embed tasks Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.\n- <code>app.counts</code>. embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.\n- <code>app.deployments</code>. embed all deployment identifier, if the related app currently is in deployment.\n- <code>app.readiness</code> embed all readiness check results\n- <code>app.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.\n- <code>app.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.\n- <code>app.taskStats</code> exposes task statistics in the JSON."
            enum: 
              - "app.tasks"
              - "app.count"
              - "app.deployments"
              - "app.lastTaskFailure"
              - "app.failures"
              - "app.taskStats"
            type: "string"
            in: "query"
            name: "embed"
            required: true
      put: 
        description: "Replaces parameters of a running application. If no application with the given id exists, it will be created. If there is an application with this id, all running instances get upgraded to the new definition.\n\nNote&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment."
        operationId: "PUT_v2-apps-app_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          201: 
            description: "The application has been created and a deployment is started."
            examples: 
              application/json: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
            schema: 
              $ref: "#/definitions/deploymentResult.DeploymentResult"
          400: 
            description: "The application definition provided in the body is not valid."
            examples: 
              application/json: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
            schema: 
              $ref: "#/definitions/error.Error"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            examples: 
              application/json: 
                message: "App '/not_existent' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
          422: 
            description: "The entity sent can not be preocessed, since there are validation errors"
            examples: 
              application/json: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
            schema: 
              $ref: "#/definitions/error.Error"
        parameters: 
          - 
            schema: 
              example: 
                id: "/foo"
                instances: 2
                cmd: "sleep 1000"
                cpus: 0.1
                disk: 0
                mem: 16
                acceptedResourceRoles: 
                  - "mesos_role"
                args: 
                  - "sleep"
                  - "100"
                backoffFactor: 1.15
                backoffSeconds: 1
                constraints: 
                  - 
                    - "hostname"
                    - "LIKE"
                    - "srv2.*"
                container: 
                  docker: 
                    forcePullImage: false
                    image: "mesosphere:marathon/latest"
                    network: "BRIDGE"
                    parameters: 
                      - 
                        key: "name"
                        value: "kdc"
                    portMappings: 
                      - 
                        containerPort: 80
                        hostPort: 0
                        protocol: "tcp"
                        servicePort: 10019
                        name: "http"
                        labels: 
                          vip: "192.168.0.1:80"
                    privileged: false
                  type: "DOCKER"
                  volumes: 
                    - 
                      containerPath: "/docker_storage"
                      hostPath: "/hdd/tools/docker/registry"
                      mode: "RW"
                dependencies: 
                  - "/prod/group"
                env: 
                  XPS1: "Test"
                  XPS2: "Rest"
                  PASSWORD: 
                    secret: "/db/password"
                executor: ""
                healthChecks: 
                  - 
                    gracePeriodSeconds: 300
                    ignoreHttp1xx: false
                    intervalSeconds: 20
                    maxConsecutiveFailures: 3
                    path: "/"
                    portIndex: 0
                    protocol: "HTTP"
                    timeoutSeconds: 20
                readinessChecks: 
                  - 
                    name: "myReadyCheck"
                    protocol: "HTTP"
                    path: "/v1/plan"
                    portName: "http"
                    intervalSeconds: 10
                    timeoutSeconds: 3
                    httpStatusCodesForReady: 
                      - 200
                    preserveLastResponse: true
                labels: 
                  owner: "zeus"
                  note: "Away from olympus"
                maxLaunchDelaySeconds: 3600
                ipAddress: 
                  discovery: 
                    ports: 
                      - 
                        number: 8080
                        name: "rest-endpoint"
                        protocol: "tcp"
                  groups: 
                    - "dev"
                  labels: 
                    environment: "dev"
                portDefinitions: 
                  - 
                    port: 0
                    protocol: "tcp"
                    name: "http"
                    labels: 
                      vip: "192.168.0.1:80"
                requirePorts: false
                upgradeStrategy: 
                  maximumOverCapacity: 1
                  minimumHealthCapacity: 1
                fetch: 
                  - 
                    uri: "https://foo.com/setup.py"
                  - 
                    uri: "https://foo.com/archive.zip"
                    executable: false
                    extract: true
                    cache: true
                    destPath: "newname.zip"
                user: "root"
                secrets: 
                  secret1: 
                    source: "/db/password"
                  secret3: 
                    source: "/foo2"
                taskKillGracePeriodSeconds: 30
                tty: true
              $ref: "#/definitions/app.App"
            in: "body"
            name: "body"
            required: true
          - 
            default: "true"
            description: "Without specifying this parameter, this method has a patch like semantic:\nAll values that are not defined in the json, will not change existing values.\nThis was the default behaviour in previous Marathon versions.\nFor backward compatibility, we will not change this behaviour, but let users opt in for a proper PUT.\nNote: We will change the default behaviour in the next Marathon version to support PATCH and PUT as HTTP methods.\n"
            type: "string"
            in: "query"
            name: "partialUpdate"
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      patch: 
        description: "Replaces parameters of a running application. Instances of this application will be started or restarted according to the usual logic to meet the requirements of the new definition. Usually, restart is required if the application configuration was changed (except for scaling changes). Any given application ID will be ignored.\nNote&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment."
        operationId: "PATCH_v2-apps-app_id"
        responses: 
          200: 
            description: "The application has been updated and a deployment is started."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            examples: 
              application/json: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
            schema: 
              $ref: "#/definitions/deploymentResult.DeploymentResult"
          400: 
            description: "The application definition provided in the body is not valid."
            examples: 
              application/json: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
            schema: 
              $ref: "#/definitions/error.Error"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            examples: 
              application/json: 
                message: "App '/not_existent' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
          422: 
            description: "The entity sent can not be preocessed, since there are validation errors"
            examples: 
              application/json: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
            schema: 
              $ref: "#/definitions/error.Error"
        parameters: 
          - 
            schema: 
              example: 
                id: "/foo"
                instances: 2
              $ref: "#/definitions/app.App"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      delete: 
        description: "Destroy an application. All data about that application will be deleted.\nNote&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment."
        operationId: "DELETE_v2-apps-app_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No app with this id known."
            examples: 
              application/json: 
                message: "App '/not-existing' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /v2/apps/{app_id}/restart: 
      post: 
        description: "Restart all tasks of this application."
        operationId: "POST_v2-apps-app_id-restart"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            examples: 
              application/json: 
                message: "App '/not_existent' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /v2/apps/{app_id}/tasks: 
      get: 
        description: "List all running tasks for application `app_id`."
        operationId: "GET_v2-apps-app_id-tasks"
        produces: 
          - "text/plain"
        responses: 
          200: 
            description: "The list of running tasks for application `app_id`."
            examples: 
              application/json: 
                tasks: 
                  - 
                    appId: "/minecraft/survival-world"
                    host: "srv7.hw.ca1.mesosphere.com"
                    id: "minecraft_survival-world.instance-564bd685-4c30-11e5-98c1-be5b2935a987"
                    ports: 
                      - 31756
                    slaveId: "agent0"
                    stagedAt: "2015-08-26T20:23:39.463Z"
                    startedAt: "2015-08-26T20:23:44.678Z"
                    version: "2015-04-17T04:00:14.171Z"
                    state: "TASK_STAGING"
                    region: "primary"
                    zone: "a"
            schema: 
              type: "object"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            schema: 
              example: 
                message: "App '/not_existent' does not exist"
      delete: 
        description: "Kill tasks that belong to the application `app_id`"
        operationId: "DELETE_v2-apps-app_id-tasks"
        responses: 
          200: 
            description: "If scale=false, all tasks that were killed are returned. If scale=true, than a deployment is triggered and the deployment is returned."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                tasks: 
                  - 
                    appId: "/minecraft/survival-world"
                    host: "srv7.hw.ca1.mesosphere.com"
                    id: "minecraft_survival-world.instance-564bd685-4c30-11e5-98c1-be5b2935a987"
                    ports: 
                      - 31756
                    slaveId: "agent0"
                    stagedAt: "2015-08-26T20:23:39.463Z"
                    startedAt: "2015-08-26T20:23:44.678Z"
                    version: "2015-04-17T04:00:14.171Z"
                    state: "TASK_STAGING"
                    region: "primary"
                    zone: "a"
              oneOf: 
                - 
                  $ref: "#/definitions/task.TaskList"
                - 
                  $ref: "#/definitions/deploymentResult.DeploymentResult"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            schema: 
              example: 
                message: "App '/not_existent' does not exist"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            description: "all tasks of that application on the supplied agent are killed"
            type: "string"
            in: "query"
            name: "host"
            required: true
          - 
            default: "false"
            description: "If `scale=true` is specified, then the application is scaled down by the number of killed tasks. Only possible if `wipe=false` or not specified."
            type: "string"
            in: "query"
            name: "scale"
            required: true
          - 
            default: "false"
            description: "If `wipe=true` is specified and the app uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed. Only possible if `scale=false` or not specified."
            type: "string"
            in: "query"
            name: "wipe"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /v2/apps/{app_id}/tasks/{task_id}: 
      delete: 
        description: "Kill the task with ID `task_id` that belongs to the application `app_id`."
        operationId: "DELETE_v2-apps-app_id-tasks-task_id"
        responses: 
          200: 
            description: "If scale=false, the task that was killed is returned. If scale=true, than a deployment is triggered and the deployment is returned."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                task: 
                  appId: "/minecraft/survival-world"
                  host: "srv7.hw.ca1.mesosphere.com"
                  id: "minecraft_survival-world.instance-564bd685-4c30-11e5-98c1-be5b2935a987"
                  ports: 
                    - 31756
                  slaveId: "agent0"
                  stagedAt: "2015-08-26T20:23:39.463Z"
                  startedAt: "2015-08-26T20:23:44.678Z"
                  version: "2015-04-17T04:00:14.171Z"
                  state: "TASK_STAGING"
                  region: "primary"
                  zone: "a"
              oneOf: 
                - 
                  $ref: "#/definitions/task.TaskSingle"
                - 
                  $ref: "#/definitions/deploymentResult.DeploymentResult"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this task_id."
            examples: 
              application/json: 
                message: "Task 'not-existing' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            default: "false"
            description: "If `scale=true` is specified, then the application is scaled down by the number of killed tasks. Only possible if `wipe=false` or not specified."
            type: "string"
            in: "query"
            name: "scale"
            required: true
          - 
            default: "false"
            description: "If `wipe=true` is specified and the app uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed. Only possible if `scale=false` or not specified."
            type: "string"
            in: "query"
            name: "wipe"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "task_id"
          required: true
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /v2/apps/{app_id}/versions: 
      get: 
        description: "List the versions of the application with id `app_id`"
        operationId: "GET_v2-apps-app_id-versions"
        responses: 
          200: 
            description: "The list of versions of the application"
            schema: 
              example: 
                versions: 
                  - "2014-03-01T23:42:20.938Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            examples: 
              application/json: 
                message: "App '/not_existent' does not exist"
            schema: 
              $ref: "#/definitions/error.Error"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /v2/apps/{app_id}/versions/{version}: 
      get: 
        description: "List the configuration of the application with id `app_id` at version `version`."
        operationId: "GET_v2-apps-app_id-versions-version"
        responses: 
          200: 
            description: "The application definition at that point in time."
            examples: 
              application/json: 
                id: "/foo"
                instances: 2
                cmd: "sleep 1000"
                cpus: 0.1
                disk: 0
                mem: 16
                acceptedResourceRoles: 
                  - "mesos_role"
                args: 
                  - "sleep"
                  - "100"
                backoffFactor: 1.15
                backoffSeconds: 1
                constraints: 
                  - 
                    - "hostname"
                    - "LIKE"
                    - "srv2.*"
                container: 
                  docker: 
                    forcePullImage: false
                    image: "mesosphere:marathon/latest"
                    network: "BRIDGE"
                    parameters: 
                      - 
                        key: "name"
                        value: "kdc"
                    portMappings: 
                      - 
                        containerPort: 80
                        hostPort: 0
                        protocol: "tcp"
                        servicePort: 10019
                        name: "http"
                        labels: 
                          vip: "192.168.0.1:80"
                    privileged: false
                  type: "DOCKER"
                  volumes: 
                    - 
                      containerPath: "/docker_storage"
                      hostPath: "/hdd/tools/docker/registry"
                      mode: "RW"
                dependencies: 
                  - "/prod/group"
                env: 
                  XPS1: "Test"
                  XPS2: "Rest"
                  PASSWORD: 
                    secret: "/db/password"
                executor: ""
                healthChecks: 
                  - 
                    gracePeriodSeconds: 300
                    ignoreHttp1xx: false
                    intervalSeconds: 20
                    maxConsecutiveFailures: 3
                    path: "/"
                    portIndex: 0
                    protocol: "HTTP"
                    timeoutSeconds: 20
                readinessChecks: 
                  - 
                    name: "myReadyCheck"
                    protocol: "HTTP"
                    path: "/v1/plan"
                    portName: "http"
                    intervalSeconds: 10
                    timeoutSeconds: 3
                    httpStatusCodesForReady: 
                      - 200
                    preserveLastResponse: true
                labels: 
                  owner: "zeus"
                  note: "Away from olympus"
                maxLaunchDelaySeconds: 3600
                ipAddress: 
                  discovery: 
                    ports: 
                      - 
                        number: 8080
                        name: "rest-endpoint"
                        protocol: "tcp"
                  groups: 
                    - "dev"
                  labels: 
                    environment: "dev"
                portDefinitions: 
                  - 
                    port: 0
                    protocol: "tcp"
                    name: "http"
                    labels: 
                      vip: "192.168.0.1:80"
                requirePorts: false
                upgradeStrategy: 
                  maximumOverCapacity: 1
                  minimumHealthCapacity: 1
                fetch: 
                  - 
                    uri: "https://foo.com/setup.py"
                  - 
                    uri: "https://foo.com/archive.zip"
                    executable: false
                    extract: true
                    cache: true
                    destPath: "newname.zip"
                user: "root"
                secrets: 
                  secret1: 
                    source: "/db/password"
                  secret3: 
                    source: "/foo2"
                taskKillGracePeriodSeconds: 30
                tty: true
            schema: 
              $ref: "#/definitions/app.App"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "No task found with this `app_id`."
            schema: 
              example: 
                message: "App '/not_existent' does not exist"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "version"
          required: true
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /v2/pods/: 
      head: 
        description: "Determine if this variant of Marathon supports pods.\nAlways generates HTTP OK.\n"
        operationId: "HEAD_v2-pods"
        responses: 
          200: 
            description: "The body of a successful response will be empty.\n"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
      post: 
        description: "Create and start a new pod-based service.\n"
        operationId: "POST_v2-pods"
        responses: 
          201: 
            description: "Pod created successfully."
            headers: 
              Marathon-Deployment-Id: 
                description: "This operation will create a deployment. The operation finishes, if the deployment succeeds.\nYou can query the deployments endoint with this id to see the status of the deployment.\n"
                type: "string"
            schema: 
              $ref: "#/definitions/pod.Pod"
          400: 
            description: "Invalid JSON syntax."
            schema: 
              example: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "Duplicate object ID. Another app, group, or pod already exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
          422: 
            description: "Invalid object specification, one or more specification rules have been violated.\n"
            schema: 
              example: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
        parameters: 
          - 
            schema: 
              $ref: "#/definitions/pod.Pod"
            in: "body"
            name: "body"
            required: true
      get: 
        description: "List all the pod-based services in the system.\n"
        operationId: "GET_v2-pods"
        responses: 
          200: 
            description: "Yields a list of all pods in the system.\nUseful to perform backups of all pods registered with Marathon.\n"
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/pod.Pod"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
    /v2/pods/::status: 
      get: 
        description: "Get the status for all pods"
        operationId: "GET_v2-pods-::status"
        responses: 
          200: 
            description: ""
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/podStatus.PodStatus"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
    /v2/pods/{id}: 
      delete: 
        description: "Delete an existing pod-based service.\n"
        operationId: "DELETE_v2-pods-id"
        responses: 
          202: 
            description: ""
            headers: 
              Marathon-Deployment-Id: 
                description: "This operation will create a deployment. The operation finishes, if the deployment succeeds.\nYou can query the deployments endoint with this id to see the status of the deployment.\n"
                type: "string"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
      put: 
        description: "Update an existing pod-based service.\n"
        operationId: "PUT_v2-pods-id"
        responses: 
          200: 
            description: "The pod has been updated and a deployment is started."
            headers: 
              Marathon-Deployment-Id: 
                description: "This operation will create a deployment. The operation finishes, if the deployment succeeds.\nYou can query the deployments endoint with this id to see the status of the deployment.\n"
                type: "string"
            schema: 
              $ref: "#/definitions/pod.Pod"
          400: 
            description: "The given podId does not match the id in the pod specification."
            examples: 
              application/json: 
                message: "'/foo' does not match definition's id ('/bla')"
            schema: 
              $ref: "#/definitions/error.Error"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
          422: 
            description: "Invalid object specification, one or more specification rules have been violated.\n"
            schema: 
              example: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/upgradeStrategy/minimumHealthCapacity"
                    errors: 
                      - "is greater than 1"
        parameters: 
          - 
            schema: 
              $ref: "#/definitions/pod.Pod"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one pod at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      get: 
        description: "Get the pod at the given id\n"
        operationId: "GET_v2-pods-id"
        responses: 
          200: 
            description: ""
            schema: 
              $ref: "#/definitions/pod.Pod"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
      parameters: 
        - 
          description: "The path of the pod"
          in: "path"
          name: "id"
          required: true
          type: "string"
    /v2/pods/{id}::status: 
      get: 
        description: "Get the status of the pod with the given id\n"
        operationId: "GET_v2-pods-id::status"
        responses: 
          200: 
            description: ""
            schema: 
              $ref: "#/definitions/podStatus.PodStatus"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
      parameters: 
        - 
          description: "The path of the pod"
          in: "path"
          name: "id"
          required: true
          type: "string"
    /v2/pods/{id}::versions: 
      get: 
        description: "List the versions of this pod.\n"
        operationId: "GET_v2-pods-id::versions"
        responses: 
          200: 
            description: ""
            schema: 
              type: "array"
              items: 
                type: "string"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
      parameters: 
        - 
          description: "The path of the pod"
          in: "path"
          name: "id"
          required: true
          type: "string"
    /v2/pods/{id}::versions/{version}: 
      get: 
        description: "List the versions of this pod.\n"
        operationId: "GET_v2-pods-id::versions-version"
        responses: 
          200: 
            description: ""
            schema: 
              $ref: "#/definitions/pod.Pod"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
      parameters: 
        - 
          description: "The path of the pod"
          in: "path"
          name: "id"
          required: true
          type: "string"
        - 
          description: "The version of the pod"
          type: "string"
          in: "path"
          name: "version"
          required: true
    /v2/pods/{id}::instances/{instance}: 
      delete: 
        description: "Kill the given instance of the pod\n"
        operationId: "DELETE_v2-pods-id::instances-instance"
        responses: 
          200: 
            description: ""
            schema: 
              $ref: "#/definitions/instance.Instance"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
        parameters: 
          - 
            default: false
            description: "If `wipe=true` is specified and the pod uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed."
            type: "boolean"
            in: "query"
            name: "wipe"
            required: true
      parameters: 
        - 
          description: "The path of the pod"
          in: "path"
          name: "id"
          required: true
          type: "string"
        - 
          in: "path"
          name: "instance"
          required: true
          type: "string"
    /v2/pods/{id}::instances: 
      delete: 
        description: "Kill the given instances of the pod\n"
        operationId: "DELETE_v2-pods-id::instances"
        responses: 
          200: 
            description: ""
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/instance.Instance"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "Unknown object ID. No such app, group, or pod exists for the specified ID.\n"
            schema: 
              example: 
                message: "An app with id [/existing_app] already exists."
        parameters: 
          - 
            schema: 
              type: "array"
              items: 
                pattern: "^(.+)\\.(instance-|marathon-)([^\\.]+)$"
                type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "If `wipe=true` is specified and the pod uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed."
            type: "boolean"
            in: "query"
            name: "wipe"
            required: true
      parameters: 
        - 
          description: "The path of the pod"
          in: "path"
          name: "id"
          required: true
          type: "string"
    /v2/deployments: 
      get: 
        description: "List all running deployments. A deployment is a change in the service setup.\nA deployment is identified by an id, affects a set of applications and is composed of deployment steps.\nEvery step contains a list of actions with following types\n* <code>StartApplication</code> starts an application, which is currently not running.\n* <code>StopApplication</code> stops an already running application.\n* <code>ScaleApplication</code> changes the number of instances of an application and allows to kill specified instances while scaling.\n* <code>RestartApplication</code> upgrades an already deployed application with a new version.\n* <code>StartPod</code> starts a pod, which is currently not running.\n* <code>StopPod</code> stops an already running pod.\n* <code>ScalePod</code> changes the number of instances of an pod and allows to kill specified instances while scaling.\n* <code>RestartPod</code> upgrades an already deployed pod with a new version.\n* <code>ResolveArtifacts</code> Resolve all artifacts of an application"
        operationId: "GET_v2-deployments"
        responses: 
          200: 
            description: "The list of all running deployments."
            schema: 
              example: 
                - 
                  id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
                  version: "2015-09-30T09:09:17.614Z"
                  affectedApps: 
                    - "/foo"
                  affectedPods: 
                    - "/bla"
                  steps: 
                    - 
                      actions: 
                        - 
                          action: "ScaleApplication"
                          app: "/foo"
                    - 
                      actions: 
                        - 
                          action: "ScalePod"
                          pod: "/bla"
                  currentActions: 
                    - 
                      action: "ScaleApplication"
                      app: "/foo"
                      readinessCheckResults: 
                        - 
                          taskId: "foo.c9de6033"
                          lastResponse: 
                            body: "{}"
                            contentType: "application/json"
                            status: 500
                          name: "myReadyCheck"
                          ready: false
                  currentStep: 1
                  totalSteps: 1
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
    /v2/deployments/{deployment_id}: 
      delete: 
        description: "Revert the deployment with `deployment_id` by creating a new deployment which reverses all changes."
        operationId: "DELETE_v2-deployments-deployment_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          202: 
            description: "If the force flag is set to true, the deployment is canceled and no new deployment is triggered. In this case no body is returned."
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "The deployment plan with the given id can not be found."
            schema: 
              example: 
                message: "DeploymentPlan unknown_deployment does not exist"
        parameters: 
          - 
            default: false
            description: "If set to <code>false</code> (the default) then the deployment is canceled and a new deployment is created to revert the changes of this deployment. Without concurrent deployments, this restores the configuration before this deployment. If set to <code>true</code>, then the deployment is still canceled but no rollback deployment is created. <br><br> **Warning** - Using <code>force=true</code> to abort a deployment can leave behind unaccounted for tasks and/or leave the app in a mixed state of old and new versions of tasks!"
            type: "boolean"
            in: "query"
            name: "force"
            required: true
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "deployment_id"
          required: true
    /v2/groups/: 
      get: 
        description: "Get the group with all applications and all transitive child groups."
        operationId: "GET_v2-groups"
        responses: 
          200: 
            description: "The group with all transitive dependencies."
            schema: 
              example: 
                id: "/"
                apps: []
                groups: 
                  - 
                    id: "/tools"
                    apps: 
                      - 
                        id: "/tools/oauth-server"
                        instances: 2
                        cpus: 1
                        mem: 1024
                        disk: 0
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 1980
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: []
                          docker: 
                            image: "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774"
                            network: "HOST"
                            privileged: false
                            parameters: []
                            forcePullImage: false
                        healthChecks: 
                          - 
                            path: "/"
                            protocol: "HTTP"
                            portIndex: 0
                            gracePeriodSeconds: 300
                            intervalSeconds: 20
                            timeoutSeconds: 20
                            maxConsecutiveFailures: 3
                            ignoreHttp1xx: false
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-09-28T19:47:37.681Z"
                        versionInfo: 
                          lastScalingAt: "2015-09-28T19:47:37.681Z"
                          lastConfigChangeAt: "2015-09-28T19:47:37.681Z"
                      - 
                        id: "/tools/datadog-agent"
                        instances: 5
                        cpus: 1
                        mem: 512
                        disk: 0
                        executor: ""
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 10018
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: 
                            - 
                              containerPath: "/var/run/docker.sock"
                              hostPath: "/var/run/docker.sock"
                              mode: "RW"
                            - 
                              containerPath: "/host/proc/mounts"
                              hostPath: "/proc/mounts"
                              mode: "RO"
                            - 
                              containerPath: "/host/sys/fs/cgroup"
                              hostPath: "/sys/fs/cgroup/"
                              mode: "RO"
                          docker: 
                            image: "datadog/docker-dd-agent:latest"
                            network: "HOST"
                            privileged: true
                            parameters: []
                            forcePullImage: false
                        healthChecks: []
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-08-26T22:33:24.225Z"
                        versionInfo: 
                          lastScalingAt: "2015-08-26T22:33:24.225Z"
                          lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    groups: 
                      - 
                        id: "/tools/log"
                        apps: []
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                      - 
                        id: "/tools/docker"
                        apps: 
                          - 
                            id: "/tools/docker/registry"
                            instances: 1
                            cpus: 0.5
                            mem: 4096
                            disk: 0
                            executor: ""
                            constraints: []
                            uris: []
                            ports: 
                              - 5000
                            requirePorts: false
                            backoffSeconds: 1
                            backoffFactor: 1.15
                            maxLaunchDelaySeconds: 3600
                            container: 
                              type: "DOCKER"
                              volumes: 
                                - 
                                  containerPath: "/docker_storage"
                                  hostPath: "/hdd/tools/docker/registry"
                                  mode: "RW"
                              docker: 
                                image: "registry"
                                network: "BRIDGE"
                                portMappings: 
                                  - 
                                    containerPort: 5000
                                    hostPort: 0
                                    servicePort: 5000
                                    protocol: "tcp"
                                privileged: false
                                parameters: []
                                forcePullImage: false
                            healthChecks: []
                            dependencies: []
                            upgradeStrategy: 
                              minimumHealthCapacity: 1
                              maximumOverCapacity: 1
                            version: "2015-08-19T21:26:47.616Z"
                            versionInfo: 
                              lastScalingAt: "2015-08-19T21:26:47.616Z"
                              lastConfigChangeAt: "2015-08-19T21:00:54.621Z"
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                    dependencies: []
                    version: "2015-09-17T10:38:20.875Z"
                dependencies: []
                version: "2015-09-17T10:38:20.875Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
        parameters: 
          - 
            description: "Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. Unknown embed parameters are ignored. If you omit this parameter, it defaults to <code>group.groups</code>, <code>group.apps</code>\n- <code>group.groups</code> embed all child groups of each group<br/>\n- <code>group.apps</code> embed all apps of each group<br/>\n- <code>group.apps.tasks</code> embed all tasks of each application<br/>\n- <code>group.apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/>\n- <code>group.apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.\n- <code>group.apps.readiness</code> embed all readiness check results\n- <code>group.apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.\n- <code>group.apps.taskStats</code> exposes task statistics in the JSON."
            enum: 
              - "group.groups"
              - "group.apps"
              - "group.apps.tasks"
              - "group.apps.count"
              - "group.apps.deployments"
              - "group.apps.lastTaskFailure"
              - "group.apps.failures"
              - "group.apps.taskStats"
            type: "string"
            in: "query"
            name: "embed"
      put: 
        description: "Change parameters of a deployed application group. The new group parameters get applied.\n\n* Changes to application parameters will result in a restart of this application.\n* A new application added to the group will be started.\n* An existing application removed from the group will be stopped.\n\nIf there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.\nThis method allows 2 special modes for the update operation>\n\n* Provide only the `version` field in the group definition. This will rollback the group to that given version\n* Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.\n\nWhen one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed. The scaleBy value will not be applied.\nA deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices\n\n* Rollback to an existing older version\n* Update with a newer version of the group which does not have the problems of the old one.\n\nSince the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version."
        operationId: "PUT_v2-groups"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
              oneOf: 
                - 
                  $ref: "#/definitions/deploymentResult.DeploymentResult"
                - 
                  type: "string"
          400: 
            description: "The group definition provided in the body is not valid."
            schema: 
              example: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
          422: 
            description: "The entity send can not be preocessed, since there are validation errors"
            schema: 
              example: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/apps(0)/id"
                    errors: 
                      - "identifier /app is not child of /group. Hint: use relative paths."
        parameters: 
          - 
            schema: 
              example: 
                id: "/"
                apps: []
                groups: 
                  - 
                    id: "/tools"
                    apps: 
                      - 
                        id: "/tools/oauth-server"
                        instances: 2
                        cpus: 1
                        mem: 1024
                        disk: 0
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 1980
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: []
                          docker: 
                            image: "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774"
                            network: "HOST"
                            privileged: false
                            parameters: []
                            forcePullImage: false
                        healthChecks: 
                          - 
                            path: "/"
                            protocol: "HTTP"
                            portIndex: 0
                            gracePeriodSeconds: 300
                            intervalSeconds: 20
                            timeoutSeconds: 20
                            maxConsecutiveFailures: 3
                            ignoreHttp1xx: false
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-09-28T19:47:37.681Z"
                        versionInfo: 
                          lastScalingAt: "2015-09-28T19:47:37.681Z"
                          lastConfigChangeAt: "2015-09-28T19:47:37.681Z"
                      - 
                        id: "/tools/datadog-agent"
                        instances: 5
                        cpus: 1
                        mem: 512
                        disk: 0
                        executor: ""
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 10018
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: 
                            - 
                              containerPath: "/var/run/docker.sock"
                              hostPath: "/var/run/docker.sock"
                              mode: "RW"
                            - 
                              containerPath: "/host/proc/mounts"
                              hostPath: "/proc/mounts"
                              mode: "RO"
                            - 
                              containerPath: "/host/sys/fs/cgroup"
                              hostPath: "/sys/fs/cgroup/"
                              mode: "RO"
                          docker: 
                            image: "datadog/docker-dd-agent:latest"
                            network: "HOST"
                            privileged: true
                            parameters: []
                            forcePullImage: false
                        healthChecks: []
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-08-26T22:33:24.225Z"
                        versionInfo: 
                          lastScalingAt: "2015-08-26T22:33:24.225Z"
                          lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    groups: 
                      - 
                        id: "/tools/log"
                        apps: []
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                      - 
                        id: "/tools/docker"
                        apps: 
                          - 
                            id: "/tools/docker/registry"
                            instances: 1
                            cpus: 0.5
                            mem: 4096
                            disk: 0
                            executor: ""
                            constraints: []
                            uris: []
                            ports: 
                              - 5000
                            requirePorts: false
                            backoffSeconds: 1
                            backoffFactor: 1.15
                            maxLaunchDelaySeconds: 3600
                            container: 
                              type: "DOCKER"
                              volumes: 
                                - 
                                  containerPath: "/docker_storage"
                                  hostPath: "/hdd/tools/docker/registry"
                                  mode: "RW"
                              docker: 
                                image: "registry"
                                network: "BRIDGE"
                                portMappings: 
                                  - 
                                    containerPort: 5000
                                    hostPort: 0
                                    servicePort: 5000
                                    protocol: "tcp"
                                privileged: false
                                parameters: []
                                forcePullImage: false
                            healthChecks: []
                            dependencies: []
                            upgradeStrategy: 
                              minimumHealthCapacity: 1
                              maximumOverCapacity: 1
                            version: "2015-08-19T21:26:47.616Z"
                            versionInfo: 
                              lastScalingAt: "2015-08-19T21:26:47.616Z"
                              lastConfigChangeAt: "2015-08-19T21:00:54.621Z"
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                    dependencies: []
                    version: "2015-09-17T10:38:20.875Z"
                dependencies: []
                version: "2015-09-17T10:38:20.875Z"
              type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "When this parameter is set, it will return the deployment steps Marathon would execute to deploy this group. No deployment will be triggered."
            type: "boolean"
            in: "query"
            name: "dryRun"
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      post: 
        description: "Create and start a new application group. Application groups can contain other application groups."
        operationId: "POST_v2-groups"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          400: 
            description: "The group definition provided in the body is not valid."
            schema: 
              example: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already deployed group with this name"
            schema: 
              example: 
                message: "Group / is already created. Use PUT to change this group."
          422: 
            description: "The entity send can not be preocessed, since there are validation errors"
            schema: 
              example: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/apps(0)/id"
                    errors: 
                      - "identifier /app is not child of /group. Hint: use relative paths."
        parameters: 
          - 
            schema: 
              example: 
                id: "/"
                apps: []
                groups: 
                  - 
                    id: "/tools"
                    apps: 
                      - 
                        id: "/tools/oauth-server"
                        instances: 2
                        cpus: 1
                        mem: 1024
                        disk: 0
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 1980
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: []
                          docker: 
                            image: "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774"
                            network: "HOST"
                            privileged: false
                            parameters: []
                            forcePullImage: false
                        healthChecks: 
                          - 
                            path: "/"
                            protocol: "HTTP"
                            portIndex: 0
                            gracePeriodSeconds: 300
                            intervalSeconds: 20
                            timeoutSeconds: 20
                            maxConsecutiveFailures: 3
                            ignoreHttp1xx: false
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-09-28T19:47:37.681Z"
                        versionInfo: 
                          lastScalingAt: "2015-09-28T19:47:37.681Z"
                          lastConfigChangeAt: "2015-09-28T19:47:37.681Z"
                      - 
                        id: "/tools/datadog-agent"
                        instances: 5
                        cpus: 1
                        mem: 512
                        disk: 0
                        executor: ""
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 10018
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: 
                            - 
                              containerPath: "/var/run/docker.sock"
                              hostPath: "/var/run/docker.sock"
                              mode: "RW"
                            - 
                              containerPath: "/host/proc/mounts"
                              hostPath: "/proc/mounts"
                              mode: "RO"
                            - 
                              containerPath: "/host/sys/fs/cgroup"
                              hostPath: "/sys/fs/cgroup/"
                              mode: "RO"
                          docker: 
                            image: "datadog/docker-dd-agent:latest"
                            network: "HOST"
                            privileged: true
                            parameters: []
                            forcePullImage: false
                        healthChecks: []
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-08-26T22:33:24.225Z"
                        versionInfo: 
                          lastScalingAt: "2015-08-26T22:33:24.225Z"
                          lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    groups: 
                      - 
                        id: "/tools/log"
                        apps: []
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                      - 
                        id: "/tools/docker"
                        apps: 
                          - 
                            id: "/tools/docker/registry"
                            instances: 1
                            cpus: 0.5
                            mem: 4096
                            disk: 0
                            executor: ""
                            constraints: []
                            uris: []
                            ports: 
                              - 5000
                            requirePorts: false
                            backoffSeconds: 1
                            backoffFactor: 1.15
                            maxLaunchDelaySeconds: 3600
                            container: 
                              type: "DOCKER"
                              volumes: 
                                - 
                                  containerPath: "/docker_storage"
                                  hostPath: "/hdd/tools/docker/registry"
                                  mode: "RW"
                              docker: 
                                image: "registry"
                                network: "BRIDGE"
                                portMappings: 
                                  - 
                                    containerPort: 5000
                                    hostPort: 0
                                    servicePort: 5000
                                    protocol: "tcp"
                                privileged: false
                                parameters: []
                                forcePullImage: false
                            healthChecks: []
                            dependencies: []
                            upgradeStrategy: 
                              minimumHealthCapacity: 1
                              maximumOverCapacity: 1
                            version: "2015-08-19T21:26:47.616Z"
                            versionInfo: 
                              lastScalingAt: "2015-08-19T21:26:47.616Z"
                              lastConfigChangeAt: "2015-08-19T21:00:54.621Z"
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                    dependencies: []
                    version: "2015-09-17T10:38:20.875Z"
                dependencies: []
                version: "2015-09-17T10:38:20.875Z"
              type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      delete: 
        description: "Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version."
        operationId: "DELETE_v2-groups"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      patch: 
        description: "Updates group settings without restarting applications. This operation is only allowed for top-level groups."
        operationId: "PATCH_v2-groups"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          400: 
            description: "The group update provided in the body is not valid."
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            schema: 
              type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
    /v2/groups//versions: 
      get: 
        description: "List all versions the group with the specified path."
        operationId: "GET_v2-groups--versions"
        responses: 
          200: 
            description: "List all available versions of that group."
            schema: 
              example: 
                - "2015-09-25T15:13:48.343Z"
                - "2015-09-11T11:11:22.692Z"
                - "2015-09-11T10:47:21.241Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
    /v2/groups/{group_id}/: 
      get: 
        description: "Get the group with all applications and all transitive child groups."
        operationId: "GET_v2-groups-group_id"
        responses: 
          200: 
            description: "The group with all transitive dependencies."
            schema: 
              example: 
                id: "/"
                apps: []
                groups: 
                  - 
                    id: "/tools"
                    apps: 
                      - 
                        id: "/tools/oauth-server"
                        instances: 2
                        cpus: 1
                        mem: 1024
                        disk: 0
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 1980
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: []
                          docker: 
                            image: "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774"
                            network: "HOST"
                            privileged: false
                            parameters: []
                            forcePullImage: false
                        healthChecks: 
                          - 
                            path: "/"
                            protocol: "HTTP"
                            portIndex: 0
                            gracePeriodSeconds: 300
                            intervalSeconds: 20
                            timeoutSeconds: 20
                            maxConsecutiveFailures: 3
                            ignoreHttp1xx: false
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-09-28T19:47:37.681Z"
                        versionInfo: 
                          lastScalingAt: "2015-09-28T19:47:37.681Z"
                          lastConfigChangeAt: "2015-09-28T19:47:37.681Z"
                      - 
                        id: "/tools/datadog-agent"
                        instances: 5
                        cpus: 1
                        mem: 512
                        disk: 0
                        executor: ""
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 10018
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: 
                            - 
                              containerPath: "/var/run/docker.sock"
                              hostPath: "/var/run/docker.sock"
                              mode: "RW"
                            - 
                              containerPath: "/host/proc/mounts"
                              hostPath: "/proc/mounts"
                              mode: "RO"
                            - 
                              containerPath: "/host/sys/fs/cgroup"
                              hostPath: "/sys/fs/cgroup/"
                              mode: "RO"
                          docker: 
                            image: "datadog/docker-dd-agent:latest"
                            network: "HOST"
                            privileged: true
                            parameters: []
                            forcePullImage: false
                        healthChecks: []
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-08-26T22:33:24.225Z"
                        versionInfo: 
                          lastScalingAt: "2015-08-26T22:33:24.225Z"
                          lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    groups: 
                      - 
                        id: "/tools/log"
                        apps: []
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                      - 
                        id: "/tools/docker"
                        apps: 
                          - 
                            id: "/tools/docker/registry"
                            instances: 1
                            cpus: 0.5
                            mem: 4096
                            disk: 0
                            executor: ""
                            constraints: []
                            uris: []
                            ports: 
                              - 5000
                            requirePorts: false
                            backoffSeconds: 1
                            backoffFactor: 1.15
                            maxLaunchDelaySeconds: 3600
                            container: 
                              type: "DOCKER"
                              volumes: 
                                - 
                                  containerPath: "/docker_storage"
                                  hostPath: "/hdd/tools/docker/registry"
                                  mode: "RW"
                              docker: 
                                image: "registry"
                                network: "BRIDGE"
                                portMappings: 
                                  - 
                                    containerPort: 5000
                                    hostPort: 0
                                    servicePort: 5000
                                    protocol: "tcp"
                                privileged: false
                                parameters: []
                                forcePullImage: false
                            healthChecks: []
                            dependencies: []
                            upgradeStrategy: 
                              minimumHealthCapacity: 1
                              maximumOverCapacity: 1
                            version: "2015-08-19T21:26:47.616Z"
                            versionInfo: 
                              lastScalingAt: "2015-08-19T21:26:47.616Z"
                              lastConfigChangeAt: "2015-08-19T21:00:54.621Z"
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                    dependencies: []
                    version: "2015-09-17T10:38:20.875Z"
                dependencies: []
                version: "2015-09-17T10:38:20.875Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
        parameters: 
          - 
            description: "Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. Unknown embed parameters are ignored. If you omit this parameter, it defaults to <code>group.groups</code>, <code>group.apps</code>\n- <code>group.groups</code> embed all child groups of each group<br/>\n- <code>group.apps</code> embed all apps of each group<br/>\n- <code>group.apps.tasks</code> embed all tasks of each application<br/>\n- <code>group.apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/>\n- <code>group.apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.\n- <code>group.apps.readiness</code> embed all readiness check results\n- <code>group.apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.\n- <code>group.apps.taskStats</code> exposes task statistics in the JSON."
            enum: 
              - "group.groups"
              - "group.apps"
              - "group.apps.tasks"
              - "group.apps.count"
              - "group.apps.deployments"
              - "group.apps.lastTaskFailure"
              - "group.apps.failures"
              - "group.apps.taskStats"
            type: "string"
            in: "query"
            name: "embed"
      put: 
        description: "Change parameters of a deployed application group. The new group parameters get applied.\n\n* Changes to application parameters will result in a restart of this application.\n* A new application added to the group will be started.\n* An existing application removed from the group will be stopped.\n\nIf there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.\nThis method allows 2 special modes for the update operation>\n\n* Provide only the `version` field in the group definition. This will rollback the group to that given version\n* Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.\n\nWhen one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed. The scaleBy value will not be applied.\nA deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices\n\n* Rollback to an existing older version\n* Update with a newer version of the group which does not have the problems of the old one.\n\nSince the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version."
        operationId: "PUT_v2-groups-group_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
              oneOf: 
                - 
                  $ref: "#/definitions/deploymentResult.DeploymentResult"
                - 
                  type: "string"
          400: 
            description: "The group definition provided in the body is not valid."
            schema: 
              example: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
          422: 
            description: "The entity send can not be preocessed, since there are validation errors"
            schema: 
              example: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/apps(0)/id"
                    errors: 
                      - "identifier /app is not child of /group. Hint: use relative paths."
        parameters: 
          - 
            schema: 
              example: 
                id: "/"
                apps: []
                groups: 
                  - 
                    id: "/tools"
                    apps: 
                      - 
                        id: "/tools/oauth-server"
                        instances: 2
                        cpus: 1
                        mem: 1024
                        disk: 0
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 1980
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: []
                          docker: 
                            image: "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774"
                            network: "HOST"
                            privileged: false
                            parameters: []
                            forcePullImage: false
                        healthChecks: 
                          - 
                            path: "/"
                            protocol: "HTTP"
                            portIndex: 0
                            gracePeriodSeconds: 300
                            intervalSeconds: 20
                            timeoutSeconds: 20
                            maxConsecutiveFailures: 3
                            ignoreHttp1xx: false
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-09-28T19:47:37.681Z"
                        versionInfo: 
                          lastScalingAt: "2015-09-28T19:47:37.681Z"
                          lastConfigChangeAt: "2015-09-28T19:47:37.681Z"
                      - 
                        id: "/tools/datadog-agent"
                        instances: 5
                        cpus: 1
                        mem: 512
                        disk: 0
                        executor: ""
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 10018
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: 
                            - 
                              containerPath: "/var/run/docker.sock"
                              hostPath: "/var/run/docker.sock"
                              mode: "RW"
                            - 
                              containerPath: "/host/proc/mounts"
                              hostPath: "/proc/mounts"
                              mode: "RO"
                            - 
                              containerPath: "/host/sys/fs/cgroup"
                              hostPath: "/sys/fs/cgroup/"
                              mode: "RO"
                          docker: 
                            image: "datadog/docker-dd-agent:latest"
                            network: "HOST"
                            privileged: true
                            parameters: []
                            forcePullImage: false
                        healthChecks: []
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-08-26T22:33:24.225Z"
                        versionInfo: 
                          lastScalingAt: "2015-08-26T22:33:24.225Z"
                          lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    groups: 
                      - 
                        id: "/tools/log"
                        apps: []
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                      - 
                        id: "/tools/docker"
                        apps: 
                          - 
                            id: "/tools/docker/registry"
                            instances: 1
                            cpus: 0.5
                            mem: 4096
                            disk: 0
                            executor: ""
                            constraints: []
                            uris: []
                            ports: 
                              - 5000
                            requirePorts: false
                            backoffSeconds: 1
                            backoffFactor: 1.15
                            maxLaunchDelaySeconds: 3600
                            container: 
                              type: "DOCKER"
                              volumes: 
                                - 
                                  containerPath: "/docker_storage"
                                  hostPath: "/hdd/tools/docker/registry"
                                  mode: "RW"
                              docker: 
                                image: "registry"
                                network: "BRIDGE"
                                portMappings: 
                                  - 
                                    containerPort: 5000
                                    hostPort: 0
                                    servicePort: 5000
                                    protocol: "tcp"
                                privileged: false
                                parameters: []
                                forcePullImage: false
                            healthChecks: []
                            dependencies: []
                            upgradeStrategy: 
                              minimumHealthCapacity: 1
                              maximumOverCapacity: 1
                            version: "2015-08-19T21:26:47.616Z"
                            versionInfo: 
                              lastScalingAt: "2015-08-19T21:26:47.616Z"
                              lastConfigChangeAt: "2015-08-19T21:00:54.621Z"
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                    dependencies: []
                    version: "2015-09-17T10:38:20.875Z"
                dependencies: []
                version: "2015-09-17T10:38:20.875Z"
              type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "When this parameter is set, it will return the deployment steps Marathon would execute to deploy this group. No deployment will be triggered."
            type: "boolean"
            in: "query"
            name: "dryRun"
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      post: 
        description: "Create and start a new application group. Application groups can contain other application groups."
        operationId: "POST_v2-groups-group_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          400: 
            description: "The group definition provided in the body is not valid."
            schema: 
              example: 
                message: "Invalid JSON"
                details: 
                  - 
                    path: "/id"
                    errors: 
                      - "error.expected.jsstring"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already deployed group with this name"
            schema: 
              example: 
                message: "Group / is already created. Use PUT to change this group."
          422: 
            description: "The entity send can not be preocessed, since there are validation errors"
            schema: 
              example: 
                message: "Object is not valid"
                details: 
                  - 
                    path: "/apps(0)/id"
                    errors: 
                      - "identifier /app is not child of /group. Hint: use relative paths."
        parameters: 
          - 
            schema: 
              example: 
                id: "/"
                apps: []
                groups: 
                  - 
                    id: "/tools"
                    apps: 
                      - 
                        id: "/tools/oauth-server"
                        instances: 2
                        cpus: 1
                        mem: 1024
                        disk: 0
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 1980
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: []
                          docker: 
                            image: "docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774"
                            network: "HOST"
                            privileged: false
                            parameters: []
                            forcePullImage: false
                        healthChecks: 
                          - 
                            path: "/"
                            protocol: "HTTP"
                            portIndex: 0
                            gracePeriodSeconds: 300
                            intervalSeconds: 20
                            timeoutSeconds: 20
                            maxConsecutiveFailures: 3
                            ignoreHttp1xx: false
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-09-28T19:47:37.681Z"
                        versionInfo: 
                          lastScalingAt: "2015-09-28T19:47:37.681Z"
                          lastConfigChangeAt: "2015-09-28T19:47:37.681Z"
                      - 
                        id: "/tools/datadog-agent"
                        instances: 5
                        cpus: 1
                        mem: 512
                        disk: 0
                        executor: ""
                        constraints: 
                          - 
                            - "hostname"
                            - "UNIQUE"
                        uris: []
                        ports: 
                          - 10018
                        requirePorts: false
                        backoffSeconds: 1
                        backoffFactor: 1.15
                        maxLaunchDelaySeconds: 3600
                        container: 
                          type: "DOCKER"
                          volumes: 
                            - 
                              containerPath: "/var/run/docker.sock"
                              hostPath: "/var/run/docker.sock"
                              mode: "RW"
                            - 
                              containerPath: "/host/proc/mounts"
                              hostPath: "/proc/mounts"
                              mode: "RO"
                            - 
                              containerPath: "/host/sys/fs/cgroup"
                              hostPath: "/sys/fs/cgroup/"
                              mode: "RO"
                          docker: 
                            image: "datadog/docker-dd-agent:latest"
                            network: "HOST"
                            privileged: true
                            parameters: []
                            forcePullImage: false
                        healthChecks: []
                        dependencies: []
                        upgradeStrategy: 
                          minimumHealthCapacity: 0.5
                          maximumOverCapacity: 0
                        version: "2015-08-26T22:33:24.225Z"
                        versionInfo: 
                          lastScalingAt: "2015-08-26T22:33:24.225Z"
                          lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    groups: 
                      - 
                        id: "/tools/log"
                        apps: []
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                      - 
                        id: "/tools/docker"
                        apps: 
                          - 
                            id: "/tools/docker/registry"
                            instances: 1
                            cpus: 0.5
                            mem: 4096
                            disk: 0
                            executor: ""
                            constraints: []
                            uris: []
                            ports: 
                              - 5000
                            requirePorts: false
                            backoffSeconds: 1
                            backoffFactor: 1.15
                            maxLaunchDelaySeconds: 3600
                            container: 
                              type: "DOCKER"
                              volumes: 
                                - 
                                  containerPath: "/docker_storage"
                                  hostPath: "/hdd/tools/docker/registry"
                                  mode: "RW"
                              docker: 
                                image: "registry"
                                network: "BRIDGE"
                                portMappings: 
                                  - 
                                    containerPort: 5000
                                    hostPort: 0
                                    servicePort: 5000
                                    protocol: "tcp"
                                privileged: false
                                parameters: []
                                forcePullImage: false
                            healthChecks: []
                            dependencies: []
                            upgradeStrategy: 
                              minimumHealthCapacity: 1
                              maximumOverCapacity: 1
                            version: "2015-08-19T21:26:47.616Z"
                            versionInfo: 
                              lastScalingAt: "2015-08-19T21:26:47.616Z"
                              lastConfigChangeAt: "2015-08-19T21:00:54.621Z"
                        groups: []
                        dependencies: []
                        version: "2015-09-17T10:38:20.875Z"
                    dependencies: []
                    version: "2015-09-17T10:38:20.875Z"
                dependencies: []
                version: "2015-09-17T10:38:20.875Z"
              type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      delete: 
        description: "Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version."
        operationId: "DELETE_v2-groups-group_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      patch: 
        description: "Updates group settings without restarting applications. This operation is only allowed for top-level groups."
        operationId: "PATCH_v2-groups-group_id"
        responses: 
          200: 
            description: "A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, it means that it is finished. As long as the deployment runs, the effect of that change operation is visible only partially."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                deploymentId: "5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43"
                version: "2015-09-29T15:59:51.164Z"
          400: 
            description: "The group update provided in the body is not valid."
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            schema: 
              type: "string"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "group_id"
          required: true
    /v2/groups/{group_id}//versions: 
      get: 
        description: "List all versions the group with the specified path."
        operationId: "GET_v2-groups-group_id--versions"
        responses: 
          200: 
            description: "List all available versions of that group."
            schema: 
              example: 
                - "2015-09-25T15:13:48.343Z"
                - "2015-09-11T11:11:22.692Z"
                - "2015-09-11T10:47:21.241Z"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
    /v2/tasks: 
      get: 
        description: "List all tasks."
        operationId: "GET_v2-tasks"
        produces: 
          - "text/plain"
        responses: 
          200: 
            description: "The list of all tasks disregarding their status, or a list of tasks matching the specified status filter."
            examples: 
              application/json: 
                tasks: 
                  - 
                    id: "frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b"
                    host: "srv4.example.com"
                    ports: 
                      - 31292
                    startedAt: "2015-09-17T09:32:42.598Z"
                    stagedAt: "2015-09-17T09:32:36.822Z"
                    version: "2015-09-17T09:32:36.583Z"
                    slaveId: "20150707-153709-201330860-5050-12052-S0"
                    appId: "/frontend-foosball"
                    state: "TASK_RUNNING"
                    servicePorts: 
                      - 10019
                    region: "primary"
                    zone: "a"
                  - 
                    id: "tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed"
                    host: "srv2.example.com"
                    ports: 
                      - 31721
                    startedAt: "2015-08-19T21:26:50.864Z"
                    stagedAt: "2015-08-19T21:26:49.040Z"
                    version: "2015-08-19T21:26:47.616Z"
                    slaveId: "1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24"
                    state: "TASK_RUNNING"
                    appId: "/tools/docker/registry"
                    servicePorts: 
                      - 5000
                    region: "primary"
                    zone: "a"
            schema: 
              type: "object"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
        parameters: 
          - 
            description: "Filter the list of tasks by status. If status is not specified, tasks with any status will be included."
            in: "query"
            name: "status"
            type: "string"
          - 
            description: "Filter the list of tasks by several statuses."
            type: "array"
            items: 
              type: "string"
            in: "query"
            name: "status[]"
    /v2/tasks/delete: 
      post: 
        description: "Kill a list of running tasks."
        operationId: "POST_v2-tasks-delete"
        responses: 
          200: 
            description: "If scale=false, all tasks that were killed are returned. If scale=true, than a deployment is triggered and the deployment is returned."
            headers: 
              Marathon-Deployment-Id: 
                description: "Resulting deployment id created by the change operation."
                type: "string"
            schema: 
              example: 
                tasks: 
                  - 
                    id: "frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b"
                    host: "srv4.example.com"
                    ports: 
                      - 31292
                    startedAt: "2015-09-17T09:32:42.598Z"
                    stagedAt: "2015-09-17T09:32:36.822Z"
                    version: "2015-09-17T09:32:36.583Z"
                    slaveId: "20150707-153709-201330860-5050-12052-S0"
                    appId: "/frontend-foosball"
                    state: "TASK_RUNNING"
                    servicePorts: 
                      - 10019
                    region: "primary"
                    zone: "a"
                  - 
                    id: "tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed"
                    host: "srv2.example.com"
                    ports: 
                      - 31721
                    startedAt: "2015-08-19T21:26:50.864Z"
                    stagedAt: "2015-08-19T21:26:49.040Z"
                    version: "2015-08-19T21:26:47.616Z"
                    slaveId: "1cc9e7d0-63d6-4e99-9c58-c0b950401ae2-S24"
                    state: "TASK_RUNNING"
                    appId: "/tools/docker/registry"
                    servicePorts: 
                      - 5000
                    region: "primary"
                    zone: "a"
              oneOf: 
                - 
                  $ref: "#/definitions/task.TaskList"
                - 
                  $ref: "#/definitions/deploymentResult.DeploymentResult"
          400: 
            description: "There are unknown task ids, that can not be killed."
            schema: 
              example: 
                message: "Invalid task id not_known"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          409: 
            description: "There is an already running deployment, that affects this application. To override this deployment, use the force=true flag"
            schema: 
              example: 
                message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
                deployments: 
                  - 
                    id: "97c136bf-5a28-4821-9d94-480d9fbb01c8"
        parameters: 
          - 
            schema: 
              example: 
                ids: 
                  - "task1"
                  - "task2"
              $ref: "#/definitions/deleteTasks.DeleteTasks"
            in: "body"
            name: "body"
            required: true
          - 
            default: false
            description: "If `scale=true` is specified, then the related application is scaled down by the number of killed tasks. Only possible if `wipe=false` or not specified."
            type: "boolean"
            in: "query"
            name: "scale"
            required: true
          - 
            default: false
            description: "If `wipe=true` is specified and the app uses local persistent volumes, associated dynamic reservations will be unreserved, and persistent volumes will be destroyed. Only possible if `scale=false` or not specified."
            type: "boolean"
            in: "query"
            name: "wipe"
            required: true
          - 
            default: false
            description: "Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.\nCaution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!"
            type: "boolean"
            in: "query"
            name: "force"
    /v2/events: 
      get: 
        description: "Attach to the marathon event stream.\nTo use this endpoint, the client has to accept the text/event-stream content type.\nPlease note a request to this endpoint will not be closed by the server. If an event happens on the server side, this event will be propagated to the client immediately. See [Server Sent Events](http://www.w3schools.com/html/html5_serversentevents.asp) for a more detailed explanation.\nNote for ApiConsole&#58; this function will not yield the expected result from inside ApiConsole."
        operationId: "GET_v2-events"
        produces: 
          - "text/event-stream"
          - "text/html"
        responses: 
          200: 
            description: "the list of all tasks waiting to be scheduled."
            schema: 
              example: "event: event_stream_attached\ndata: {\"remoteAddress\":\"0:0:0:0:0:0:0:1\",\"eventType\":\"event_stream_attached\",\"timestamp\":\"2015-09-30T12:44:30.061Z\"}\n\nevent: status_update_event\ndata: {\"slaveId\":\"20150707-153709-218108076-5050-25588-S6\",\"taskId\":\"foo.0664256e-6771-11e5-94e1-be5b2935a987\",\"taskStatus\":\"TASK_FAILED\",\"message\":\"Failed to launch container: Failed to fetch all URIs for container '59d5cd89-091f-4454-940a-d9eb4361c640' with exit status: 256\",\"appId\":\"/foo\",\"host\":\"srv5.hw.ca1.mesosphere.com\",\"ports\":[31776],\"version\":\"2015-09-30T09:09:17.614Z\",\"eventType\":\"status_update_event\",\"timestamp\":\"2015-09-30T12:44:45.681Z\"}\n\nevent: status_update_event\ndata: {\"slaveId\":\"20150707-153709-201330860-5050-12052-S0\",\"taskId\":\"test-app.5dd78972-6771-11e5-94e1-be5b2935a987\",\"taskStatus\":\"TASK_RUNNING\",\"message\":\"\",\"appId\":\"/test-app\",\"host\":\"srv4.hw.ca1.mesosphere.com\",\"ports\":[31182],\"version\":\"2015-09-11T22:11:03.156Z\",\"eventType\":\"status_update_event\",\"timestamp\":\"2015-09-30T12:47:11.286Z\"}\n\n\n"
          405: 
            description: "A request has been made without the correct Accept Header"
            schema: 
              example: "<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\"/>\n<title>Error 405 </title>\n</head>\n<body>\n<h2>HTTP ERROR: 405</h2>\n<p>Problem accessing /v2/events. Reason:\n<pre>    HTTP method GET is not supported by this URL</pre></p>\n<hr /><a href=\"http://eclipse.org/jetty\">Powered by Jetty:// 9.3.z-SNAPSHOT</a><hr/>\n</body>\n</html>\n"
        parameters: 
          - 
            description: "Specify subscribed event types. You can specify this parameter multiple times with different values."
            type: "string"
            in: "query"
            name: "event_type"
    /v2/info: 
      get: 
        description: "Get info about the Marathon Instance"
        operationId: "GET_v2-info"
        responses: 
          200: 
            description: "General configuration and runtime information about this Marathon instance."
            examples: 
              application/json: 
                name: "marathon"
                version: "1.5.0-SNAPSHOT"
                buildref: "unknown"
                elected: true
                leader: "localhost:8080"
                frameworkId: "96d7da70-b731-4cfb-96a7-0ee877af615d-0000"
                marathon_config: 
                  access_control_allow_origin: 
                    - "*"
                  checkpoint: true
                  decline_offer_duration: 120000
                  default_network_name: "container-network"
                  env_vars_prefix: "APP"
                  executor: "//cmd"
                  failover_timeout: 604800
                  features: []
                  framework_name: "marathon"
                  ha: true
                  hostname: "localhost"
                  launch_token: 100
                  launch_token_refresh_interval: 30000
                  leader_proxy_connection_timeout_ms: 5000
                  leader_proxy_read_timeout_ms: 10000
                  local_port_max: 20000
                  local_port_min: 10000
                  master: "zk://localhost:2181/mesos"
                  max_instances_per_offer: 5
                  mesos_bridge_name: "mesos-bridge"
                  mesos_heartbeat_failure_threshold: 5
                  mesos_heartbeat_interval: 15000
                  mesos_leader_ui_url: "http://localhost:5050/"
                  mesos_role: "slave_public"
                  mesos_user: "nobody"
                  min_revive_offers_interval: 5000
                  offer_matching_timeout: 3000
                  on_elected_prepare_timeout: 180000
                  reconciliation_initial_delay: 15000
                  reconciliation_interval: 600000
                  scale_apps_initial_delay: 15000
                  scale_apps_interval: 300000
                  store_cache: true
                  task_launch_confirm_timeout: 300000
                  task_launch_timeout: 300000
                  task_lost_expunge_initial_delay: 300000
                  task_lost_expunge_interval: 30000
                  task_reservation_timeout: 20000
                  webui_url: "http://localhost:8080"
                zookeeper_config: 
                  zk: "zk://localhost:2181/marathon"
                  zk_compression: true
                  zk_compression_threshold: 65536
                  zk_connection_timeout: 10000
                  zk_max_node_size: 1024000
                  zk_max_versions: 50
                  zk_session_timeout: 10000
                  zk_timeout: 10000
                http_config: 
                  http_port: 8080
                  https_port: 8443
            schema: 
              $ref: "#/definitions/info.MarathonInfo"
    /v2/leader: 
      get: 
        description: "Returns the current leader."
        operationId: "GET_v2-leader"
        responses: 
          200: 
            description: "The host and port of the current leading master."
            examples: 
              application/json: 
                leader: "marathon.globalcorp.com:8080"
            schema: 
              $ref: "#/definitions/info.LeaderInfo"
          404: 
            description: "If there is no current leader."
            examples: 
              application/json: 
                message: "There is no leader"
            schema: 
              $ref: "#/definitions/strings.Message"
      delete: 
        description: "Causes the current leader to abdicate, triggering a new election.\n\nAbdicating a Marathon instance causes this instance to exit.\nThe underlying system is responsible for restarting this instance.\n\nEvery abdication triggers a new leader election.\nThe next elected leader will read the state from the persistent store and continue the work from the previous leader.\n\nIt is possible to use this endpoint to trigger a backup or restore operation for the persistent data store.\nThe requested operation will be perfomed by the next leading Marathon master.\nCurrently two providers are allowed:\n- File provider: file:///path/to/file\n- S3 provider (experimental): s3://bucket-name/key-in-bucket?access_key=xxx&secret_key=xxx&region=eu-central-1\n  Please note: access_key and secret_key are optional.\n  If not provided, the [AWS default credentials provider chain](http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html) is used to look up aws credentials.\n"
        operationId: "DELETE_v2-leader"
        responses: 
          200: 
            description: "The abdication message from the current leader."
            schema: 
              example: 
                message: "Leadership abdicated"
          404: 
            description: "If there is no current leader."
            schema: 
              example: 
                message: "There is no leader"
        parameters: 
          - 
            description: "URI to backup zk state."
            type: "string"
            in: "query"
            name: "backup?"
          - 
            description: "URI to restore zk state."
            type: "string"
            in: "query"
            name: "restore?"
    /v2/plugins: 
      get: 
        description: "Returns the list of all loaded plugins"
        operationId: "GET_v2-plugins"
        responses: 
          200: 
            description: "The list of all loaded plugins"
            schema: 
              example: 
                plugins: 
                  - 
                    id: "webjar"
                    implementation: "mesosphere.marathon.example.plugin.http.WebJarHandler"
                    info: 
                      version: "1.2.3"
                      array: 
                        - 1
                        - 2
                        - 3
                        - 4
                        - 5
                        - 6
                      test: true
                    plugin: "mesosphere.marathon.plugin.http.HttpRequestHandler"
                    tags: 
                      - "webjar"
                      - "test"
    /v2/plugins/{plugin_id}/{path}: 
      get: 
        description: "Get request is handled by the plugin."
        operationId: "GET_v2-plugins-plugin_id-path"
        responses: 
          default: 
            description: ""
      put: 
        description: "Put request is handled by the plugin."
        operationId: "PUT_v2-plugins-plugin_id-path"
        responses: 
          default: 
            description: ""
      post: 
        description: "Post request is handled by the plugin."
        operationId: "POST_v2-plugins-plugin_id-path"
        responses: 
          default: 
            description: ""
      delete: 
        description: "Delete request is handled by the plugin."
        operationId: "DELETE_v2-plugins-plugin_id-path"
        responses: 
          default: 
            description: ""
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "plugin_id"
          required: true
        - 
          type: "string"
          in: "path"
          name: "path"
          required: true
    /v2/queue/: 
      get: 
        description: "List all the instances queued up or waiting to be scheduled.\nThis is mainly used for troubleshooting and occurs when scaling\nchanges are requested and the volume of scaling changes out paces the ability to schedule those tasks.\nIn addition to the application in the queue, you see also the task count that needs to be started.\nIf the task has a rate limit, then a delay to the start gets applied.\nYou can see this delay for every application with the seconds to wait before the next launch will be tried.\n"
        operationId: "GET_v2-queue"
        responses: 
          200: 
            description: "The list of all tasks waiting to be scheduled.\n"
            schema: 
              example: 
                queue: 
                  - 
                    app: 
                      id: "/tools/datadog-agent"
                      instances: 5
                      cpus: 1
                      mem: 512
                      disk: 0
                      constraints: 
                        - 
                          - "hostname"
                          - "UNIQUE"
                      ports: 
                        - 10018
                      requirePorts: false
                      backoffSeconds: 1
                      backoffFactor: 1.15
                      maxLaunchDelaySeconds: 3600
                      container: 
                        type: "DOCKER"
                        docker: 
                          image: "datadog/docker-dd-agent:latest"
                          network: "HOST"
                          privileged: true
                          forcePullImage: false
                      upgradeStrategy: 
                        minimumHealthCapacity: 0.5
                        maximumOverCapacity: 0
                      version: "2015-08-26T22:33:24.225Z"
                      versionInfo: 
                        lastScalingAt: "2015-08-26T22:33:24.225Z"
                        lastConfigChangeAt: "2015-05-19T13:59:18.899Z"
                    count: 1
                    delay: 
                      timeLeftSeconds: 0
                      overdue: true
                    since: "2016-02-28T16:41:41.090Z"
                    processedOffersSummary: 
                      processedOffersCount: 123
                      unusedOffersCount: 0
                  - 
                    app: 
                      id: "/foo"
                      user: "root"
                      env: 
                        MASTER: "zk://172.16.0.12:2181,172.16.0.13:2181,172.16.0.14:2181/mesos"
                      instances: 1
                      cpus: 0.5
                      mem: 128
                      disk: 0
                      executor: "//cmd"
                      constraints: 
                        - 
                          - "hostname"
                          - "UNIQUE"
                      uris: 
                        - "http://www.mesosphere.io/index.html"
                      ports: 
                        - 10010
                      requirePorts: false
                      backoffSeconds: 1
                      backoffFactor: 1.15
                      maxLaunchDelaySeconds: 3600
                      container: 
                        type: "DOCKER"
                        docker: 
                          image: "thomasr/dispatch"
                          network: "HOST"
                          privileged: false
                          forcePullImage: false
                      upgradeStrategy: 
                        minimumHealthCapacity: 1
                        maximumOverCapacity: 1
                      version: "2015-09-30T09:09:17.614Z"
                      versionInfo: 
                        lastScalingAt: "2015-09-30T09:09:17.614Z"
                        lastConfigChangeAt: "2015-09-30T09:09:17.614Z"
                    count: 2
                    delay: 
                      timeLeftSeconds: 0
                      overdue: true
                    since: "2016-02-28T16:41:41.090Z"
                    processedOffersSummary: 
                      processedOffersCount: 123
                      unusedOffersCount: 123
                      lastUnusedOfferAt: "2016-02-28T16:41:41.090Z"
                      lastUsedOfferAt: "2016-02-28T16:41:41.090Z"
                      rejectSummaryLastOffers: 
                        - 
                          reason: "UnfulfilledRole"
                          declined: 0
                          processed: 123
                        - 
                          reason: "UnfulfilledConstraint"
                          declined: 0
                          processed: 123
                        - 
                          reason: "NoCorrespondingReservationFound"
                          declined: 0
                          processed: 123
                        - 
                          reason: "InsufficientCpus"
                          declined: 75
                          processed: 123
                        - 
                          reason: "InsufficientMemory"
                          declined: 15
                          processed: 48
                        - 
                          reason: "InsufficientDisk"
                          declined: 10
                          processed: 33
                        - 
                          reason: "InsufficientGpus"
                          declined: 0
                          processed: 23
                        - 
                          reason: "DeclinedScarceResources"
                          declined: 0
                          processed: 11
                      rejectSummaryLaunchAttempt: 
                        - 
                          reason: "UnfulfilledRole"
                          declined: 0
                          processed: 246
                        - 
                          reason: "UnfulfilledConstraint"
                          declined: 0
                          processed: 246
                        - 
                          reason: "NoCorrespondingReservationFound"
                          declined: 0
                          processed: 246
                        - 
                          reason: "AgentMaintenance"
                          declined: 0
                          processed: 246
                        - 
                          reason: "InsufficientCpus"
                          declined: 150
                          processed: 246
                        - 
                          reason: "InsufficientMemory"
                          declined: 30
                          processed: 96
                        - 
                          reason: "InsufficientDisk"
                          declined: 20
                          processed: 66
                        - 
                          reason: "InsufficientGpus"
                          declined: 0
                          processed: 46
                        - 
                          reason: "DeclinedScarceResources"
                          declined: 0
                          processed: 31
                    lastUnusedOffers: 
                      - 
                        offer: 
                          id: "offer_123"
                          agentId: "slave_123"
                          hostname: "1.2.3.4"
                          resources: 
                            - 
                              name: "cpus"
                              scalar: 23
                              ranges: 
                                - 
                                  begin: 1
                                  end: 5
                              set: 
                                - "a"
                                - "b"
                              role: "*"
                          attributes: 
                            - 
                              name: "foo"
                              scalar: 23
                              ranges: 
                                - 
                                  begin: 1
                                  end: 5
                              set: 
                                - "a"
                                - "b"
                        timestamp: "2016-02-28T16:41:41.090Z"
                        reason: 
                          - "InsufficientMemory"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
        parameters: 
          - 
            description: "Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values.\n- <code>lastUnusedOffers</code> embed all unused offers for every application."
            type: "string"
            in: "query"
            name: "embed"
    /v2/queue/{app_id}/delay: 
      delete: 
        description: "If an application fails too often in a specified amount of time (according to the application definition),\nthe instance launch will be delayed.\nThis delay can be removed by calling this endpoint.\nThe effect is, that the tasks of this application will be launched immediately.\n"
        operationId: "DELETE_v2-queue-app_id-delay"
        responses: 
          200: 
            description: "the delay is reset and no body is returned"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          404: 
            description: "there is no delay for the given application with id `app_id`"
      parameters: 
        - 
          type: "string"
          in: "path"
          name: "app_id"
          required: true
    /ping: 
      get: 
        description: "Ping this Marathon instance."
        operationId: "GET_ping"
        produces: 
          - "text/plain"
        responses: 
          200: 
            description: "Every ping is answered with a pong."
            schema: 
              example: "pong"
    /metrics: 
      get: 
        description: "Get metrics data from this Marathon instance"
        operationId: "GET_metrics"
        responses: 
          200: 
            description: "All aggregated runtime metrics for this Marathon instance."
            schema: 
              $ref: "#/definitions/metrics.Metrics"
    /logging: 
      get: 
        description: "Get all configured loggers"
        operationId: "GET_logging"
        responses: 
          200: 
            description: "All loggers in the system"
            schema: 
              $ref: "#/definitions/logging.Loggers"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
      post: 
        description: "Update a specific logger level"
        operationId: "POST_logging"
        responses: 
          200: 
            description: "logger changed to the given logging level"
            schema: 
              $ref: "#/definitions/logging.LoggerChange"
          401: 
            description: "Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request."
            schema: 
              example: 
                message: "Invalid username or password."
          403: 
            description: "Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action."
            schema: 
              example: 
                message: "Not Authorized to perform this action!"
          422: 
            description: "request not understood"
        parameters: 
          - 
            schema: 
              $ref: "#/definitions/logging.LoggerChange"
            in: "body"
            name: "body"
            required: true

