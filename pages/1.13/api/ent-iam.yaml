# Auto-generated YAML file. Do not edit manually.
# Run `docs/openapi-spec-extension/build-extended-spec.py` to regenerate.
swagger: '2.0'
info:
  version: 1.0.0
  title: Identity and Access Management API
schemes:
- http
- https
basePath: /acs/api/v1
tags:
- name: login
  description: Login- and authentication-related endpoints
- name: oidc
  description: OpenID Connect endpoints, including provider management
- name: users
  description: User management endpoints
- name: groups
  description: Group management endpoints
- name: permissions
  description: Permission management endpoints
- name: saml
  description: SAML 2.0 endpoints, including provider management
- name: ldap
  description: Directory (LDAP) back-end configuration and interaction endpoints
paths:
  /acls:
    get:
      summary: Retrieve all ACL objects.
      description: Get array of `ACL` objects.
      tags:
      - permissions
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              array:
                type: array
                items:
                  $ref: '#/definitions/ACL'
  /acls/{rid}:
    get:
      summary: Retrieve ACL for a certain resource.
      description: Retrieve single `ACL` object, for a specific resource.
      tags:
      - permissions
      produces:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: The ID of the resource to retrieve the ACL for.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/ACL'
    put:
      summary: Create ACL for a certain resource.
      description: Create new ACL for resource with ID `rid` (description in body,
        no permissions by default).
      tags:
      - permissions
      consumes:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: The ID of the resource for which the ACL should be created.
        type: string
      - name: ACL
        in: body
        required: true
        schema:
          $ref: '#/definitions/ACLCreate'
      responses:
        201:
          description: ACL created.
        409:
          description: Already exists (this resource already has an ACL set).
    patch:
      summary: Update ACL for a certain resource.
      description: Update ACL for resource with ID `rid`.
      tags:
      - permissions
      consumes:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: The ID of the resource for which the ACL should be created.
        type: string
      - name: ACL update object
        description: New ACL.
        in: body
        required: true
        schema:
          $ref: '#/definitions/ACLUpdate'
      responses:
        204:
          description: Success.
    delete:
      summary: Delete ACL for a certain resource.
      description: Delete ACL of resource with ID `rid`.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: The ID of resource for which the ACL should be deleted.
        type: string
      responses:
        204:
          description: Success.
  /acls/{rid}/groups/{gid}:
    get:
      summary: Get allowed actions for given resource and group.
      description: Get allowed actions for given resource and group.
      tags:
      - permissions
      produces:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID
        type: string
      - name: gid
        in: path
        required: true
        description: group ID
        type: string
      responses:
        200:
          description: Success.
          schema:
            type: object
            properties:
              array:
                type: array
                items:
                  $ref: '#/definitions/Action'
    delete:
      summary: Forbid all actions of given group to given resource.
      description: Forbid all actions of given group to given resource.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID.
        type: string
      - name: gid
        in: path
        required: true
        description: group ID.
        type: string
      responses:
        204:
          description: Success.
  /acls/{rid}/groups/{gid}/{action}:
    get:
      summary: Query whether action is allowed or not.
      description: Query whether action is allowed or not.
      tags:
      - permissions
      produces:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID
        type: string
      - name: gid
        in: path
        required: true
        description: group ID
        type: string
      - name: action
        in: path
        required: true
        description: action name
        type: string
      responses:
        200:
          description: Boolean answer in JSON response body.
          schema:
            $ref: '#/definitions/ActionAllowed'
    put:
      summary: Permit single action for given resource and group.
      description: Permit single action for given resource and group.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID.
        type: string
      - name: gid
        in: path
        required: true
        description: group ID.
        type: string
      - name: action
        in: path
        required: true
        description: action name
        type: string
      responses:
        204:
          description: Success.
    delete:
      summary: Forbid single action for given resource and group.
      description: Forbid single action for given resource and group.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID.
        type: string
      - name: gid
        in: path
        required: true
        description: group ID.
        type: string
      - name: action
        in: path
        required: true
        description: action name
        type: string
      responses:
        204:
          description: Success.
  /acls/{rid}/permissions:
    get:
      summary: Retrieve all permissions for resource.
      description: Retrieve all permissions that are set for a specific resource.
      tags:
      - permissions
      produces:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/ACLPermissions'
  /acls/{rid}/users/{uid}:
    get:
      summary: Get allowed actions for given resource and user.
      description: Get allowed actions for given resource and user.
      tags:
      - permissions
      produces:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID
        type: string
      - name: uid
        in: path
        required: true
        description: account ID
        type: string
      responses:
        200:
          description: Success.
          schema:
            type: object
            properties:
              array:
                type: array
                items:
                  $ref: '#/definitions/Action'
    delete:
      summary: Forbid all actions of given account to given resource.
      description: Forbid all actions of given account to given resource.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID.
        type: string
      - name: uid
        in: path
        required: true
        description: account ID.
        type: string
      responses:
        204:
          description: Success.
  /acls/{rid}/users/{uid}/{action}:
    get:
      summary: Query whether action is allowed or not.
      description: Query whether action is allowed or not.
      tags:
      - permissions
      produces:
      - application/json
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID
        type: string
      - name: uid
        in: path
        required: true
        description: account ID
        type: string
      - name: action
        in: path
        required: true
        description: action name
        type: string
      responses:
        200:
          description: Boolean answer in JSON response body.
          schema:
            $ref: '#/definitions/ActionAllowed'
    put:
      summary: Permit single action for given account and resource.
      description: Permit single action for given account and resource.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID.
        type: string
      - name: uid
        in: path
        required: true
        description: account ID.
        type: string
      - name: action
        in: path
        required: true
        description: action name
        type: string
      responses:
        204:
          description: Success.
    delete:
      summary: Forbid single action for given account and resource.
      description: Forbid single action for given account and resource.
      tags:
      - permissions
      parameters:
      - name: rid
        in: path
        required: true
        description: resource ID.
        type: string
      - name: uid
        in: path
        required: true
        description: account ID.
        type: string
      - name: action
        in: path
        required: true
        description: action name
        type: string
      responses:
        204:
          description: Success.
  /auth/jwks:
    get:
      summary: Get the IAM's JSON Web Key Set (JWKS, according to RFCs 7517/7518).
      description: 'This endpoint provides the IAM''s JSON Web Key Set (JWKS), exposing
        public key details required for the process of DC/OS authentication token
        verification: the public key material can be used for verifying authentication
        tokens signed by the IAM''s private key. The DC/OS authentication token is
        a JSON Web Token (JWT) of type RS256, and is required to have the two claims
        `exp` and `uid`. For interpretation of the data provided by the JWKS endpoint
        see https://tools.ietf.org/html/rfc7517 and https://tools.ietf.org/html/rfc7518.'
      responses:
        200:
          description: The response body contains a JSON Web Key Set document.
  /auth/login:
    post:
      summary: Log in (obtain a DC/OS authentication token).
      description: 'Exchange user credentials (regular user account: uid and password;
        service user account: uid and service login token) for a DC/OS authentication
        token. The resulting DC/OS authentication token is an RFC 7519 JSON Web Token
        (JWT) of type RS256. It has a limited lifetime which depends on the IAM configuration
        (only, i.e. the lifetime cannot be chosen as part of the login HTTP request).
        The DC/OS authentication token can be verified out-of-band using a standards-compliant
        RS256 JWT verification procedure based on the long-lived public key material
        presented by the IAM''s /auth/jwks endpoint, and by requiring the two claims
        `exp` and `uid` to be present.'
      tags:
      - login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: LoginObject
        description: uid & password or uid & service login token.
        in: body
        required: true
        schema:
          $ref: '#/definitions/LoginObject'
      responses:
        200:
          description: Login successful. The response body contains a JSON object
            providing the authentication token.
          schema:
            $ref: '#/definitions/AuthToken'
          headers:
            Set-Cookie:
              description: A cookie containing the auth token (implementation detail
                for browser support, should not be of interest to general API consumers).
              type: string
        401:
          description: Login failed.
    get:
      summary: Log in using an external identity provider.
      description: Log in using an external identity provider (via e.g. OpenID Connect),
        as specified via query parameter. This request initiates a single sign-on
        flow.
      tags:
      - login
      parameters:
      - name: oidc-provider
        description: OIDC provider ID
        in: query
        required: false
        type: string
      responses:
        200:
          description: Redirect to the identity provider.
  /auth/oidc/callback:
    get:
      summary: OpenID Connect callback URL.
      description: After successfully logging in to an OpenID Connect identity provider,
        the end-user is being redirected back to the IAM via this callback URL. API
        consumers are not required to explicitly interact with this endpoint. This
        URL usually needs to be handed over to an OpenID Connect provider (often called
        "redirect" or "callback" URL).
      tags:
      - oidc
      responses:
        302:
          description: OIDC authentication flow successful.
        401:
          description: Problem in authentication flow.
  /auth/oidc/providers:
    get:
      summary: Get an overview for the configured OIDC providers.
      description: Get an overview for the configured OIDC providers. The response
        contains a JSON object, with each key being an OIDC provider ID, and each
        value being the corresponding provider description string. This endpoint does
        not expose sensitive provider configuration details.
      tags:
      - oidc
      produces:
      - application/json
      responses:
        200:
          description: Success.
  /auth/oidc/providers/{provider-id}:
    get:
      summary: Get configuration for a specific provider.
      description: Get configuration for a specific provider.
      tags:
      - oidc
      produces:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the OIDC provider to retrieve the config for.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/OIDCProviderConfig'
    put:
      summary: Configure a new OIDC provider.
      description: Set up OIDC provider with the ID as specified in the URL, and with
        the config as specified via JSON in the request body.
      tags:
      - oidc
      consumes:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the provider to create.
        type: string
      - name: Provider config object
        description: Provider config JSON object
        in: body
        required: true
        schema:
          $ref: '#/definitions/OIDCProviderConfig'
      responses:
        201:
          description: Provider created.
        409:
          description: Provider already exists.
    patch:
      summary: Update OIDC provider config.
      description: Update config for existing OIDC provider.
      tags:
      - oidc
      consumes:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the provider to modify.
        type: string
      - name: Provider config object
        description: Provider config JSON object
        in: body
        required: true
        schema:
          $ref: '#/definitions/OIDCProviderConfig'
      responses:
        204:
          description: Update applied.
        400:
          description: Various errors (e.g. provider not yet configured).
    delete:
      summary: Delete provider.
      description: Delete provider (disables authentication with that provider).
      tags:
      - oidc
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the OIDC provider to delete.
        type: string
      responses:
        204:
          description: Success.
  /auth/saml/providers:
    get:
      summary: Get an overview for the configured SAML 2.0 providers.
      description: Get an overview for the configured SAML 2.0 providers. The response
        contains a JSON object, with each key being a SAML provider ID, and each value
        being the corresponding provider description string. This endpoint does not
        expose sensitive provider configuration details.
      tags:
      - saml
      produces:
      - application/json
      responses:
        200:
          description: Success.
  /auth/saml/providers/{provider-id}:
    get:
      summary: Get configuration for a specific SAML provider.
      description: Get configuration for a specific SAML provider.
      tags:
      - saml
      produces:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the SAML provider to retrieve the config for.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/SAMLProviderConfig'
    put:
      summary: Configure a new SAML provider.
      description: Set up a SAML provider with the ID as specified in the URL, and
        with the config as given by the JSON document in the request body.
      tags:
      - saml
      consumes:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the provider to create.
        type: string
      - name: Provider config object
        description: Provider config JSON object
        in: body
        required: true
        schema:
          $ref: '#/definitions/SAMLProviderConfig'
      responses:
        201:
          description: Provider created.
        409:
          description: Provider already exists.
    patch:
      summary: Update SAML provider config.
      description: Update config for existing SAML provider.
      tags:
      - saml
      consumes:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the provider to modify.
        type: string
      - name: Provider config object
        description: Provider config JSON object
        in: body
        required: true
        schema:
          $ref: '#/definitions/SAMLProviderConfig'
      responses:
        204:
          description: Update applied.
        400:
          description: Various errors (e.g. provider not yet configured).
    delete:
      summary: Delete provider.
      description: Delete provider (disables authentication with that provider).
      tags:
      - saml
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the SAML provider to delete.
        type: string
      responses:
        204:
          description: Success.
  /auth/saml/providers/{provider-id}/acs-callback:
    post:
      summary: The SP ACS callback endpoint.
      description: The IAM acts as SAML service provider (SP). As part of the authentication
        flow, a SAML identity provider (IdP) makes the end-user submit an authentication
        response to this endpoint.
      tags:
      - saml
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the provider the authentication response is meant for.
        type: string
      responses:
        302:
          description: SAML authentication flow successful.
        401:
          description: Problem in authentication flow.
  /auth/saml/providers/{provider-id}/acs-callback-url:
    get:
      summary: Get the authentication callback URL for this SP.
      description: The IAM acts as SAML service provider (SP). A SAML identity provider
        (IdP) usually requires to be configured with the Assertion Consumer Service
        (ACS) callback URL of the SP (which is where the IdP makes the end-user submit
        the authentication response).
      tags:
      - saml
      produces:
      - application/json
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the SAML provider to retrieve the ACS callback URL
          for.
        type: string
      responses:
        200:
          description: The response body contains a JSON object declaring the callback
            URL
          schema:
            $ref: '#/definitions/SAMLACSCallbackUrlObject'
  /auth/saml/providers/{provider-id}/sp-metadata:
    get:
      summary: Get SP metadata (XML).
      description: The IAM acts as SAML service provider (SP). This endpoint provides
        the SP metadata as an XML document. Certain identity providers (IdPs) may
        want to directly consume this document.
      tags:
      - saml
      produces:
      - application/samlmetadata+xml
      parameters:
      - name: provider-id
        in: path
        required: true
        description: The ID of the SAML provider to retrieve the metadata for.
        type: string
      responses:
        200:
          description: The response body contains the metadata in UTF-8 encoding,
            setting the Content-Type to `application/samlmetadata+xml`.
  /groups:
    get:
      summary: Retrieve all group objects.
      description: Retrieve array of `Group` objects.
      tags:
      - groups
      produces:
      - application/json
      responses:
        '200':
          description: Success.
          schema:
            type: object
            properties:
              array:
                type: array
                items:
                  $ref: '#/definitions/Group'
  /groups/{gid}:
    get:
      summary: Get single group object.
      description: Get specific `Group` object.
      tags:
      - groups
      produces:
      - application/json
      parameters:
      - name: gid
        in: path
        required: true
        description: The ID of the group to retrieve.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/Group'
    put:
      summary: Create a group.
      description: Create a group.
      tags:
      - groups
      consumes:
      - application/json
      parameters:
      - name: gid
        in: path
        required: true
        description: The ID of the group.
        type: string
      - name: Group creation object
        in: body
        required: true
        schema:
          $ref: '#/definitions/GroupCreate'
      responses:
        201:
          description: Group created.
        409:
          description: Group exists.
    patch:
      summary: Update group.
      description: Update existing group (description).
      tags:
      - groups
      consumes:
      - application/json
      parameters:
      - name: gid
        in: path
        required: true
        description: The ID of the group to modify.
        type: string
      - name: Group update object
        in: body
        required: true
        schema:
          $ref: '#/definitions/GroupUpdate'
      responses:
        204:
          description: Update applied.
    delete:
      summary: Delete group.
      description: Delete group.
      tags:
      - groups
      parameters:
      - name: gid
        in: path
        required: true
        description: The ID of the group to delete.
        type: string
      responses:
        204:
          description: Success
  /groups/{gid}/permissions:
    get:
      summary: Retrieve group permissions.
      description: Retrieve permissions of this group.
      tags:
      - groups
      produces:
      - application/json
      parameters:
      - name: gid
        in: path
        required: true
        description: The group ID.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/GroupPermissions'
  /groups/{gid}/users:
    get:
      summary: Retrieve members of a group.
      description: Retrieve users that are member of this group. Allows to query service
        accounts, defaults to list only user accounts.
      tags:
      - groups
      produces:
      - application/json
      parameters:
      - name: gid
        in: path
        required: true
        description: The group ID.
        type: string
      - name: type
        in: query
        description: If set to `service`, list only service accounts. If unset, default
          to only listing user accounts members of a group.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/GroupUsers'
  /groups/{gid}/users/{uid}:
    delete:
      summary: Delete user account from group.
      description: Delete user account from group.
      tags:
      - groups
      parameters:
      - name: gid
        in: path
        required: true
        description: The ID of the group to delete from.
        type: string
      - name: uid
        in: path
        required: true
        description: The ID of the user account.
        type: string
      responses:
        204:
          description: Success.
    put:
      summary: Add account to group.
      description: Add account to group.
      tags:
      - groups
      parameters:
      - name: gid
        in: path
        required: true
        description: The ID of the group to add the user account to.
        type: string
      - name: uid
        description: The ID of the account to add.
        in: path
        required: true
        type: string
      responses:
        204:
          description: Success
        409:
          description: account is already part of the group.
  /ldap/config:
    get:
      summary: Retrieve current LDAP configuration.
      description: Retrieve current directory (LDAP) back-end configuration.
      produces:
      - application/json
      tags:
      - ldap
      responses:
        200:
          description: The response body contains a JSON object providing the current
            configuration.
          schema:
            $ref: '#/definitions/LDAPConfiguration'
        400:
          description: Various errors. If no config has yet been stored, the custom
            error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response.
    put:
      summary: Set new LDAP configuration.
      description: Set new directory (LDAP) back-end configuration. Replace current
        configuration, if existing.
      tags:
      - ldap
      consumes:
      - application/json
      parameters:
      - name: LDAP configuration
        description: JSON object containing the LDAP configuration details.
        in: body
        required: true
        schema:
          $ref: '#/definitions/LDAPConfiguration'
      responses:
        200:
          description: Configuration has been persisted. Basic validation tests passed,
            but the directory service was not contacted. You're encouraged to now
            perform a basic feature check against the directory back-end with the
            newly set configuration by using the config test endpoint.
        400:
          description: Various errors. If the configuration object itself is invalid,
            the custom error code `ERR_LDAP_CONFIG_INVALID` is set in the response
            and a description sheds light onto the problem specifics.
    delete:
      summary: Delete current LDAP configuration.
      description: Delete current directory (LDAP) back-end configuration. This deactivates
        the LDAP authentication.
      tags:
      - ldap
      responses:
        204:
          description: Configuration deleted.
        400:
          description: Various errors. If no config has yet been stored, the custom
            error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response.
  /ldap/config/test:
    post:
      summary: Test connection to the LDAP back-end.
      description: Perform basic feature tests. Verify that the current directory
        (LDAP) configuration parameters allow for a successful connection to the directory
        back-end. For instance, this endpoint simulates the procedure for authentication
        via LDAP, but provides more useful feedback upon failure than the actual login
        endpoint.
      tags:
      - ldap
      consumes:
      - application/json
      parameters:
      - name: Test user credentials
        description: JSON object containing `uid` and password of an LDAP user. For
          the most expressive test result, choose credentials different from the lookup
          credentials. The `uid` is the string the user is supposed to log in with
          after successful LDAP back-end configuration.
        in: body
        required: true
        schema:
          $ref: '#/definitions/LDAPTestCredentials'
      responses:
        200:
          description: Directory back-end was reached and all feature tests passed.
          schema:
            $ref: '#/definitions/LDAPTestResultObject'
        502:
          description: Either there was a connection error or one of the feature tests
            failed. To distinguish this response from a proxy-generated 502, a JSON
            object is included in the response. It contains a message in its `description`
            property, describing the problem in more detail.
          schema:
            $ref: '#/definitions/LDAPTestResultObject'
  /ldap/importgroup:
    post:
      summary: Import an LDAP group.
      description: Attempt to import a group of users from the configured directory
        (LDAP) back-end. See docs/ldap.md for details on group import.
      tags:
      - ldap
      consumes:
      - application/json
      parameters:
      - name: LDAP groupname
        description: A JSON object specifying the name of the group to be imported.
          The meaning of the name depends on the group search settings.
        in: body
        required: true
        schema:
          $ref: '#/definitions/LDAPImportGroupObject'
      responses:
        201:
          description: Success.
        400:
          description: Various errors. If no directory back-end has been configured
            yet, the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the
            response. If there was no LDAP search result or an error occured during
            the search process, one of the custom error codes `ERR_LDAP_IMPORT_GROUP_NOT_FOUND`
            and `ERR_LDAP_IMPORT_SEARCH_FAILED` is set in the response, and a description
            is provided to report the problem specifics.
  /ldap/importuser:
    post:
      summary: Import an LDAP user.
      description: Attempt to import a user from the configured directory (LDAP) back-end.
      tags:
      - ldap
      consumes:
      - application/json
      parameters:
      - name: LDAP username
        description: 'A JSON object specifying the username (read: "login" or "user
          ID") of the user that should be imported. That string is equivalent to the
          `uid` the user is supposed to log in with after successful import. The exact
          meaning of this string depends on the configured LDAP authentication method.'
        in: body
        required: true
        schema:
          $ref: '#/definitions/LDAPImportUserObject'
      responses:
        201:
          description: Success.
        400:
          description: Various errors. If no directory back-end has been configured
            yet, the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the
            response. If there was no LDAP search result or an error occured during
            the search process, one of the custom error codes `ERR_LDAP_IMPORT_USER_NOT_FOUND`
            and `ERR_LDAP_IMPORT_SEARCH_FAILED` is set in the response, and a description
            is provided to report the problem specifics.
  /users:
    get:
      summary: Retrieve all regular user accounts or service user accounts.
      description: Retrieve `User` objects. By default the list consists of regular
        user accounts, only. Alternatively, service user accounts may be requested
        instead.
      tags:
      - users
      parameters:
      - name: type
        in: query
        description: If set to `service`, list only service user accounts. If unset,
          default to only listing regular user accounts.
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Success.
          schema:
            type: object
            properties:
              array:
                type: array
                items:
                  $ref: '#/definitions/User'
  /users/{uid}:
    get:
      summary: Get single user object.
      description: Get specific `User` object.
      tags:
      - users
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        required: true
        description: The ID of the user object to retrieve.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/User'
    put:
      summary: Create user account.
      description: Create user (uid in url, details incl. credentials in body).
      tags:
      - users
      consumes:
      - application/json
      parameters:
      - name: uid
        in: path
        required: true
        description: The ID of the user account to create.
        type: string
      - name: User creation object
        description: Password/description.
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserCreate'
      responses:
        201:
          description: User created.
        409:
          description: User already exists.
    patch:
      summary: Update user account.
      description: Update existing user account (meta data and/or password).
      tags:
      - users
      consumes:
      - application/json
      parameters:
      - name: uid
        in: path
        required: true
        description: The ID of the user account to modify.
        type: string
      - name: User update object
        description: Password/description.
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserUpdate'
      responses:
        204:
          description: Update applied.
        501:
          description: Not implemented for service user accounts.
    delete:
      summary: Delete account.
      description: Delete account.
      tags:
      - users
      parameters:
      - name: uid
        in: path
        required: true
        description: The ID of the user account to delete.
        type: string
      responses:
        204:
          description: Success.
  /users/{uid}/groups:
    get:
      summary: Retrieve groups the user is member of.
      description: Retrieve groups the user is member of.
      tags:
      - users
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        required: true
        description: The ID of the user.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/UserGroups'
  /users/{uid}/permissions:
    get:
      summary: Retrieve permissions an account has.
      description: Retrieve the permissions for this account with direct permissions
        distinguished from those that are obtained through group membership.
      produces:
      - application/json
      tags:
      - users
      parameters:
      - name: uid
        in: path
        required: true
        description: The id of the user.
        type: string
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/UserPermissions'
definitions:
  LoginObject:
    type: object
    properties:
      uid:
        type: string
      password:
        type: string
      token:
        type: string
  AuthToken:
    type: object
    required:
    - token
    properties:
      token:
        type: string
    additionalProperties: false
  User:
    type: object
    required:
    - uid
    - url
    - description
    - is_remote
    - provider_type
    - provider_id
    properties:
      uid:
        type: string
      url:
        type: string
      description:
        type: string
      is_remote:
        type: boolean
      is_service:
        type: boolean
      public_key:
        type: string
      provider_type:
        type: string
      provider_id:
        type: string
    additionalProperties: false
  UserCreate:
    type: object
    properties:
      description:
        type: string
      password:
        type: string
      public_key:
        type: string
      provider_type:
        type: string
      provider_id:
        type: string
      cluster_url:
        type: string
      creator_uid:
        type: string
    additionalProperties: false
  UserUpdate:
    type: object
    properties:
      description:
        type: string
      password:
        type: string
    additionalProperties: false
  Action:
    type: object
    required:
    - name
    - url
    properties:
      name:
        type: string
      url:
        type: string
    additionalProperties: false
  UserGroups:
    type: object
    properties:
      array:
        type: array
        items:
          type: object
          required:
          - group
          - membershipurl
          properties:
            membershipurl:
              type: string
            group:
              $ref: '#/definitions/Group'
          additionalProperties: false
  UserPermissions:
    type: object
    properties:
      direct:
        type: array
        items:
          type: object
          required:
          - rid
          - description
          - aclurl
          - actions
          properties:
            rid:
              type: string
            description:
              type: string
            aclurl:
              type: string
            actions:
              type: array
              items:
                $ref: '#/definitions/Action'
          additionalProperties: false
      groups:
        type: array
        items:
          type: object
          required:
          - rid
          - gid
          - description
          - aclurl
          - membershipurl
          - actions
          properties:
            rid:
              type: string
            gid:
              type: string
            description:
              type: string
            aclurl:
              type: string
            membershipurl:
              type: string
            actions:
              type: array
              items:
                $ref: '#/definitions/Action'
          additionalProperties: false
    additionalProperties: false
  Group:
    type: object
    required:
    - gid
    - url
    - description
    - provider_type
    properties:
      gid:
        type: string
      url:
        type: string
      description:
        type: string
      provider_type:
        type: string
    additionalProperties: false
  GroupCreate:
    type: object
    required:
    - description
    properties:
      description:
        type: string
      provider_type:
        type: string
    additionalProperties: false
  GroupUpdate:
    type: object
    required:
    - description
    properties:
      description:
        type: string
    additionalProperties: false
  GroupUsers:
    type: object
    properties:
      array:
        type: array
        items:
          type: object
          required:
          - membershipurl
          - user
          properties:
            membershipurl:
              type: string
            user:
              $ref: '#/definitions/User'
    additionalProperties: false
  GroupPermissions:
    type: object
    properties:
      array:
        type: array
        items:
          type: object
          required:
          - rid
          - description
          - aclurl
          - actions
          properties:
            rid:
              type: string
            description:
              type: string
            aclurl:
              type: string
            actions:
              type: array
              items:
                $ref: '#/definitions/Action'
    additionalProperties: false
  ACL:
    type: object
    required:
    - rid
    - url
    - description
    properties:
      rid:
        type: string
      url:
        type: string
      description:
        type: string
    additionalProperties: false
  ACLCreate:
    type: object
    required:
    - description
    properties:
      description:
        type: string
    additionalProperties: false
  ACLUpdate:
    type: object
    required:
    - description
    properties:
      description:
        type: string
    additionalProperties: false
  ACLPermissions:
    type: object
    properties:
      groups:
        type: array
        items:
          type: object
          required:
          - gid
          - groupurl
          - actions
          properties:
            gid:
              type: string
            groupurl:
              type: string
            actions:
              type: array
              items:
                $ref: '#/definitions/Action'
      users:
        type: array
        items:
          type: object
          required:
          - uid
          - userurl
          - actions
          properties:
            uid:
              type: string
            userurl:
              type: string
            actions:
              type: array
              items:
                $ref: '#/definitions/Action'
    additionalProperties: false
  ActionAllowed:
    type: object
    required:
    - allowed
    properties:
      allowed:
        type: boolean
    additionalProperties: false
  OIDCProviderConfig:
    type: object
    required:
    - description
    - issuer
    - base_url
    - client_secret
    - client_id
    properties:
      description:
        type: string
      issuer:
        type: string
      base_url:
        type: string
      client_secret:
        type: string
      client_id:
        type: string
      verify_server_certificate:
        type: boolean
      ca_certs:
        type: string
    additionalProperties: false
  SAMLProviderConfig:
    type: object
    required:
    - description
    - idp_metadata
    - sp_base_url
    properties:
      description:
        type: string
      idp_metadata:
        type: string
      sp_base_url:
        type: string
    additionalProperties: false
  SAMLACSCallbackUrlObject:
    type: object
    required:
    - acs-callback-url
    properties:
      acs-callback-url:
        type: string
    additionalProperties: false
  LDAPUserSearchConfig:
    type: object
    required:
    - search-base
    - search-filter-template
    properties:
      search-base:
        type: string
      search-filter-template:
        type: string
    additionalProperties: false
  LDAPGroupSearchConfig:
    type: object
    required:
    - search-base
    - search-filter-template
    properties:
      search-base:
        type: string
      search-filter-template:
        type: string
      member-attributes:
        type: array
        items:
          type: string
    additionalProperties: false
  LDAPConfiguration:
    type: object
    required:
    - host
    - port
    - enforce-starttls
    - use-ldaps
    properties:
      host:
        type: string
      dntemplate:
        type: string
      port:
        type: integer
      enforce-starttls:
        type: boolean
      use-ldaps:
        type: boolean
      lookup-dn:
        type: string
      lookup-password:
        type: string
      user-search:
        $ref: '#/definitions/LDAPUserSearchConfig'
      group-search:
        $ref: '#/definitions/LDAPGroupSearchConfig'
      ca-certs:
        type: string
      client-cert:
        type: string
    additionalProperties: false
  LDAPImportUserObject:
    type: object
    required:
    - username
    properties:
      username:
        type: string
    additionalProperties: false
  LDAPImportGroupObject:
    type: object
    required:
    - groupname
    properties:
      groupname:
        type: string
    additionalProperties: false
  LDAPTestCredentials:
    type: object
    required:
    - uid
    - password
    properties:
      uid:
        type: string
      password:
        type: string
    additionalProperties: false
  LDAPTestResultObject:
    type: object
    required:
    - code
    - description
    properties:
      code:
        type: string
      description:
        type: string
    additionalProperties: false
